// ==============================================================
// Generated by Vitis HLS v2023.2.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="read_A_read_A,hls_ip_2023_2_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvh1582-vsva3697-2MP-e-S,HLS_INPUT_CLOCK=3.330000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.462000,HLS_SYN_LAT=40033,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=2293,HLS_SYN_LUT=7518,HLS_VERSION=2023_2_2}" *)

module read_A (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        P_N,
        A_len,
        A_read_addr_s_din,
        A_read_addr_s_full_n,
        A_read_addr_s_write,
        A_read_addr_offset,
        A_read_data_s_dout,
        A_read_data_s_empty_n,
        A_read_data_s_read,
        A_read_data_peek_dout,
        A_read_data_peek_empty_n,
        A_read_data_peek_read,
        A_write_addr_s_din,
        A_write_addr_s_full_n,
        A_write_addr_s_write,
        A_write_addr_offset,
        A_write_data_din,
        A_write_data_full_n,
        A_write_data_write,
        A_write_resp_s_dout,
        A_write_resp_s_empty_n,
        A_write_resp_s_read,
        A_write_resp_peek_dout,
        A_write_resp_peek_empty_n,
        A_write_resp_peek_read,
        fifo_A_din,
        fifo_A_full_n,
        fifo_A_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] P_N;
input  [31:0] A_len;
output  [63:0] A_read_addr_s_din;
input   A_read_addr_s_full_n;
output   A_read_addr_s_write;
input  [63:0] A_read_addr_offset;
input  [256:0] A_read_data_s_dout;
input   A_read_data_s_empty_n;
output   A_read_data_s_read;
input  [256:0] A_read_data_peek_dout;
input   A_read_data_peek_empty_n;
output   A_read_data_peek_read;
output  [63:0] A_write_addr_s_din;
input   A_write_addr_s_full_n;
output   A_write_addr_s_write;
input  [63:0] A_write_addr_offset;
output  [256:0] A_write_data_din;
input   A_write_data_full_n;
output   A_write_data_write;
input  [8:0] A_write_resp_s_dout;
input   A_write_resp_s_empty_n;
output   A_write_resp_s_read;
input  [8:0] A_write_resp_peek_dout;
input   A_write_resp_peek_empty_n;
output   A_write_resp_peek_read;
output  [512:0] fifo_A_din;
input   fifo_A_full_n;
output   fifo_A_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg A_read_addr_s_write;
reg A_read_data_s_read;
reg fifo_A_write;

 reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [31:0] rp_time_fu_192_p3;
reg   [31:0] rp_time_reg_273;
wire   [31:0] empty_22_fu_200_p2;
reg   [31:0] empty_22_reg_278;
wire    grp_read_A_Pipeline_rd_A_fu_168_ap_start;
wire    grp_read_A_Pipeline_rd_A_fu_168_ap_done;
wire    grp_read_A_Pipeline_rd_A_fu_168_ap_idle;
wire    grp_read_A_Pipeline_rd_A_fu_168_ap_ready;
wire   [512:0] grp_read_A_Pipeline_rd_A_fu_168_fifo_A_din;
wire    grp_read_A_Pipeline_rd_A_fu_168_fifo_A_write;
wire    grp_read_A_Pipeline_rd_A_fu_168_A_read_data_s_read;
wire   [63:0] grp_read_A_Pipeline_rd_A_fu_168_A_read_addr_s_din;
wire    grp_read_A_Pipeline_rd_A_fu_168_A_read_addr_s_write;
wire   [511:0] grp_read_A_Pipeline_rd_A_fu_168_tmp_1_out_o;
wire    grp_read_A_Pipeline_rd_A_fu_168_tmp_1_out_o_ap_vld;
reg    grp_read_A_Pipeline_rd_A_fu_168_ap_start_reg;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln180_fu_236_p2;
wire    ap_CS_fsm_state3;
reg   [511:0] tmp_fu_78;
reg   [30:0] rp_fu_82;
wire   [30:0] add_ln180_fu_226_p2;
wire   [0:0] icmp_ln177_fu_186_p2;
wire   [31:0] zext_ln180_fu_232_p1;
reg   [2:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 grp_read_A_Pipeline_rd_A_fu_168_ap_start_reg = 1'b0;
#0 rp_fu_82 = 31'd0;
end

read_A_read_A_Pipeline_rd_A grp_read_A_Pipeline_rd_A_fu_168(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_read_A_Pipeline_rd_A_fu_168_ap_start),
    .ap_done(grp_read_A_Pipeline_rd_A_fu_168_ap_done),
    .ap_idle(grp_read_A_Pipeline_rd_A_fu_168_ap_idle),
    .ap_ready(grp_read_A_Pipeline_rd_A_fu_168_ap_ready),
    .A_len(A_len),
    .fifo_A_din(grp_read_A_Pipeline_rd_A_fu_168_fifo_A_din),
    .fifo_A_full_n(fifo_A_full_n),
    .fifo_A_write(grp_read_A_Pipeline_rd_A_fu_168_fifo_A_write),
    .A_read_data_s_dout(A_read_data_s_dout),
    .A_read_data_s_empty_n(A_read_data_s_empty_n),
    .A_read_data_s_read(grp_read_A_Pipeline_rd_A_fu_168_A_read_data_s_read),
    .empty(empty_22_reg_278),
    .A_read_addr_s_din(grp_read_A_Pipeline_rd_A_fu_168_A_read_addr_s_din),
    .A_read_addr_s_full_n(A_read_addr_s_full_n),
    .A_read_addr_s_write(grp_read_A_Pipeline_rd_A_fu_168_A_read_addr_s_write),
    .A_read_addr_offset_load(A_read_addr_offset),
    .tmp_1_out_i(tmp_fu_78),
    .tmp_1_out_o(grp_read_A_Pipeline_rd_A_fu_168_tmp_1_out_o),
    .tmp_1_out_o_ap_vld(grp_read_A_Pipeline_rd_A_fu_168_tmp_1_out_o_ap_vld)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_read_A_Pipeline_rd_A_fu_168_ap_start_reg <= 1'b0;
    end else begin
        if (((icmp_ln180_fu_236_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            grp_read_A_Pipeline_rd_A_fu_168_ap_start_reg <= 1'b1;
        end else if ((grp_read_A_Pipeline_rd_A_fu_168_ap_ready == 1'b1)) begin
            grp_read_A_Pipeline_rd_A_fu_168_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        rp_fu_82 <= 31'd0;
    end else if (((icmp_ln180_fu_236_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        rp_fu_82 <= add_ln180_fu_226_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        empty_22_reg_278[31 : 1] <= empty_22_fu_200_p2[31 : 1];
        rp_time_reg_273 <= rp_time_fu_192_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_read_A_Pipeline_rd_A_fu_168_tmp_1_out_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_fu_78 <= grp_read_A_Pipeline_rd_A_fu_168_tmp_1_out_o;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        A_read_addr_s_write = grp_read_A_Pipeline_rd_A_fu_168_A_read_addr_s_write;
    end else begin
        A_read_addr_s_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        A_read_data_s_read = grp_read_A_Pipeline_rd_A_fu_168_A_read_data_s_read;
    end else begin
        A_read_data_s_read = 1'b0;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((grp_read_A_Pipeline_rd_A_fu_168_ap_done == 1'b0)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln180_fu_236_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln180_fu_236_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        fifo_A_write = grp_read_A_Pipeline_rd_A_fu_168_fifo_A_write;
    end else begin
        fifo_A_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln180_fu_236_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((grp_read_A_Pipeline_rd_A_fu_168_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign A_read_addr_s_din = grp_read_A_Pipeline_rd_A_fu_168_A_read_addr_s_din;

assign A_read_data_peek_read = 1'b0;

assign A_write_addr_s_din = 64'd0;

assign A_write_addr_s_write = 1'b0;

assign A_write_data_din = 257'd0;

assign A_write_data_write = 1'b0;

assign A_write_resp_peek_read = 1'b0;

assign A_write_resp_s_read = 1'b0;

assign add_ln180_fu_226_p2 = (rp_fu_82 + 31'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign empty_22_fu_200_p2 = A_len << 32'd1;

assign fifo_A_din = grp_read_A_Pipeline_rd_A_fu_168_fifo_A_din;

assign grp_read_A_Pipeline_rd_A_fu_168_ap_start = grp_read_A_Pipeline_rd_A_fu_168_ap_start_reg;

assign icmp_ln177_fu_186_p2 = ((P_N == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln180_fu_236_p2 = (($signed(zext_ln180_fu_232_p1) < $signed(rp_time_reg_273)) ? 1'b1 : 1'b0);

assign rp_time_fu_192_p3 = ((icmp_ln177_fu_186_p2[0:0] == 1'b1) ? 32'd1 : P_N);

assign zext_ln180_fu_232_p1 = rp_fu_82;

always @ (posedge ap_clk) begin
    empty_22_reg_278[0] <= 1'b0;
end

endmodule //read_A
