`timescale 1 ns / 1 ps
// ==============================================================
// Generated by Vitis HLS v2023.2.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
 
(* CORE_GENERATION_INFO="read_edge_list_ptr_read_edge_list_ptr,hls_ip_2023_2_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvh1582-vsva3697-2MP-e-S,HLS_INPUT_CLOCK=3.330000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.071000,HLS_SYN_LAT=3236,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=169,HLS_SYN_LUT=568,HLS_VERSION=2023_2_2}" *)
module read_edge_list_ptr (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        num_ite,
        M,
        P_N,
        K,
        edge_list_ptr_read_addr_s_din,
        edge_list_ptr_read_addr_s_full_n,
        edge_list_ptr_read_addr_s_write,
        edge_list_ptr_read_addr_offset,
        edge_list_ptr_read_data_s_dout,
        edge_list_ptr_read_data_s_empty_n,
        edge_list_ptr_read_data_s_read,
        edge_list_ptr_read_data_peek_dout,
        edge_list_ptr_read_data_peek_empty_n,
        edge_list_ptr_read_data_peek_read,
        edge_list_ptr_write_addr_s_din,
        edge_list_ptr_write_addr_s_full_n,
        edge_list_ptr_write_addr_s_write,
        edge_list_ptr_write_addr_offset,
        edge_list_ptr_write_data_din,
        edge_list_ptr_write_data_full_n,
        edge_list_ptr_write_data_write,
        edge_list_ptr_write_resp_s_dout,
        edge_list_ptr_write_resp_s_empty_n,
        edge_list_ptr_write_resp_s_read,
        edge_list_ptr_write_resp_peek_dout,
        edge_list_ptr_write_resp_peek_empty_n,
        edge_list_ptr_write_resp_peek_read,
        PE_inst_din,
        PE_inst_full_n,
        PE_inst_write
);
parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;
input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] num_ite;
input  [31:0] M;
input  [31:0] P_N;
input  [31:0] K;
output  [63:0] edge_list_ptr_read_addr_s_din;
input   edge_list_ptr_read_addr_s_full_n;
output   edge_list_ptr_read_addr_s_write;
input  [63:0] edge_list_ptr_read_addr_offset;
input  [32:0] edge_list_ptr_read_data_s_dout;
input   edge_list_ptr_read_data_s_empty_n;
output   edge_list_ptr_read_data_s_read;
input  [32:0] edge_list_ptr_read_data_peek_dout;
input   edge_list_ptr_read_data_peek_empty_n;
output   edge_list_ptr_read_data_peek_read;
output  [63:0] edge_list_ptr_write_addr_s_din;
input   edge_list_ptr_write_addr_s_full_n;
output   edge_list_ptr_write_addr_s_write;
input  [63:0] edge_list_ptr_write_addr_offset;
output  [32:0] edge_list_ptr_write_data_din;
input   edge_list_ptr_write_data_full_n;
output   edge_list_ptr_write_data_write;
input  [8:0] edge_list_ptr_write_resp_s_dout;
input   edge_list_ptr_write_resp_s_empty_n;
output   edge_list_ptr_write_resp_s_read;
input  [8:0] edge_list_ptr_write_resp_peek_dout;
input   edge_list_ptr_write_resp_peek_empty_n;
output   edge_list_ptr_write_resp_peek_read;
output  [32:0] PE_inst_din;
input   PE_inst_full_n;
output   PE_inst_write;
reg ap_done;
reg ap_idle;
reg ap_ready;
reg edge_list_ptr_read_addr_s_write;
reg edge_list_ptr_read_data_s_read;
reg[32:0] PE_inst_din;
reg PE_inst_write;
 reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    PE_inst_blk_n;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire   [31:0] rp_time_fu_237_p3;
reg   [31:0] rp_time_reg_318;
wire   [31:0] num_ite_plus1_fu_263_p2;
reg   [31:0] num_ite_plus1_reg_323;
wire    grp_read_edge_list_ptr_Pipeline_rd_ptr_fu_187_ap_start;
wire    grp_read_edge_list_ptr_Pipeline_rd_ptr_fu_187_ap_done;
wire    grp_read_edge_list_ptr_Pipeline_rd_ptr_fu_187_ap_idle;
wire    grp_read_edge_list_ptr_Pipeline_rd_ptr_fu_187_ap_ready;
wire   [32:0] grp_read_edge_list_ptr_Pipeline_rd_ptr_fu_187_PE_inst_din;
wire    grp_read_edge_list_ptr_Pipeline_rd_ptr_fu_187_PE_inst_write;
wire    grp_read_edge_list_ptr_Pipeline_rd_ptr_fu_187_edge_list_ptr_read_data_s_read;
wire   [63:0] grp_read_edge_list_ptr_Pipeline_rd_ptr_fu_187_edge_list_ptr_read_addr_s_din;
wire    grp_read_edge_list_ptr_Pipeline_rd_ptr_fu_187_edge_list_ptr_read_addr_s_write;
reg    grp_read_edge_list_ptr_Pipeline_rd_ptr_fu_187_ap_start_reg;
wire    ap_CS_fsm_state5;
wire   [0:0] icmp_ln176_fu_286_p2;
wire    ap_CS_fsm_state6;
reg   [30:0] rp_fu_82;
wire   [30:0] add_ln176_fu_276_p2;
reg    ap_block_state1;
wire   [32:0] zext_ln151_fu_201_p1;
wire   [32:0] zext_ln151_1_fu_222_p1;
wire   [32:0] zext_ln151_2_fu_245_p1;
wire   [32:0] zext_ln151_3_fu_254_p1;
wire   [0:0] icmp_ln169_fu_231_p2;
wire   [31:0] zext_ln176_fu_282_p1;
reg   [5:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
reg    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
reg    ap_ST_fsm_state6_blk;
wire    ap_ce_reg;
// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
#0 grp_read_edge_list_ptr_Pipeline_rd_ptr_fu_187_ap_start_reg = 1'b0;
#0 rp_fu_82 = 31'd0;
end
read_edge_list_ptr_read_edge_list_ptr_Pipeline_rd_ptr grp_read_edge_list_ptr_Pipeline_rd_ptr_fu_187(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_read_edge_list_ptr_Pipeline_rd_ptr_fu_187_ap_start),
    .ap_done(grp_read_edge_list_ptr_Pipeline_rd_ptr_fu_187_ap_done),
    .ap_idle(grp_read_edge_list_ptr_Pipeline_rd_ptr_fu_187_ap_idle),
    .ap_ready(grp_read_edge_list_ptr_Pipeline_rd_ptr_fu_187_ap_ready),
    .num_ite_plus1(num_ite_plus1_reg_323),
    .PE_inst_din(grp_read_edge_list_ptr_Pipeline_rd_ptr_fu_187_PE_inst_din),
    .PE_inst_full_n(PE_inst_full_n),
    .PE_inst_write(grp_read_edge_list_ptr_Pipeline_rd_ptr_fu_187_PE_inst_write),
    .edge_list_ptr_read_data_s_dout(edge_list_ptr_read_data_s_dout),
    .edge_list_ptr_read_data_s_empty_n(edge_list_ptr_read_data_s_empty_n),
    .edge_list_ptr_read_data_s_read(grp_read_edge_list_ptr_Pipeline_rd_ptr_fu_187_edge_list_ptr_read_data_s_read),
    .edge_list_ptr_read_addr_s_din(grp_read_edge_list_ptr_Pipeline_rd_ptr_fu_187_edge_list_ptr_read_addr_s_din),
    .edge_list_ptr_read_addr_s_full_n(edge_list_ptr_read_addr_s_full_n),
    .edge_list_ptr_read_addr_s_write(grp_read_edge_list_ptr_Pipeline_rd_ptr_fu_187_edge_list_ptr_read_addr_s_write),
    .edge_list_ptr_read_addr_offset_load(edge_list_ptr_read_addr_offset)
);
always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end
always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_read_edge_list_ptr_Pipeline_rd_ptr_fu_187_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln176_fu_286_p2 == 1'd1))) begin
            grp_read_edge_list_ptr_Pipeline_rd_ptr_fu_187_ap_start_reg <= 1'b1;
        end else if ((grp_read_edge_list_ptr_Pipeline_rd_ptr_fu_187_ap_ready == 1'b1)) begin
            grp_read_edge_list_ptr_Pipeline_rd_ptr_fu_187_ap_start_reg <= 1'b0;
        end
    end
end
always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1))) begin
        rp_fu_82 <= 31'd0;
    end else if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln176_fu_286_p2 == 1'd1))) begin
        rp_fu_82 <= add_ln176_fu_276_p2;
    end
end
always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        num_ite_plus1_reg_323 <= num_ite_plus1_fu_263_p2;
    end
end
always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        rp_time_reg_318 <= rp_time_fu_237_p3;
    end
end
always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        PE_inst_blk_n = PE_inst_full_n;
    end else begin
        PE_inst_blk_n = 1'b1;
    end
end
always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'b1 == PE_inst_full_n))) begin
        PE_inst_din = zext_ln151_3_fu_254_p1;
    end else if (((1'b1 == ap_CS_fsm_state3) & (1'b1 == PE_inst_full_n))) begin
        PE_inst_din = zext_ln151_2_fu_245_p1;
    end else if (((1'b1 == ap_CS_fsm_state2) & (1'b1 == PE_inst_full_n))) begin
        PE_inst_din = zext_ln151_1_fu_222_p1;
    end else if (((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1))) begin
        PE_inst_din = zext_ln151_fu_201_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        PE_inst_din = grp_read_edge_list_ptr_Pipeline_rd_ptr_fu_187_PE_inst_din;
    end else begin
        PE_inst_din = grp_read_edge_list_ptr_Pipeline_rd_ptr_fu_187_PE_inst_din;
    end
end
always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state4) & (1'b1 == PE_inst_full_n)) | ((1'b1 == ap_CS_fsm_state3) & (1'b1 == PE_inst_full_n)) | ((1'b1 == ap_CS_fsm_state2) & (1'b1 == PE_inst_full_n)) | ((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1)))) begin
        PE_inst_write = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        PE_inst_write = grp_read_edge_list_ptr_Pipeline_rd_ptr_fu_187_PE_inst_write;
    end else begin
        PE_inst_write = 1'b0;
    end
end
always @ (*) begin
    if ((1'b1 == ap_block_state1)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end
always @ (*) begin
    if ((1'b0 == PE_inst_full_n)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end
always @ (*) begin
    if ((1'b0 == PE_inst_full_n)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end
always @ (*) begin
    if ((1'b0 == PE_inst_full_n)) begin
        ap_ST_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_fsm_state4_blk = 1'b0;
    end
end
assign ap_ST_fsm_state5_blk = 1'b0;
always @ (*) begin
    if ((grp_read_edge_list_ptr_Pipeline_rd_ptr_fu_187_ap_done == 1'b0)) begin
        ap_ST_fsm_state6_blk = 1'b1;
    end else begin
        ap_ST_fsm_state6_blk = 1'b0;
    end
end
always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln176_fu_286_p2 == 1'd0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end
always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end
always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln176_fu_286_p2 == 1'd0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end
always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        edge_list_ptr_read_addr_s_write = grp_read_edge_list_ptr_Pipeline_rd_ptr_fu_187_edge_list_ptr_read_addr_s_write;
    end else begin
        edge_list_ptr_read_addr_s_write = 1'b0;
    end
end
always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        edge_list_ptr_read_data_s_read = grp_read_edge_list_ptr_Pipeline_rd_ptr_fu_187_edge_list_ptr_read_data_s_read;
    end else begin
        edge_list_ptr_read_data_s_read = 1'b0;
    end
end
always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (1'b1 == PE_inst_full_n))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (1'b1 == PE_inst_full_n))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (1'b1 == PE_inst_full_n))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln176_fu_286_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((grp_read_edge_list_ptr_Pipeline_rd_ptr_fu_187_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end
assign add_ln176_fu_276_p2 = (rp_fu_82 + 31'd1);
assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];
assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];
assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];
assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];
assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];
assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];
always @ (*) begin
    ap_block_state1 = ((1'b0 == PE_inst_full_n) | (ap_start == 1'b0));
end
always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end
assign edge_list_ptr_read_addr_s_din = grp_read_edge_list_ptr_Pipeline_rd_ptr_fu_187_edge_list_ptr_read_addr_s_din;
assign edge_list_ptr_read_data_peek_read = 1'b0;
assign edge_list_ptr_write_addr_s_din = 64'd0;
assign edge_list_ptr_write_addr_s_write = 1'b0;
assign edge_list_ptr_write_data_din = 33'd0;
assign edge_list_ptr_write_data_write = 1'b0;
assign edge_list_ptr_write_resp_peek_read = 1'b0;
assign edge_list_ptr_write_resp_s_read = 1'b0;
assign grp_read_edge_list_ptr_Pipeline_rd_ptr_fu_187_ap_start = grp_read_edge_list_ptr_Pipeline_rd_ptr_fu_187_ap_start_reg;
assign icmp_ln169_fu_231_p2 = ((P_N == 32'd0) ? 1'b1 : 1'b0);
assign icmp_ln176_fu_286_p2 = (($signed(zext_ln176_fu_282_p1) < $signed(rp_time_reg_318)) ? 1'b1 : 1'b0);
assign num_ite_plus1_fu_263_p2 = (num_ite + 32'd1);
assign rp_time_fu_237_p3 = ((icmp_ln169_fu_231_p2[0:0] == 1'b1) ? 32'd1 : P_N);
assign zext_ln151_1_fu_222_p1 = M;
assign zext_ln151_2_fu_245_p1 = rp_time_fu_237_p3;
assign zext_ln151_3_fu_254_p1 = K;
assign zext_ln151_fu_201_p1 = num_ite;
assign zext_ln176_fu_282_p1 = rp_fu_82;
endmodule