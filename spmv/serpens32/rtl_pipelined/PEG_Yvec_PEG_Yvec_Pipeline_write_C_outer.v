`timescale 1 ns / 1 ps
// ==============================================================
// Generated by Vitis HLS v2023.2.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
 
module PEG_Yvec_PEG_Yvec_Pipeline_write_C_outer (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        fifo_Y_out_din,
        fifo_Y_out_full_n,
        fifo_Y_out_write,
        num_v_out,
        local_C_address0,
        local_C_ce0,
        local_C_q0,
        local_C_1_address0,
        local_C_1_ce0,
        local_C_1_q0,
        local_C_2_address0,
        local_C_2_ce0,
        local_C_2_q0,
        local_C_3_address0,
        local_C_3_ce0,
        local_C_3_q0,
        local_C_4_address0,
        local_C_4_ce0,
        local_C_4_q0,
        local_C_5_address0,
        local_C_5_ce0,
        local_C_5_q0,
        local_C_6_address0,
        local_C_6_ce0,
        local_C_6_q0,
        local_C_7_address0,
        local_C_7_ce0,
        local_C_7_q0
);
parameter    ap_ST_fsm_pp0_stage0 = 1'd1;
input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [64:0] fifo_Y_out_din;
input   fifo_Y_out_full_n;
output   fifo_Y_out_write;
input  [26:0] num_v_out;
output  [12:0] local_C_address0;
output   local_C_ce0;
input  [63:0] local_C_q0;
output  [12:0] local_C_1_address0;
output   local_C_1_ce0;
input  [63:0] local_C_1_q0;
output  [12:0] local_C_2_address0;
output   local_C_2_ce0;
input  [63:0] local_C_2_q0;
output  [12:0] local_C_3_address0;
output   local_C_3_ce0;
input  [63:0] local_C_3_q0;
output  [12:0] local_C_4_address0;
output   local_C_4_ce0;
input  [63:0] local_C_4_q0;
output  [12:0] local_C_5_address0;
output   local_C_5_ce0;
input  [63:0] local_C_5_q0;
output  [12:0] local_C_6_address0;
output   local_C_6_ce0;
input  [63:0] local_C_6_q0;
output  [12:0] local_C_7_address0;
output   local_C_7_ce0;
input  [63:0] local_C_7_q0;
reg ap_idle;
reg fifo_Y_out_write;
reg local_C_ce0;
reg local_C_1_ce0;
reg local_C_2_ce0;
reg local_C_3_ce0;
reg local_C_4_ce0;
reg local_C_5_ce0;
reg local_C_6_ce0;
reg local_C_7_ce0;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
reg    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln248_fu_257_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    fifo_Y_out_blk_n;
wire    ap_block_pp0_stage0;
reg    ap_block_pp0_stage0_11001;
reg   [63:0] local_C_load_reg_476;
reg   [63:0] local_C_1_load_reg_481;
reg   [63:0] local_C_2_load_reg_486;
reg   [63:0] local_C_3_load_reg_491;
reg   [63:0] local_C_4_load_reg_496;
reg   [63:0] local_C_5_load_reg_501;
reg   [63:0] local_C_6_load_reg_506;
reg   [63:0] local_C_7_load_reg_511;
wire   [63:0] zext_ln252_fu_273_p1;
reg   [25:0] i_fu_90;
wire   [25:0] i_2_fu_247_p2;
wire    ap_loop_init;
reg   [25:0] ap_sig_allocacmp_i_1;
reg   [31:0] c_idx_fu_94;
wire   [31:0] c_idx_2_fu_392_p3;
reg    ap_block_pp0_stage0_01001;
wire   [26:0] zext_ln248_fu_253_p1;
wire   [12:0] lshr_ln_fu_263_p4;
wire   [63:0] u_64_fu_339_p17;
wire   [2:0] u_64_fu_339_p18;
wire   [63:0] u_64_fu_339_p19;
wire   [31:0] c_idx_1_fu_380_p2;
wire   [0:0] icmp_ln259_fu_386_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire   [2:0] u_64_fu_339_p1;
wire   [2:0] u_64_fu_339_p3;
wire   [2:0] u_64_fu_339_p5;
wire   [2:0] u_64_fu_339_p7;
wire  signed [2:0] u_64_fu_339_p9;
wire  signed [2:0] u_64_fu_339_p11;
wire  signed [2:0] u_64_fu_339_p13;
wire  signed [2:0] u_64_fu_339_p15;
wire    ap_ce_reg;
// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 i_fu_90 = 26'd0;
#0 c_idx_fu_94 = 32'd0;
#0 ap_done_reg = 1'b0;
end
PEG_Yvec_sparsemux_17_3_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 3'h0 ),
    .din0_WIDTH( 64 ),
    .CASE1( 3'h1 ),
    .din1_WIDTH( 64 ),
    .CASE2( 3'h2 ),
    .din2_WIDTH( 64 ),
    .CASE3( 3'h3 ),
    .din3_WIDTH( 64 ),
    .CASE4( 3'h4 ),
    .din4_WIDTH( 64 ),
    .CASE5( 3'h5 ),
    .din5_WIDTH( 64 ),
    .CASE6( 3'h6 ),
    .din6_WIDTH( 64 ),
    .CASE7( 3'h7 ),
    .din7_WIDTH( 64 ),
    .def_WIDTH( 64 ),
    .sel_WIDTH( 3 ),
    .dout_WIDTH( 64 ))
sparsemux_17_3_64_1_1_U54(
    .din0(local_C_load_reg_476),
    .din1(local_C_1_load_reg_481),
    .din2(local_C_2_load_reg_486),
    .din3(local_C_3_load_reg_491),
    .din4(local_C_4_load_reg_496),
    .din5(local_C_5_load_reg_501),
    .din6(local_C_6_load_reg_506),
    .din7(local_C_7_load_reg_511),
    .def(u_64_fu_339_p17),
    .sel(u_64_fu_339_p18),
    .dout(u_64_fu_339_p19)
);
PEG_Yvec_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);
always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end
always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end
always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end
always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end
always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            c_idx_fu_94 <= 32'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            c_idx_fu_94 <= c_idx_2_fu_392_p3;
        end
    end
end
always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln248_fu_257_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_90 <= i_2_fu_247_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_90 <= 26'd0;
        end
    end
end
always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        local_C_1_load_reg_481 <= local_C_1_q0;
        local_C_2_load_reg_486 <= local_C_2_q0;
        local_C_3_load_reg_491 <= local_C_3_q0;
        local_C_4_load_reg_496 <= local_C_4_q0;
        local_C_5_load_reg_501 <= local_C_5_q0;
        local_C_6_load_reg_506 <= local_C_6_q0;
        local_C_7_load_reg_511 <= local_C_7_q0;
        local_C_load_reg_476 <= local_C_q0;
    end
end
always @ (*) begin
    if (((icmp_ln248_fu_257_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end
always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end
always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end
always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end
always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end
always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_1 = 26'd0;
    end else begin
        ap_sig_allocacmp_i_1 = i_fu_90;
    end
end
always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        fifo_Y_out_blk_n = fifo_Y_out_full_n;
    end else begin
        fifo_Y_out_blk_n = 1'b1;
    end
end
always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        fifo_Y_out_write = 1'b1;
    end else begin
        fifo_Y_out_write = 1'b0;
    end
end
always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        local_C_1_ce0 = 1'b1;
    end else begin
        local_C_1_ce0 = 1'b0;
    end
end
always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        local_C_2_ce0 = 1'b1;
    end else begin
        local_C_2_ce0 = 1'b0;
    end
end
always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        local_C_3_ce0 = 1'b1;
    end else begin
        local_C_3_ce0 = 1'b0;
    end
end
always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        local_C_4_ce0 = 1'b1;
    end else begin
        local_C_4_ce0 = 1'b0;
    end
end
always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        local_C_5_ce0 = 1'b1;
    end else begin
        local_C_5_ce0 = 1'b0;
    end
end
always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        local_C_6_ce0 = 1'b1;
    end else begin
        local_C_6_ce0 = 1'b0;
    end
end
always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        local_C_7_ce0 = 1'b1;
    end else begin
        local_C_7_ce0 = 1'b0;
    end
end
always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        local_C_ce0 = 1'b1;
    end else begin
        local_C_ce0 = 1'b0;
    end
end
always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end
assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];
assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);
always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2));
end
always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2));
end
always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2));
end
always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = (fifo_Y_out_full_n == 1'b0);
end
assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);
assign ap_enable_reg_pp0_iter0 = ap_start_int;
assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;
assign c_idx_1_fu_380_p2 = (c_idx_fu_94 + 32'd1);
assign c_idx_2_fu_392_p3 = ((icmp_ln259_fu_386_p2[0:0] == 1'b1) ? 32'd0 : c_idx_1_fu_380_p2);
assign fifo_Y_out_din = u_64_fu_339_p19;
assign i_2_fu_247_p2 = (ap_sig_allocacmp_i_1 + 26'd1);
assign icmp_ln248_fu_257_p2 = (($signed(zext_ln248_fu_253_p1) < $signed(num_v_out)) ? 1'b1 : 1'b0);
assign icmp_ln259_fu_386_p2 = ((c_idx_1_fu_380_p2 == 32'd8) ? 1'b1 : 1'b0);
assign local_C_1_address0 = zext_ln252_fu_273_p1;
assign local_C_2_address0 = zext_ln252_fu_273_p1;
assign local_C_3_address0 = zext_ln252_fu_273_p1;
assign local_C_4_address0 = zext_ln252_fu_273_p1;
assign local_C_5_address0 = zext_ln252_fu_273_p1;
assign local_C_6_address0 = zext_ln252_fu_273_p1;
assign local_C_7_address0 = zext_ln252_fu_273_p1;
assign local_C_address0 = zext_ln252_fu_273_p1;
assign lshr_ln_fu_263_p4 = {{ap_sig_allocacmp_i_1[15:3]}};
assign u_64_fu_339_p17 = 'bx;
assign u_64_fu_339_p18 = c_idx_fu_94[2:0];
assign zext_ln248_fu_253_p1 = ap_sig_allocacmp_i_1;
assign zext_ln252_fu_273_p1 = lshr_ln_fu_263_p4;
endmodule