`timescale 1 ns / 1 ps
// ==============================================================
// Generated by Vitis HLS v2023.2.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
 
module read_Y_read_Y_Pipeline_rd_Y (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        sext_ln229,
        fifo_Y_din,
        fifo_Y_full_n,
        fifo_Y_write,
        Y_read_data_s_dout,
        Y_read_data_s_empty_n,
        Y_read_data_s_read,
        mul_cast,
        Y_read_addr_s_din,
        Y_read_addr_s_full_n,
        Y_read_addr_s_write,
        Y_read_addr_offset_load,
        tmp_1_out_i,
        tmp_1_out_o,
        tmp_1_out_o_ap_vld
);
parameter    ap_ST_fsm_pp0_stage0 = 1'd1;
input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [27:0] sext_ln229;
output  [512:0] fifo_Y_din;
input   fifo_Y_full_n;
output   fifo_Y_write;
input  [256:0] Y_read_data_s_dout;
input   Y_read_data_s_empty_n;
output   Y_read_data_s_read;
input  [28:0] mul_cast;
output  [63:0] Y_read_addr_s_din;
input   Y_read_addr_s_full_n;
output   Y_read_addr_s_write;
input  [63:0] Y_read_addr_offset_load;
input  [511:0] tmp_1_out_i;
output  [511:0] tmp_1_out_o;
output   tmp_1_out_o_ap_vld;
reg ap_idle;
reg fifo_Y_write;
reg Y_read_data_s_read;
reg Y_read_addr_s_write;
reg[511:0] tmp_1_out_o;
reg tmp_1_out_o_ap_vld;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln236_fu_281_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire  signed [31:0] mul_cast_cast_fu_218_p1;
reg  signed [31:0] mul_cast_cast_reg_1014;
wire  signed [31:0] sext_ln229_cast_fu_222_p1;
reg  signed [31:0] sext_ln229_cast_reg_1019;
reg   [31:0] ap_phi_mux_cnt_1_phi_fu_195_p4;
wire   [31:0] cnt_5_fu_899_p2;
wire   [31:0] ap_phi_reg_pp0_iter1_cnt_1_reg_192;
wire   [0:0] and_ln248_fu_353_p2;
reg   [31:0] ap_phi_mux_cnt_2_phi_fu_204_p4;
wire   [31:0] ap_phi_reg_pp0_iter1_cnt_2_reg_201;
wire   [0:0] and_ln256_fu_926_p2;
wire   [511:0] or_ln59_7_fu_893_p2;
wire    ap_block_pp0_stage0;
reg   [511:0] ap_sig_allocacmp_tmp_1_out_load_1;
reg   [31:0] cnt_fu_118;
wire    ap_loop_init;
reg   [31:0] i_resp_fu_122;
wire   [31:0] i_resp_2_fu_949_p2;
reg   [31:0] i_req_fu_126;
wire   [31:0] i_req_2_fu_319_p2;
wire   [0:0] and_ln243_fu_291_p2;
wire    ap_block_pp0_stage0_01001;
wire   [0:0] tmp_3_nbreadreq_fu_163_p3;
wire   [0:0] icmp_ln243_fu_286_p2;
wire   [0:0] and_ln243_fu_291_p1;
wire   [36:0] shl_ln_fu_297_p3;
wire  signed [63:0] sext_ln25_fu_305_p1;
wire   [30:0] tmp_1_fu_337_p4;
wire   [0:0] icmp_ln248_fu_347_p2;
wire   [28:0] empty_15_fu_447_p1;
wire   [36:0] shl_ln1_fu_457_p3;
wire  signed [63:0] sext_ln59_fu_465_p1;
wire   [511:0] zext_ln59_fu_469_p1;
wire   [31:0] elem_val_fu_373_p1;
wire   [511:0] zext_ln59_1_fu_479_p1;
wire   [31:0] empty_16_fu_451_p2;
wire   [31:0] or_ln252_fu_489_p2;
wire   [36:0] shl_ln54_1_fu_495_p3;
wire  signed [63:0] sext_ln59_1_fu_503_p1;
wire   [511:0] zext_ln59_2_fu_507_p1;
wire   [31:0] elem_val_1_fu_377_p4;
wire   [511:0] zext_ln59_3_fu_517_p1;
wire   [31:0] or_ln252_1_fu_527_p2;
wire   [36:0] shl_ln54_2_fu_533_p3;
wire  signed [63:0] sext_ln59_2_fu_541_p1;
wire   [511:0] zext_ln59_4_fu_545_p1;
wire   [31:0] lshr_ln_fu_387_p4;
wire   [511:0] zext_ln59_5_fu_555_p1;
wire   [31:0] or_ln252_2_fu_565_p2;
wire   [36:0] shl_ln54_3_fu_571_p3;
wire  signed [63:0] sext_ln59_3_fu_579_p1;
wire   [511:0] zext_ln59_6_fu_583_p1;
wire   [31:0] lshr_ln78_1_fu_397_p4;
wire   [511:0] zext_ln59_7_fu_593_p1;
wire   [31:0] or_ln252_3_fu_603_p2;
wire   [36:0] shl_ln54_4_fu_609_p3;
wire  signed [63:0] sext_ln59_4_fu_617_p1;
wire   [511:0] zext_ln59_8_fu_621_p1;
wire   [31:0] lshr_ln78_2_fu_407_p4;
wire   [511:0] zext_ln59_9_fu_631_p1;
wire   [31:0] or_ln252_4_fu_641_p2;
wire   [36:0] shl_ln54_5_fu_647_p3;
wire  signed [63:0] sext_ln59_5_fu_655_p1;
wire   [511:0] zext_ln59_10_fu_659_p1;
wire   [31:0] lshr_ln78_3_fu_417_p4;
wire   [511:0] zext_ln59_11_fu_669_p1;
wire   [31:0] or_ln252_5_fu_679_p2;
wire   [36:0] shl_ln54_6_fu_685_p3;
wire  signed [63:0] sext_ln59_6_fu_693_p1;
wire   [511:0] zext_ln59_12_fu_697_p1;
wire   [31:0] lshr_ln78_4_fu_427_p4;
wire   [511:0] zext_ln59_13_fu_707_p1;
wire   [31:0] or_ln252_6_fu_717_p2;
wire   [36:0] shl_ln54_7_fu_723_p3;
wire  signed [63:0] sext_ln59_7_fu_731_p1;
wire   [511:0] zext_ln59_14_fu_735_p1;
wire   [31:0] lshr_ln78_5_fu_437_p4;
wire   [511:0] zext_ln59_15_fu_745_p1;
wire   [511:0] shl_ln59_fu_473_p2;
wire   [511:0] xor_ln59_fu_755_p2;
wire   [511:0] shl_ln59_2_fu_511_p2;
wire   [511:0] shl_ln59_1_fu_483_p2;
wire   [511:0] and_ln59_fu_761_p2;
wire   [511:0] or_ln59_fu_773_p2;
wire   [511:0] xor_ln59_1_fu_767_p2;
wire   [511:0] shl_ln59_4_fu_549_p2;
wire   [511:0] shl_ln59_3_fu_521_p2;
wire   [511:0] and_ln59_1_fu_779_p2;
wire   [511:0] or_ln59_1_fu_791_p2;
wire   [511:0] xor_ln59_2_fu_785_p2;
wire   [511:0] shl_ln59_6_fu_587_p2;
wire   [511:0] and_ln59_2_fu_797_p2;
wire   [511:0] shl_ln59_5_fu_559_p2;
wire   [511:0] or_ln59_2_fu_809_p2;
wire   [511:0] xor_ln59_3_fu_803_p2;
wire   [511:0] shl_ln59_8_fu_625_p2;
wire   [511:0] and_ln59_3_fu_815_p2;
wire   [511:0] shl_ln59_7_fu_597_p2;
wire   [511:0] or_ln59_3_fu_827_p2;
wire   [511:0] xor_ln59_4_fu_821_p2;
wire   [511:0] shl_ln59_10_fu_663_p2;
wire   [511:0] and_ln59_4_fu_833_p2;
wire   [511:0] shl_ln59_9_fu_635_p2;
wire   [511:0] or_ln59_4_fu_845_p2;
wire   [511:0] xor_ln59_5_fu_839_p2;
wire   [511:0] shl_ln59_12_fu_701_p2;
wire   [511:0] and_ln59_5_fu_851_p2;
wire   [511:0] shl_ln59_11_fu_673_p2;
wire   [511:0] or_ln59_5_fu_863_p2;
wire   [511:0] xor_ln59_6_fu_857_p2;
wire   [511:0] shl_ln59_14_fu_739_p2;
wire   [511:0] and_ln59_6_fu_869_p2;
wire   [511:0] shl_ln59_13_fu_711_p2;
wire   [511:0] or_ln59_6_fu_881_p2;
wire   [511:0] xor_ln59_7_fu_875_p2;
wire   [511:0] and_ln59_7_fu_887_p2;
wire   [511:0] shl_ln59_15_fu_749_p2;
wire   [0:0] icmp_ln256_fu_920_p2;
wire   [0:0] and_ln256_fu_926_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_620;
reg    ap_condition_623;
wire    ap_ce_reg;
// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 cnt_fu_118 = 32'd0;
#0 i_resp_fu_122 = 32'd0;
#0 i_req_fu_126 = 32'd0;
#0 ap_done_reg = 1'b0;
end
read_Y_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);
always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end
always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end
always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end
always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            cnt_fu_118 <= 32'd0;
        end else if (((icmp_ln236_fu_281_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            cnt_fu_118 <= ap_phi_mux_cnt_2_phi_fu_204_p4;
        end
    end
end
always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            i_req_fu_126 <= 32'd0;
        end else if ((1'b1 == ap_condition_620)) begin
            i_req_fu_126 <= i_req_2_fu_319_p2;
        end
    end
end
always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            i_resp_fu_122 <= 32'd0;
        end else if ((1'b1 == ap_condition_623)) begin
            i_resp_fu_122 <= i_resp_2_fu_949_p2;
        end
    end
end
always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        mul_cast_cast_reg_1014 <= mul_cast_cast_fu_218_p1;
        sext_ln229_cast_reg_1019 <= sext_ln229_cast_fu_222_p1;
    end
end
always @ (*) begin
    if (((1'd1 == and_ln243_fu_291_p2) & (icmp_ln236_fu_281_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == Y_read_addr_s_full_n) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Y_read_addr_s_write = 1'b1;
    end else begin
        Y_read_addr_s_write = 1'b0;
    end
end
always @ (*) begin
    if (((1'd1 == and_ln248_fu_353_p2) & (icmp_ln236_fu_281_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == Y_read_data_s_empty_n) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Y_read_data_s_read = 1'b1;
    end else begin
        Y_read_data_s_read = 1'b0;
    end
end
always @ (*) begin
    if (((icmp_ln236_fu_281_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end
always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end
always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end
always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end
always @ (*) begin
    if ((icmp_ln236_fu_281_p2 == 1'd1)) begin
        if ((1'd0 == and_ln248_fu_353_p2)) begin
            ap_phi_mux_cnt_1_phi_fu_195_p4 = cnt_fu_118;
        end else if ((1'd1 == and_ln248_fu_353_p2)) begin
            ap_phi_mux_cnt_1_phi_fu_195_p4 = cnt_5_fu_899_p2;
        end else begin
            ap_phi_mux_cnt_1_phi_fu_195_p4 = ap_phi_reg_pp0_iter1_cnt_1_reg_192;
        end
    end else begin
        ap_phi_mux_cnt_1_phi_fu_195_p4 = ap_phi_reg_pp0_iter1_cnt_1_reg_192;
    end
end
always @ (*) begin
    if ((icmp_ln236_fu_281_p2 == 1'd1)) begin
        if ((1'd0 == and_ln256_fu_926_p2)) begin
            ap_phi_mux_cnt_2_phi_fu_204_p4 = ap_phi_mux_cnt_1_phi_fu_195_p4;
        end else if ((1'd1 == and_ln256_fu_926_p2)) begin
            ap_phi_mux_cnt_2_phi_fu_204_p4 = 32'd0;
        end else begin
            ap_phi_mux_cnt_2_phi_fu_204_p4 = ap_phi_reg_pp0_iter1_cnt_2_reg_201;
        end
    end else begin
        ap_phi_mux_cnt_2_phi_fu_204_p4 = ap_phi_reg_pp0_iter1_cnt_2_reg_201;
    end
end
always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end
always @ (*) begin
    if (((1'd1 == and_ln248_fu_353_p2) & (icmp_ln236_fu_281_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_tmp_1_out_load_1 = or_ln59_7_fu_893_p2;
    end else begin
        ap_sig_allocacmp_tmp_1_out_load_1 = tmp_1_out_i;
    end
end
always @ (*) begin
    if (((1'd1 == and_ln256_fu_926_p2) & (fifo_Y_full_n == 1'b1) & (icmp_ln236_fu_281_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        fifo_Y_write = 1'b1;
    end else begin
        fifo_Y_write = 1'b0;
    end
end
always @ (*) begin
    if (((1'd1 == and_ln248_fu_353_p2) & (icmp_ln236_fu_281_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_1_out_o = or_ln59_7_fu_893_p2;
    end else begin
        tmp_1_out_o = tmp_1_out_i;
    end
end
always @ (*) begin
    if (((1'd1 == and_ln248_fu_353_p2) & (icmp_ln236_fu_281_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_1_out_o_ap_vld = 1'b1;
    end else begin
        tmp_1_out_o_ap_vld = 1'b0;
    end
end
always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end
assign Y_read_addr_s_din = ($signed(Y_read_addr_offset_load) + $signed(sext_ln25_fu_305_p1));
assign and_ln243_fu_291_p1 = Y_read_addr_s_full_n;
assign and_ln243_fu_291_p2 = (icmp_ln243_fu_286_p2 & and_ln243_fu_291_p1);
assign and_ln248_fu_353_p2 = (tmp_3_nbreadreq_fu_163_p3 & icmp_ln248_fu_347_p2);
assign and_ln256_fu_926_p1 = fifo_Y_full_n;
assign and_ln256_fu_926_p2 = (icmp_ln256_fu_920_p2 & and_ln256_fu_926_p1);
assign and_ln59_1_fu_779_p2 = (xor_ln59_1_fu_767_p2 & or_ln59_fu_773_p2);
assign and_ln59_2_fu_797_p2 = (xor_ln59_2_fu_785_p2 & or_ln59_1_fu_791_p2);
assign and_ln59_3_fu_815_p2 = (xor_ln59_3_fu_803_p2 & or_ln59_2_fu_809_p2);
assign and_ln59_4_fu_833_p2 = (xor_ln59_4_fu_821_p2 & or_ln59_3_fu_827_p2);
assign and_ln59_5_fu_851_p2 = (xor_ln59_5_fu_839_p2 & or_ln59_4_fu_845_p2);
assign and_ln59_6_fu_869_p2 = (xor_ln59_6_fu_857_p2 & or_ln59_5_fu_863_p2);
assign and_ln59_7_fu_887_p2 = (xor_ln59_7_fu_875_p2 & or_ln59_6_fu_881_p2);
assign and_ln59_fu_761_p2 = (xor_ln59_fu_755_p2 & tmp_1_out_i);
assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];
assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);
assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);
assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);
assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);
always @ (*) begin
    ap_condition_620 = ((1'd1 == and_ln243_fu_291_p2) & (icmp_ln236_fu_281_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1));
end
always @ (*) begin
    ap_condition_623 = ((1'd1 == and_ln256_fu_926_p2) & (icmp_ln236_fu_281_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1));
end
assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);
assign ap_enable_reg_pp0_iter0 = ap_start_int;
assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;
assign ap_phi_reg_pp0_iter1_cnt_1_reg_192 = 'bx;
assign ap_phi_reg_pp0_iter1_cnt_2_reg_201 = 'bx;
assign cnt_5_fu_899_p2 = (cnt_fu_118 + 32'd1);
assign elem_val_1_fu_377_p4 = {{Y_read_data_s_dout[63:32]}};
assign elem_val_fu_373_p1 = Y_read_data_s_dout[31:0];
assign empty_15_fu_447_p1 = cnt_fu_118[28:0];
assign empty_16_fu_451_p2 = cnt_fu_118 << 32'd3;
assign fifo_Y_din = ap_sig_allocacmp_tmp_1_out_load_1;
assign i_req_2_fu_319_p2 = (i_req_fu_126 + 32'd1);
assign i_resp_2_fu_949_p2 = (i_resp_fu_122 + 32'd1);
assign icmp_ln236_fu_281_p2 = (($signed(i_resp_fu_122) < $signed(sext_ln229_cast_reg_1019)) ? 1'b1 : 1'b0);
assign icmp_ln243_fu_286_p2 = (($signed(i_req_fu_126) < $signed(mul_cast_cast_reg_1014)) ? 1'b1 : 1'b0);
assign icmp_ln248_fu_347_p2 = (($signed(tmp_1_fu_337_p4) < $signed(31'd1)) ? 1'b1 : 1'b0);
assign icmp_ln256_fu_920_p2 = ((ap_phi_mux_cnt_1_phi_fu_195_p4 == 32'd2) ? 1'b1 : 1'b0);
assign lshr_ln78_1_fu_397_p4 = {{Y_read_data_s_dout[127:96]}};
assign lshr_ln78_2_fu_407_p4 = {{Y_read_data_s_dout[159:128]}};
assign lshr_ln78_3_fu_417_p4 = {{Y_read_data_s_dout[191:160]}};
assign lshr_ln78_4_fu_427_p4 = {{Y_read_data_s_dout[223:192]}};
assign lshr_ln78_5_fu_437_p4 = {{Y_read_data_s_dout[255:224]}};
assign lshr_ln_fu_387_p4 = {{Y_read_data_s_dout[95:64]}};
assign mul_cast_cast_fu_218_p1 = $signed(mul_cast);
assign or_ln252_1_fu_527_p2 = (empty_16_fu_451_p2 | 32'd2);
assign or_ln252_2_fu_565_p2 = (empty_16_fu_451_p2 | 32'd3);
assign or_ln252_3_fu_603_p2 = (empty_16_fu_451_p2 | 32'd4);
assign or_ln252_4_fu_641_p2 = (empty_16_fu_451_p2 | 32'd5);
assign or_ln252_5_fu_679_p2 = (empty_16_fu_451_p2 | 32'd6);
assign or_ln252_6_fu_717_p2 = (empty_16_fu_451_p2 | 32'd7);
assign or_ln252_fu_489_p2 = (empty_16_fu_451_p2 | 32'd1);
assign or_ln59_1_fu_791_p2 = (shl_ln59_3_fu_521_p2 | and_ln59_1_fu_779_p2);
assign or_ln59_2_fu_809_p2 = (shl_ln59_5_fu_559_p2 | and_ln59_2_fu_797_p2);
assign or_ln59_3_fu_827_p2 = (shl_ln59_7_fu_597_p2 | and_ln59_3_fu_815_p2);
assign or_ln59_4_fu_845_p2 = (shl_ln59_9_fu_635_p2 | and_ln59_4_fu_833_p2);
assign or_ln59_5_fu_863_p2 = (shl_ln59_11_fu_673_p2 | and_ln59_5_fu_851_p2);
assign or_ln59_6_fu_881_p2 = (shl_ln59_13_fu_711_p2 | and_ln59_6_fu_869_p2);
assign or_ln59_7_fu_893_p2 = (shl_ln59_15_fu_749_p2 | and_ln59_7_fu_887_p2);
assign or_ln59_fu_773_p2 = (shl_ln59_1_fu_483_p2 | and_ln59_fu_761_p2);
assign sext_ln229_cast_fu_222_p1 = $signed(sext_ln229);
assign sext_ln25_fu_305_p1 = $signed(shl_ln_fu_297_p3);
assign sext_ln59_1_fu_503_p1 = $signed(shl_ln54_1_fu_495_p3);
assign sext_ln59_2_fu_541_p1 = $signed(shl_ln54_2_fu_533_p3);
assign sext_ln59_3_fu_579_p1 = $signed(shl_ln54_3_fu_571_p3);
assign sext_ln59_4_fu_617_p1 = $signed(shl_ln54_4_fu_609_p3);
assign sext_ln59_5_fu_655_p1 = $signed(shl_ln54_5_fu_647_p3);
assign sext_ln59_6_fu_693_p1 = $signed(shl_ln54_6_fu_685_p3);
assign sext_ln59_7_fu_731_p1 = $signed(shl_ln54_7_fu_723_p3);
assign sext_ln59_fu_465_p1 = $signed(shl_ln1_fu_457_p3);
assign shl_ln1_fu_457_p3 = {{empty_15_fu_447_p1}, {8'd0}};
assign shl_ln54_1_fu_495_p3 = {{or_ln252_fu_489_p2}, {5'd0}};
assign shl_ln54_2_fu_533_p3 = {{or_ln252_1_fu_527_p2}, {5'd0}};
assign shl_ln54_3_fu_571_p3 = {{or_ln252_2_fu_565_p2}, {5'd0}};
assign shl_ln54_4_fu_609_p3 = {{or_ln252_3_fu_603_p2}, {5'd0}};
assign shl_ln54_5_fu_647_p3 = {{or_ln252_4_fu_641_p2}, {5'd0}};
assign shl_ln54_6_fu_685_p3 = {{or_ln252_5_fu_679_p2}, {5'd0}};
assign shl_ln54_7_fu_723_p3 = {{or_ln252_6_fu_717_p2}, {5'd0}};
assign shl_ln59_10_fu_663_p2 = 512'd4294967295 << zext_ln59_10_fu_659_p1;
assign shl_ln59_11_fu_673_p2 = zext_ln59_11_fu_669_p1 << zext_ln59_10_fu_659_p1;
assign shl_ln59_12_fu_701_p2 = 512'd4294967295 << zext_ln59_12_fu_697_p1;
assign shl_ln59_13_fu_711_p2 = zext_ln59_13_fu_707_p1 << zext_ln59_12_fu_697_p1;
assign shl_ln59_14_fu_739_p2 = 512'd4294967295 << zext_ln59_14_fu_735_p1;
assign shl_ln59_15_fu_749_p2 = zext_ln59_15_fu_745_p1 << zext_ln59_14_fu_735_p1;
assign shl_ln59_1_fu_483_p2 = zext_ln59_1_fu_479_p1 << zext_ln59_fu_469_p1;
assign shl_ln59_2_fu_511_p2 = 512'd4294967295 << zext_ln59_2_fu_507_p1;
assign shl_ln59_3_fu_521_p2 = zext_ln59_3_fu_517_p1 << zext_ln59_2_fu_507_p1;
assign shl_ln59_4_fu_549_p2 = 512'd4294967295 << zext_ln59_4_fu_545_p1;
assign shl_ln59_5_fu_559_p2 = zext_ln59_5_fu_555_p1 << zext_ln59_4_fu_545_p1;
assign shl_ln59_6_fu_587_p2 = 512'd4294967295 << zext_ln59_6_fu_583_p1;
assign shl_ln59_7_fu_597_p2 = zext_ln59_7_fu_593_p1 << zext_ln59_6_fu_583_p1;
assign shl_ln59_8_fu_625_p2 = 512'd4294967295 << zext_ln59_8_fu_621_p1;
assign shl_ln59_9_fu_635_p2 = zext_ln59_9_fu_631_p1 << zext_ln59_8_fu_621_p1;
assign shl_ln59_fu_473_p2 = 512'd4294967295 << zext_ln59_fu_469_p1;
assign shl_ln_fu_297_p3 = {{i_req_fu_126}, {5'd0}};
assign tmp_1_fu_337_p4 = {{cnt_fu_118[31:1]}};
assign tmp_3_nbreadreq_fu_163_p3 = Y_read_data_s_empty_n;
assign xor_ln59_1_fu_767_p2 = (shl_ln59_2_fu_511_p2 ^ 512'd13407807929942597099574024998205846127479365820592393377723561443721764030073546976801874298166903427690031858186486050853753882811946569946433649006084095);
assign xor_ln59_2_fu_785_p2 = (shl_ln59_4_fu_549_p2 ^ 512'd13407807929942597099574024998205846127479365820592393377723561443721764030073546976801874298166903427690031858186486050853753882811946569946433649006084095);
assign xor_ln59_3_fu_803_p2 = (shl_ln59_6_fu_587_p2 ^ 512'd13407807929942597099574024998205846127479365820592393377723561443721764030073546976801874298166903427690031858186486050853753882811946569946433649006084095);
assign xor_ln59_4_fu_821_p2 = (shl_ln59_8_fu_625_p2 ^ 512'd13407807929942597099574024998205846127479365820592393377723561443721764030073546976801874298166903427690031858186486050853753882811946569946433649006084095);
assign xor_ln59_5_fu_839_p2 = (shl_ln59_10_fu_663_p2 ^ 512'd13407807929942597099574024998205846127479365820592393377723561443721764030073546976801874298166903427690031858186486050853753882811946569946433649006084095);
assign xor_ln59_6_fu_857_p2 = (shl_ln59_12_fu_701_p2 ^ 512'd13407807929942597099574024998205846127479365820592393377723561443721764030073546976801874298166903427690031858186486050853753882811946569946433649006084095);
assign xor_ln59_7_fu_875_p2 = (shl_ln59_14_fu_739_p2 ^ 512'd13407807929942597099574024998205846127479365820592393377723561443721764030073546976801874298166903427690031858186486050853753882811946569946433649006084095);
assign xor_ln59_fu_755_p2 = (shl_ln59_fu_473_p2 ^ 512'd13407807929942597099574024998205846127479365820592393377723561443721764030073546976801874298166903427690031858186486050853753882811946569946433649006084095);
assign zext_ln59_10_fu_659_p1 = $unsigned(sext_ln59_5_fu_655_p1);
assign zext_ln59_11_fu_669_p1 = lshr_ln78_3_fu_417_p4;
assign zext_ln59_12_fu_697_p1 = $unsigned(sext_ln59_6_fu_693_p1);
assign zext_ln59_13_fu_707_p1 = lshr_ln78_4_fu_427_p4;
assign zext_ln59_14_fu_735_p1 = $unsigned(sext_ln59_7_fu_731_p1);
assign zext_ln59_15_fu_745_p1 = lshr_ln78_5_fu_437_p4;
assign zext_ln59_1_fu_479_p1 = elem_val_fu_373_p1;
assign zext_ln59_2_fu_507_p1 = $unsigned(sext_ln59_1_fu_503_p1);
assign zext_ln59_3_fu_517_p1 = elem_val_1_fu_377_p4;
assign zext_ln59_4_fu_545_p1 = $unsigned(sext_ln59_2_fu_541_p1);
assign zext_ln59_5_fu_555_p1 = lshr_ln_fu_387_p4;
assign zext_ln59_6_fu_583_p1 = $unsigned(sext_ln59_3_fu_579_p1);
assign zext_ln59_7_fu_593_p1 = lshr_ln78_1_fu_397_p4;
assign zext_ln59_8_fu_621_p1 = $unsigned(sext_ln59_4_fu_617_p1);
assign zext_ln59_9_fu_631_p1 = lshr_ln78_2_fu_407_p4;
assign zext_ln59_fu_469_p1 = $unsigned(sext_ln59_fu_465_p1);
endmodule