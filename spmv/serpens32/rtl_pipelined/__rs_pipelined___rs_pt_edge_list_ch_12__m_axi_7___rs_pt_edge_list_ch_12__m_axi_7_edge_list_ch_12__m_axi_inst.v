// ==================================================
// RTL generated by RapidStream
//
// Copyright 2024 RapidStream Design Automation, Inc.
// All Rights Reserved.
// ==================================================
`timescale 1 ns / 1 ps
/**   Generated by RapidStream   **/
module __rs_pipelined___rs_pt_edge_list_ch_12__m_axi_7___rs_pt_edge_list_ch_12__m_axi_7_edge_list_ch_12__m_axi_inst #(
    parameter BufferSize         = 32,
    parameter BufferSizeLog      = 5,
    parameter AddrWidth          = 64,
    parameter AxiSideAddrWidth   = 64,
    parameter DataWidth          = 512,
    parameter DataWidthBytesLog  = 6,
    parameter WaitTimeWidth      = 4,
    parameter BurstLenWidth      = 8,
    parameter EnableReadChannel  = 1,
    parameter EnableWriteChannel = 1,
    parameter MaxWaitTime        = 3,
    parameter MaxBurstLen        = 15
) (
    input wire  [(DataWidth - 1):0] __rs_pt_read_data_dout,
    input wire                      __rs_pt_read_data_empty_n,
    output wire                     __rs_pt_read_data_read,
    input wire                      clk,
    output wire [(DataWidth - 1):0] read_data_dout,
    output wire                     read_data_empty_n,
    input wire                      read_data_read,
    input wire                      rst
);

wire [(DataWidth - 1):0] __rs_pipelined___rs_pt_read_data_dout;
wire                     __rs_pipelined___rs_pt_read_data_empty_n;
wire                     __rs_pipelined___rs_pt_read_data_read;
wire                     __rs_pipelined_rst;



__rs_pt_edge_list_ch_12__m_axi_7 #(
    .AddrWidth         (AddrWidth),
    .BurstLenWidth     (BurstLenWidth),
    .DataWidth         (DataWidth),
    .DataWidthBytesLog (DataWidthBytesLog),
    .MaxBurstLen       (MaxBurstLen),
    .MaxWaitTime       (MaxWaitTime),
    .WaitTimeWidth     (WaitTimeWidth)
) _ /**   Generated by RapidStream   **/ (
    .__rs_pt_read_data_dout    (__rs_pipelined___rs_pt_read_data_dout),
    .__rs_pt_read_data_empty_n (__rs_pipelined___rs_pt_read_data_empty_n),
    .__rs_pt_read_data_read    (__rs_pipelined___rs_pt_read_data_read),
    .clk                       (clk),
    .read_data_dout            (read_data_dout),
    .read_data_empty_n         (read_data_empty_n),
    .read_data_read            (read_data_read),
    .rst                       (__rs_pipelined_rst)
);

(* RS_ROUTE="SLOT_X0Y1_TO_SLOT_X0Y1,SLOT_X1Y1_TO_SLOT_X1Y1,SLOT_X1Y0_TO_SLOT_X1Y0,SLOT_X0Y0_TO_SLOT_X0Y0" *)
__rs_ff_pipeline_6 #(
    .BODY_LEVEL      (6),
    .DATA_WIDTH      (1),
    .HEAD_LEVEL      (1),
    .TAIL_LEVEL      (1),
    .__BODY_0_REGION ("SLOT_X0Y1_TO_SLOT_X0Y1"),
    .__BODY_1_REGION ("SLOT_X1Y1_TO_SLOT_X1Y1"),
    .__BODY_2_REGION ("SLOT_X1Y1_TO_SLOT_X1Y1"),
    .__BODY_3_REGION ("SLOT_X1Y0_TO_SLOT_X1Y0"),
    .__BODY_4_REGION ("SLOT_X1Y0_TO_SLOT_X1Y0"),
    .__BODY_5_REGION ("SLOT_X0Y0_TO_SLOT_X0Y0"),
    .__HEAD_REGION   ("SLOT_X0Y1_TO_SLOT_X0Y1"),
    .__TAIL_REGION   ("SLOT_X0Y0_TO_SLOT_X0Y0")
) ff_1 /**   Generated by RapidStream   **/ (
    .clk     (clk),
    .if_din  ({ rst }),
    .if_dout ({ __rs_pipelined_rst })
);

(* RS_ROUTE="SLOT_X0Y1_TO_SLOT_X0Y1,SLOT_X1Y1_TO_SLOT_X1Y1,SLOT_X1Y0_TO_SLOT_X1Y0,SLOT_X0Y0_TO_SLOT_X0Y0" *)
__rs_hs_pipeline_6 #(
    .BODY_LEVEL                      (6),
    .DATA_WIDTH                      (( ( ( ( DataWidth - 1 ) - ( 0 ) + 1 ) ) + 0 )),
    .DEPTH                           (8),
    .EXTRA_PIPELINE_BEFORE_TAIL      (0),
    .PIPELINE_READY_IN_HEAD          (1),
    .PIPELINE_VALID_AND_DATA_IN_HEAD (1),
    .__BODY_0_REGION                 ("SLOT_X0Y1_TO_SLOT_X0Y1"),
    .__BODY_1_REGION                 ("SLOT_X1Y1_TO_SLOT_X1Y1"),
    .__BODY_2_REGION                 ("SLOT_X1Y1_TO_SLOT_X1Y1"),
    .__BODY_3_REGION                 ("SLOT_X1Y0_TO_SLOT_X1Y0"),
    .__BODY_4_REGION                 ("SLOT_X1Y0_TO_SLOT_X1Y0"),
    .__BODY_5_REGION                 ("SLOT_X0Y0_TO_SLOT_X0Y0"),
    .__HEAD_REGION                   ("SLOT_X0Y1_TO_SLOT_X0Y1"),
    .__TAIL_REGION                   ("SLOT_X0Y0_TO_SLOT_X0Y0")
) hs_0 /**   Generated by RapidStream   **/ (
    .clk        (clk),
    .if_din     ({ __rs_pt_read_data_dout }),
    .if_dout    ({ __rs_pipelined___rs_pt_read_data_dout }),
    .if_empty_n (__rs_pipelined___rs_pt_read_data_empty_n),
    .if_full_n  (__rs_pt_read_data_read),
    .if_read    (__rs_pipelined___rs_pt_read_data_read),
    .if_write   (__rs_pt_read_data_empty_n),
    .reset      (1'b0)
);

endmodule  // __rs_pipelined___rs_pt_edge_list_ch_12__m_axi_7___rs_pt_edge_list_ch_12__m_axi_7_edge_list_ch_12__m_axi_inst