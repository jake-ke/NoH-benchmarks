// ==============================================================
// Generated by Vitis HLS v2023.2.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module read_edge_list_ptr_read_edge_list_ptr_Pipeline_rd_ptr (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        num_ite_plus1,
        PE_inst_din,
        PE_inst_full_n,
        PE_inst_write,
        edge_list_ptr_read_data_s_dout,
        edge_list_ptr_read_data_s_empty_n,
        edge_list_ptr_read_data_s_read,
        edge_list_ptr_read_addr_s_din,
        edge_list_ptr_read_addr_s_full_n,
        edge_list_ptr_read_addr_s_write,
        edge_list_ptr_read_addr_offset_load
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] num_ite_plus1;
output  [32:0] PE_inst_din;
input   PE_inst_full_n;
output   PE_inst_write;
input  [32:0] edge_list_ptr_read_data_s_dout;
input   edge_list_ptr_read_data_s_empty_n;
output   edge_list_ptr_read_data_s_read;
output  [63:0] edge_list_ptr_read_addr_s_din;
input   edge_list_ptr_read_addr_s_full_n;
output   edge_list_ptr_read_addr_s_write;
input  [63:0] edge_list_ptr_read_addr_offset_load;

reg ap_idle;
reg PE_inst_write;
reg edge_list_ptr_read_data_s_read;
reg edge_list_ptr_read_addr_s_write;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln180_fu_160_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
reg   [31:0] i_resp_fu_56;
wire   [31:0] i_resp_2_fu_241_p2;
wire   [0:0] and_ln60_fu_216_p2;
wire    ap_loop_init;
wire    ap_block_pp0_stage0;
reg   [31:0] i_req_fu_60;
wire   [31:0] i_req_2_fu_198_p2;
wire   [0:0] and_ln55_fu_170_p2;
wire    ap_block_pp0_stage0_01001;
wire   [0:0] tmp_2_nbreadreq_fu_99_p3;
wire   [0:0] icmp_ln55_fu_165_p2;
wire   [0:0] and_ln55_fu_170_p1;
wire   [33:0] shl_ln_fu_176_p3;
wire  signed [63:0] sext_ln25_fu_184_p1;
wire   [0:0] and_ln60_fu_216_p0;
wire   [31:0] trunc_ln78_fu_228_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_195;
reg    ap_condition_198;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 i_resp_fu_56 = 32'd0;
#0 i_req_fu_60 = 32'd0;
#0 ap_done_reg = 1'b0;
end

read_edge_list_ptr_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            i_req_fu_60 <= 32'd0;
        end else if ((1'b1 == ap_condition_195)) begin
            i_req_fu_60 <= i_req_2_fu_198_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            i_resp_fu_56 <= 32'd0;
        end else if ((1'b1 == ap_condition_198)) begin
            i_resp_fu_56 <= i_resp_2_fu_241_p2;
        end
    end
end

always @ (*) begin
    if (((1'd1 == and_ln60_fu_216_p2) & (icmp_ln180_fu_160_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == PE_inst_full_n) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        PE_inst_write = 1'b1;
    end else begin
        PE_inst_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln180_fu_160_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln55_fu_170_p2) & (edge_list_ptr_read_addr_s_full_n == 1'b1) & (icmp_ln180_fu_160_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        edge_list_ptr_read_addr_s_write = 1'b1;
    end else begin
        edge_list_ptr_read_addr_s_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln60_fu_216_p2) & (edge_list_ptr_read_data_s_empty_n == 1'b1) & (icmp_ln180_fu_160_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        edge_list_ptr_read_data_s_read = 1'b1;
    end else begin
        edge_list_ptr_read_data_s_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign PE_inst_din = trunc_ln78_fu_228_p1;

assign and_ln55_fu_170_p1 = edge_list_ptr_read_addr_s_full_n;

assign and_ln55_fu_170_p2 = (icmp_ln55_fu_165_p2 & and_ln55_fu_170_p1);

assign and_ln60_fu_216_p0 = PE_inst_full_n;

assign and_ln60_fu_216_p2 = (tmp_2_nbreadreq_fu_99_p3 & and_ln60_fu_216_p0);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_195 = ((1'd1 == and_ln55_fu_170_p2) & (icmp_ln180_fu_160_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_condition_198 = ((1'd1 == and_ln60_fu_216_p2) & (icmp_ln180_fu_160_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign edge_list_ptr_read_addr_s_din = ($signed(edge_list_ptr_read_addr_offset_load) + $signed(sext_ln25_fu_184_p1));

assign i_req_2_fu_198_p2 = (i_req_fu_60 + 32'd1);

assign i_resp_2_fu_241_p2 = (i_resp_fu_56 + 32'd1);

assign icmp_ln180_fu_160_p2 = (($signed(i_resp_fu_56) < $signed(num_ite_plus1)) ? 1'b1 : 1'b0);

assign icmp_ln55_fu_165_p2 = (($signed(i_req_fu_60) < $signed(num_ite_plus1)) ? 1'b1 : 1'b0);

assign sext_ln25_fu_184_p1 = $signed(shl_ln_fu_176_p3);

assign shl_ln_fu_176_p3 = {{i_req_fu_60}, {2'd0}};

assign tmp_2_nbreadreq_fu_99_p3 = edge_list_ptr_read_data_s_empty_n;

assign trunc_ln78_fu_228_p1 = edge_list_ptr_read_data_s_dout[31:0];

endmodule //read_edge_list_ptr_read_edge_list_ptr_Pipeline_rd_ptr
