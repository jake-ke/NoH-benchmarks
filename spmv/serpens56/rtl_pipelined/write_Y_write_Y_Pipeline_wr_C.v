`timescale 1 ns / 1 ps
// ==============================================================
// Generated by Vitis HLS v2023.2.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
 
module write_Y_write_Y_Pipeline_wr_C (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        wrote_half,
        sext_ln246,
        Y_out_write_resp_s_dout,
        Y_out_write_resp_s_empty_n,
        Y_out_write_resp_s_read,
        Y_out_write_addr_din,
        Y_out_write_addr_full_n,
        Y_out_write_addr_write,
        Y_out_write_data_din,
        Y_out_write_data_full_n,
        Y_out_write_data_write,
        fifo_Y_s_dout,
        fifo_Y_s_empty_n,
        fifo_Y_s_read,
        p_out_i,
        p_out_o,
        p_out_o_ap_vld,
        p_out1_i,
        p_out1_o,
        p_out1_o_ap_vld,
        p_out2_i,
        p_out2_o,
        p_out2_o_ap_vld,
        p_out3_i,
        p_out3_o,
        p_out3_o_ap_vld,
        p_out4_i,
        p_out4_o,
        p_out4_o_ap_vld,
        p_out5_i,
        p_out5_o,
        p_out5_o_ap_vld,
        p_out6_i,
        p_out6_o,
        p_out6_o_ap_vld,
        p_out7_i,
        p_out7_o,
        p_out7_o_ap_vld,
        wrote_half_1_out,
        wrote_half_1_out_ap_vld
);
parameter    ap_ST_fsm_pp0_stage0 = 2'd1;
parameter    ap_ST_fsm_pp0_stage1 = 2'd2;
input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [0:0] wrote_half;
input  [28:0] sext_ln246;
input  [8:0] Y_out_write_resp_s_dout;
input   Y_out_write_resp_s_empty_n;
output   Y_out_write_resp_s_read;
output  [64:0] Y_out_write_addr_din;
input   Y_out_write_addr_full_n;
output   Y_out_write_addr_write;
output  [256:0] Y_out_write_data_din;
input   Y_out_write_data_full_n;
output   Y_out_write_data_write;
input  [512:0] fifo_Y_s_dout;
input   fifo_Y_s_empty_n;
output   fifo_Y_s_read;
input  [31:0] p_out_i;
output  [31:0] p_out_o;
output   p_out_o_ap_vld;
input  [31:0] p_out1_i;
output  [31:0] p_out1_o;
output   p_out1_o_ap_vld;
input  [31:0] p_out2_i;
output  [31:0] p_out2_o;
output   p_out2_o_ap_vld;
input  [31:0] p_out3_i;
output  [31:0] p_out3_o;
output   p_out3_o_ap_vld;
input  [31:0] p_out4_i;
output  [31:0] p_out4_o;
output   p_out4_o_ap_vld;
input  [31:0] p_out5_i;
output  [31:0] p_out5_o;
output   p_out5_o_ap_vld;
input  [31:0] p_out6_i;
output  [31:0] p_out6_o;
output   p_out6_o_ap_vld;
input  [31:0] p_out7_i;
output  [31:0] p_out7_o;
output   p_out7_o_ap_vld;
output  [0:0] wrote_half_1_out;
output   wrote_half_1_out_ap_vld;
reg ap_idle;
reg Y_out_write_resp_s_read;
reg[64:0] Y_out_write_addr_din;
reg Y_out_write_addr_write;
reg[256:0] Y_out_write_data_din;
reg Y_out_write_data_write;
reg fifo_Y_s_read;
reg[31:0] p_out_o;
reg p_out_o_ap_vld;
reg[31:0] p_out1_o;
reg p_out1_o_ap_vld;
reg[31:0] p_out2_o;
reg p_out2_o_ap_vld;
reg[31:0] p_out3_o;
reg p_out3_o_ap_vld;
reg[31:0] p_out4_o;
reg p_out4_o_ap_vld;
reg[31:0] p_out5_o;
reg p_out5_o_ap_vld;
reg[31:0] p_out6_o;
reg p_out6_o_ap_vld;
reg[31:0] p_out7_o;
reg p_out7_o_ap_vld;
reg wrote_half_1_out_ap_vld;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1_subdone;
reg   [0:0] icmp_ln250_reg_769;
reg    ap_condition_exit_pp0_iter0_stage1;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg   [0:0] wrote_half_1_reg_195;
wire    ap_block_pp0_stage0_11001;
wire  signed [31:0] sext_ln246_cast_fu_286_p1;
reg  signed [31:0] sext_ln246_cast_reg_757;
reg   [31:0] i_resp_3_reg_763;
wire   [0:0] icmp_ln250_fu_320_p2;
wire   [0:0] tmp_nbreadreq_fu_138_p3;
reg   [0:0] tmp_reg_773;
wire   [0:0] Y_out_write_resp_s_read_nbread_fu_146_p2_0;
reg   [0:0] Y_out_write_resp_s_read_reg_778_0;
reg   [8:0] Y_out_write_resp_s_read_reg_778_1;
wire    ap_block_pp0_stage1_11001;
wire   [0:0] and_ln256_3_fu_362_p2;
wire   [31:0] i_req_6_fu_478_p2;
reg    ap_enable_reg_pp0_iter0_reg;
wire    ap_block_pp0_stage0_subdone;
wire    ap_loop_init;
reg   [0:0] ap_phi_mux_wrote_half_3_phi_fu_231_p4;
wire   [0:0] ap_phi_reg_pp0_iter0_wrote_half_2_reg_206;
reg   [0:0] ap_phi_reg_pp0_iter1_wrote_half_2_reg_206;
wire  signed [31:0] ap_phi_reg_pp0_iter0_i_req_1_reg_218;
reg  signed [31:0] ap_phi_reg_pp0_iter1_i_req_1_reg_218;
wire   [0:0] ap_phi_reg_pp0_iter1_wrote_half_3_reg_227;
wire   [0:0] and_ln270_2_fu_629_p2;
reg   [31:0] ap_phi_mux_i_req_2_phi_fu_243_p4;
wire   [31:0] i_req_7_fu_709_p2;
wire   [31:0] ap_phi_reg_pp0_iter1_i_req_2_reg_240;
wire    ap_block_pp0_stage1;
wire    ap_block_pp0_stage0;
reg   [31:0] i_resp_fu_118;
wire   [31:0] i_resp_5_fu_593_p3;
reg   [31:0] ap_sig_allocacmp_i_resp_3;
reg   [31:0] i_req_fu_122;
wire   [64:0] zext_ln146_fu_372_p1;
wire    ap_block_pp0_stage1_01001;
wire   [64:0] zext_ln146_2_fu_671_p1;
wire    ap_block_pp0_stage0_01001;
wire   [256:0] zext_ln146_1_fu_469_p1;
wire   [256:0] zext_ln146_3_fu_700_p1;
wire  signed [31:0] icmp_ln253_fu_334_p0;
wire   [0:0] and_ln256_fu_345_p0;
wire   [0:0] and_ln256_fu_345_p1;
wire   [0:0] and_ln256_fu_345_p2;
wire   [0:0] xor_ln256_fu_339_p2;
wire   [0:0] icmp_ln253_fu_334_p2;
wire   [0:0] and_ln256_1_fu_357_p2;
wire   [0:0] and_ln256_2_fu_351_p2;
wire  signed [31:0] sext_ln146_fu_368_p0;
wire  signed [63:0] sext_ln146_fu_368_p1;
wire   [255:0] trunc_ln146_fu_465_p1;
wire  signed [31:0] i_req_6_fu_478_p0;
wire   [7:0] elem_val_fu_570_p1;
wire   [8:0] zext_ln279_fu_574_p1;
wire   [8:0] add_ln279_fu_578_p2;
wire   [31:0] zext_ln279_1_fu_584_p1;
wire   [31:0] i_resp_4_fu_588_p2;
wire   [0:0] and_ln270_fu_617_p1;
wire   [0:0] icmp_ln268_fu_612_p2;
wire   [0:0] and_ln270_1_fu_623_p1;
wire   [0:0] and_ln270_1_fu_623_p2;
wire   [0:0] and_ln270_fu_617_p2;
wire  signed [63:0] sext_ln146_1_fu_667_p1;
wire   [255:0] or_ln146_7_fu_680_p9;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [1:0] ap_NS_fsm;
reg    ap_idle_pp0_1to1;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_475;
reg    ap_condition_479;
reg    ap_condition_156;
reg    ap_condition_487;
wire    ap_ce_reg;
// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 i_resp_fu_118 = 32'd0;
#0 i_req_fu_122 = 32'd0;
#0 ap_done_reg = 1'b0;
end
write_Y_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage1),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);
always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end
always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end
always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end
always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_exit_pp0_iter0_stage1) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end
always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_156)) begin
        if (((1'd0 == and_ln256_3_fu_362_p2) & (icmp_ln250_reg_769 == 1'd1))) begin
            ap_phi_reg_pp0_iter1_i_req_1_reg_218 <= i_req_fu_122;
        end else if (((icmp_ln250_reg_769 == 1'd1) & (1'd1 == and_ln256_3_fu_362_p2))) begin
            ap_phi_reg_pp0_iter1_i_req_1_reg_218 <= i_req_6_fu_478_p2;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter1_i_req_1_reg_218 <= ap_phi_reg_pp0_iter0_i_req_1_reg_218;
        end
    end
end
always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_156)) begin
        if (((1'd0 == and_ln256_3_fu_362_p2) & (icmp_ln250_reg_769 == 1'd1))) begin
            ap_phi_reg_pp0_iter1_wrote_half_2_reg_206 <= wrote_half_1_reg_195;
        end else if (((icmp_ln250_reg_769 == 1'd1) & (1'd1 == and_ln256_3_fu_362_p2))) begin
            ap_phi_reg_pp0_iter1_wrote_half_2_reg_206 <= 1'd1;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter1_wrote_half_2_reg_206 <= ap_phi_reg_pp0_iter0_wrote_half_2_reg_206;
        end
    end
end
always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            i_req_fu_122 <= 32'd0;
        end else if (((icmp_ln250_reg_769 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            i_req_fu_122 <= ap_phi_mux_i_req_2_phi_fu_243_p4;
        end
    end
end
always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        i_resp_fu_118 <= 32'd0;
    end else if (((icmp_ln250_reg_769 == 1'd1) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        i_resp_fu_118 <= i_resp_5_fu_593_p3;
    end
end
always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        if ((1'b1 == ap_condition_487)) begin
            wrote_half_1_reg_195 <= ap_phi_mux_wrote_half_3_phi_fu_231_p4;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_init == 1'b1))) begin
            wrote_half_1_reg_195 <= wrote_half;
        end
    end
end
always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Y_out_write_resp_s_read_reg_778_0 <= Y_out_write_resp_s_read_nbread_fu_146_p2_0;
        Y_out_write_resp_s_read_reg_778_1 <= Y_out_write_resp_s_dout;
        i_resp_3_reg_763 <= ap_sig_allocacmp_i_resp_3;
        icmp_ln250_reg_769 <= icmp_ln250_fu_320_p2;
        sext_ln246_cast_reg_757 <= sext_ln246_cast_fu_286_p1;
        tmp_reg_773 <= tmp_nbreadreq_fu_138_p3;
    end
end
always @ (*) begin
    if ((icmp_ln250_reg_769 == 1'd1)) begin
        if ((1'b1 == ap_condition_479)) begin
            Y_out_write_addr_din = zext_ln146_2_fu_671_p1;
        end else if ((1'b1 == ap_condition_475)) begin
            Y_out_write_addr_din = zext_ln146_fu_372_p1;
        end else begin
            Y_out_write_addr_din = 'bx;
        end
    end else begin
        Y_out_write_addr_din = 'bx;
    end
end
always @ (*) begin
    if (((1'b1 == Y_out_write_addr_full_n) & (((icmp_ln250_reg_769 == 1'd1) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == Y_out_write_addr_full_n) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'd1 == and_ln256_3_fu_362_p2)) | ((icmp_ln250_reg_769 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'd1 == and_ln270_2_fu_629_p2))))) begin
        Y_out_write_addr_write = 1'b1;
    end else begin
        Y_out_write_addr_write = 1'b0;
    end
end
always @ (*) begin
    if ((icmp_ln250_reg_769 == 1'd1)) begin
        if ((1'b1 == ap_condition_479)) begin
            Y_out_write_data_din = zext_ln146_3_fu_700_p1;
        end else if ((1'b1 == ap_condition_475)) begin
            Y_out_write_data_din = zext_ln146_1_fu_469_p1;
        end else begin
            Y_out_write_data_din = 'bx;
        end
    end else begin
        Y_out_write_data_din = 'bx;
    end
end
always @ (*) begin
    if (((1'b1 == Y_out_write_data_full_n) & (((icmp_ln250_reg_769 == 1'd1) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == Y_out_write_data_full_n) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'd1 == and_ln256_3_fu_362_p2)) | ((icmp_ln250_reg_769 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'd1 == and_ln270_2_fu_629_p2))))) begin
        Y_out_write_data_write = 1'b1;
    end else begin
        Y_out_write_data_write = 1'b0;
    end
end
always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == Y_out_write_resp_s_empty_n) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln250_fu_320_p2 == 1'd1))) begin
        Y_out_write_resp_s_read = 1'b1;
    end else begin
        Y_out_write_resp_s_read = 1'b0;
    end
end
always @ (*) begin
    if (((icmp_ln250_reg_769 == 1'd0) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b0;
    end
end
always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end
always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end
always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end
always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end
always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end
always @ (*) begin
    if ((icmp_ln250_reg_769 == 1'd1)) begin
        if ((1'd0 == and_ln270_2_fu_629_p2)) begin
            ap_phi_mux_i_req_2_phi_fu_243_p4 = ap_phi_reg_pp0_iter1_i_req_1_reg_218;
        end else if ((1'd1 == and_ln270_2_fu_629_p2)) begin
            ap_phi_mux_i_req_2_phi_fu_243_p4 = i_req_7_fu_709_p2;
        end else begin
            ap_phi_mux_i_req_2_phi_fu_243_p4 = ap_phi_reg_pp0_iter1_i_req_2_reg_240;
        end
    end else begin
        ap_phi_mux_i_req_2_phi_fu_243_p4 = ap_phi_reg_pp0_iter1_i_req_2_reg_240;
    end
end
always @ (*) begin
    if ((icmp_ln250_reg_769 == 1'd1)) begin
        if ((1'd0 == and_ln270_2_fu_629_p2)) begin
            ap_phi_mux_wrote_half_3_phi_fu_231_p4 = ap_phi_reg_pp0_iter1_wrote_half_2_reg_206;
        end else if ((1'd1 == and_ln270_2_fu_629_p2)) begin
            ap_phi_mux_wrote_half_3_phi_fu_231_p4 = 1'd0;
        end else begin
            ap_phi_mux_wrote_half_3_phi_fu_231_p4 = ap_phi_reg_pp0_iter1_wrote_half_3_reg_227;
        end
    end else begin
        ap_phi_mux_wrote_half_3_phi_fu_231_p4 = ap_phi_reg_pp0_iter1_wrote_half_3_reg_227;
    end
end
always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end
always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_resp_3 = 32'd0;
    end else begin
        ap_sig_allocacmp_i_resp_3 = i_resp_fu_118;
    end
end
always @ (*) begin
    if (((fifo_Y_s_empty_n == 1'b1) & (icmp_ln250_reg_769 == 1'd1) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'd1 == and_ln256_3_fu_362_p2))) begin
        fifo_Y_s_read = 1'b1;
    end else begin
        fifo_Y_s_read = 1'b0;
    end
end
always @ (*) begin
    if (((icmp_ln250_reg_769 == 1'd1) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'd1 == and_ln256_3_fu_362_p2))) begin
        p_out1_o = {{fifo_Y_s_dout[479:448]}};
    end else begin
        p_out1_o = p_out1_i;
    end
end
always @ (*) begin
    if (((icmp_ln250_reg_769 == 1'd1) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'd1 == and_ln256_3_fu_362_p2))) begin
        p_out1_o_ap_vld = 1'b1;
    end else begin
        p_out1_o_ap_vld = 1'b0;
    end
end
always @ (*) begin
    if (((icmp_ln250_reg_769 == 1'd1) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'd1 == and_ln256_3_fu_362_p2))) begin
        p_out2_o = {{fifo_Y_s_dout[447:416]}};
    end else begin
        p_out2_o = p_out2_i;
    end
end
always @ (*) begin
    if (((icmp_ln250_reg_769 == 1'd1) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'd1 == and_ln256_3_fu_362_p2))) begin
        p_out2_o_ap_vld = 1'b1;
    end else begin
        p_out2_o_ap_vld = 1'b0;
    end
end
always @ (*) begin
    if (((icmp_ln250_reg_769 == 1'd1) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'd1 == and_ln256_3_fu_362_p2))) begin
        p_out3_o = {{fifo_Y_s_dout[415:384]}};
    end else begin
        p_out3_o = p_out3_i;
    end
end
always @ (*) begin
    if (((icmp_ln250_reg_769 == 1'd1) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'd1 == and_ln256_3_fu_362_p2))) begin
        p_out3_o_ap_vld = 1'b1;
    end else begin
        p_out3_o_ap_vld = 1'b0;
    end
end
always @ (*) begin
    if (((icmp_ln250_reg_769 == 1'd1) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'd1 == and_ln256_3_fu_362_p2))) begin
        p_out4_o = {{fifo_Y_s_dout[383:352]}};
    end else begin
        p_out4_o = p_out4_i;
    end
end
always @ (*) begin
    if (((icmp_ln250_reg_769 == 1'd1) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'd1 == and_ln256_3_fu_362_p2))) begin
        p_out4_o_ap_vld = 1'b1;
    end else begin
        p_out4_o_ap_vld = 1'b0;
    end
end
always @ (*) begin
    if (((icmp_ln250_reg_769 == 1'd1) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'd1 == and_ln256_3_fu_362_p2))) begin
        p_out5_o = {{fifo_Y_s_dout[351:320]}};
    end else begin
        p_out5_o = p_out5_i;
    end
end
always @ (*) begin
    if (((icmp_ln250_reg_769 == 1'd1) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'd1 == and_ln256_3_fu_362_p2))) begin
        p_out5_o_ap_vld = 1'b1;
    end else begin
        p_out5_o_ap_vld = 1'b0;
    end
end
always @ (*) begin
    if (((icmp_ln250_reg_769 == 1'd1) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'd1 == and_ln256_3_fu_362_p2))) begin
        p_out6_o = {{fifo_Y_s_dout[319:288]}};
    end else begin
        p_out6_o = p_out6_i;
    end
end
always @ (*) begin
    if (((icmp_ln250_reg_769 == 1'd1) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'd1 == and_ln256_3_fu_362_p2))) begin
        p_out6_o_ap_vld = 1'b1;
    end else begin
        p_out6_o_ap_vld = 1'b0;
    end
end
always @ (*) begin
    if (((icmp_ln250_reg_769 == 1'd1) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'd1 == and_ln256_3_fu_362_p2))) begin
        p_out7_o = {{fifo_Y_s_dout[287:256]}};
    end else begin
        p_out7_o = p_out7_i;
    end
end
always @ (*) begin
    if (((icmp_ln250_reg_769 == 1'd1) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'd1 == and_ln256_3_fu_362_p2))) begin
        p_out7_o_ap_vld = 1'b1;
    end else begin
        p_out7_o_ap_vld = 1'b0;
    end
end
always @ (*) begin
    if (((icmp_ln250_reg_769 == 1'd1) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'd1 == and_ln256_3_fu_362_p2))) begin
        p_out_o = {{fifo_Y_s_dout[511:480]}};
    end else begin
        p_out_o = p_out_i;
    end
end
always @ (*) begin
    if (((icmp_ln250_reg_769 == 1'd1) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'd1 == and_ln256_3_fu_362_p2))) begin
        p_out_o_ap_vld = 1'b1;
    end else begin
        p_out_o_ap_vld = 1'b0;
    end
end
always @ (*) begin
    if (((icmp_ln250_reg_769 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        wrote_half_1_out_ap_vld = 1'b1;
    end else begin
        wrote_half_1_out_ap_vld = 1'b0;
    end
end
always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end
assign Y_out_write_resp_s_read_nbread_fu_146_p2_0 = Y_out_write_resp_s_empty_n;
assign add_ln279_fu_578_p2 = (zext_ln279_fu_574_p1 + 9'd1);
assign and_ln256_1_fu_357_p2 = (tmp_reg_773 & icmp_ln253_fu_334_p2);
assign and_ln256_2_fu_351_p2 = (xor_ln256_fu_339_p2 & and_ln256_fu_345_p2);
assign and_ln256_3_fu_362_p2 = (and_ln256_2_fu_351_p2 & and_ln256_1_fu_357_p2);
assign and_ln256_fu_345_p0 = Y_out_write_addr_full_n;
assign and_ln256_fu_345_p1 = Y_out_write_data_full_n;
assign and_ln256_fu_345_p2 = (and_ln256_fu_345_p1 & and_ln256_fu_345_p0);
assign and_ln270_1_fu_623_p1 = Y_out_write_data_full_n;
assign and_ln270_1_fu_623_p2 = (icmp_ln268_fu_612_p2 & and_ln270_1_fu_623_p1);
assign and_ln270_2_fu_629_p2 = (and_ln270_fu_617_p2 & and_ln270_1_fu_623_p2);
assign and_ln270_fu_617_p1 = Y_out_write_addr_full_n;
assign and_ln270_fu_617_p2 = (ap_phi_reg_pp0_iter1_wrote_half_2_reg_206 & and_ln270_fu_617_p1);
assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];
assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];
assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);
assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);
assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);
assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);
assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);
assign ap_block_pp0_stage1_01001 = ~(1'b1 == 1'b1);
assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);
assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);
always @ (*) begin
    ap_condition_156 = ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1));
end
always @ (*) begin
    ap_condition_475 = ((1'b0 == ap_block_pp0_stage1_01001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'd1 == and_ln256_3_fu_362_p2));
end
always @ (*) begin
    ap_condition_479 = ((1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'd1 == and_ln270_2_fu_629_p2));
end
always @ (*) begin
    ap_condition_487 = ((icmp_ln250_reg_769 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1));
end
assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);
assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage1;
assign ap_phi_reg_pp0_iter0_i_req_1_reg_218 = 'bx;
assign ap_phi_reg_pp0_iter0_wrote_half_2_reg_206 = 'bx;
assign ap_phi_reg_pp0_iter1_i_req_2_reg_240 = 'bx;
assign ap_phi_reg_pp0_iter1_wrote_half_3_reg_227 = 'bx;
assign elem_val_fu_570_p1 = Y_out_write_resp_s_read_reg_778_1[7:0];
assign i_req_6_fu_478_p0 = i_req_fu_122;
assign i_req_6_fu_478_p2 = ($signed(i_req_6_fu_478_p0) + $signed(32'd1));
assign i_req_7_fu_709_p2 = ($signed(ap_phi_reg_pp0_iter1_i_req_1_reg_218) + $signed(32'd1));
assign i_resp_4_fu_588_p2 = (zext_ln279_1_fu_584_p1 + i_resp_3_reg_763);
assign i_resp_5_fu_593_p3 = ((Y_out_write_resp_s_read_reg_778_0[0:0] == 1'b1) ? i_resp_4_fu_588_p2 : i_resp_3_reg_763);
assign icmp_ln250_fu_320_p2 = (($signed(ap_sig_allocacmp_i_resp_3) < $signed(sext_ln246_cast_fu_286_p1)) ? 1'b1 : 1'b0);
assign icmp_ln253_fu_334_p0 = i_req_fu_122;
assign icmp_ln253_fu_334_p2 = (($signed(icmp_ln253_fu_334_p0) < $signed(sext_ln246_cast_reg_757)) ? 1'b1 : 1'b0);
assign icmp_ln268_fu_612_p2 = (($signed(ap_phi_reg_pp0_iter1_i_req_1_reg_218) < $signed(sext_ln246_cast_reg_757)) ? 1'b1 : 1'b0);
assign or_ln146_7_fu_680_p9 = {{{{{{{{p_out_i}, {p_out1_i}}, {p_out2_i}}, {p_out3_i}}, {p_out4_i}}, {p_out5_i}}, {p_out6_i}}, {p_out7_i}};
assign sext_ln146_1_fu_667_p1 = ap_phi_reg_pp0_iter1_i_req_1_reg_218;
assign sext_ln146_fu_368_p0 = i_req_fu_122;
assign sext_ln146_fu_368_p1 = sext_ln146_fu_368_p0;
assign sext_ln246_cast_fu_286_p1 = $signed(sext_ln246);
assign tmp_nbreadreq_fu_138_p3 = fifo_Y_s_empty_n;
assign trunc_ln146_fu_465_p1 = fifo_Y_s_dout[255:0];
assign wrote_half_1_out = wrote_half_1_reg_195;
assign xor_ln256_fu_339_p2 = (wrote_half_1_reg_195 ^ 1'd1);
assign zext_ln146_1_fu_469_p1 = trunc_ln146_fu_465_p1;
assign zext_ln146_2_fu_671_p1 = $unsigned(sext_ln146_1_fu_667_p1);
assign zext_ln146_3_fu_700_p1 = or_ln146_7_fu_680_p9;
assign zext_ln146_fu_372_p1 = $unsigned(sext_ln146_fu_368_p1);
assign zext_ln279_1_fu_584_p1 = add_ln279_fu_578_p2;
assign zext_ln279_fu_574_p1 = elem_val_fu_570_p1;
endmodule