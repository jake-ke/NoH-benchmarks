`timescale 1 ns / 1 ps
// ==============================================================
// Generated by Vitis HLS v2023.2.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
 
module read_A_read_A_Pipeline_rd_A (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        A_len,
        fifo_A_din,
        fifo_A_full_n,
        fifo_A_write,
        A_read_data_s_dout,
        A_read_data_s_empty_n,
        A_read_data_s_read,
        empty,
        A_read_addr_din,
        A_read_addr_full_n,
        A_read_addr_write,
        tmp_1_out_i,
        tmp_1_out_o,
        tmp_1_out_o_ap_vld
);
parameter    ap_ST_fsm_pp0_stage0 = 1'd1;
input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] A_len;
output  [512:0] fifo_A_din;
input   fifo_A_full_n;
output   fifo_A_write;
input  [256:0] A_read_data_s_dout;
input   A_read_data_s_empty_n;
output   A_read_data_s_read;
input  [31:0] empty;
output  [64:0] A_read_addr_din;
input   A_read_addr_full_n;
output   A_read_addr_write;
input  [511:0] tmp_1_out_i;
output  [511:0] tmp_1_out_o;
output   tmp_1_out_o_ap_vld;
reg ap_idle;
reg fifo_A_write;
reg A_read_data_s_read;
reg A_read_addr_write;
reg[511:0] tmp_1_out_o;
reg tmp_1_out_o_ap_vld;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln184_fu_215_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
reg   [31:0] ap_phi_mux_cnt_1_phi_fu_139_p4;
wire   [31:0] cnt_5_fu_352_p2;
wire   [31:0] ap_phi_reg_pp0_iter1_cnt_1_reg_136;
wire   [0:0] and_ln196_fu_278_p2;
reg   [31:0] ap_phi_mux_cnt_2_phi_fu_148_p4;
wire   [31:0] ap_phi_reg_pp0_iter1_cnt_2_reg_145;
wire   [0:0] and_ln202_fu_379_p2;
wire   [511:0] tmp_5_fu_346_p2;
wire    ap_block_pp0_stage0;
reg   [511:0] ap_sig_allocacmp_tmp_1_out_load_1;
reg   [31:0] cnt_fu_68;
wire    ap_loop_init;
reg   [31:0] i_resp_fu_72;
wire   [31:0] i_resp_2_fu_402_p2;
reg   [31:0] i_req_fu_76;
wire   [31:0] i_req_2_fu_244_p2;
wire   [0:0] and_ln191_fu_225_p2;
wire    ap_block_pp0_stage0_01001;
wire   [0:0] tmp_4_nbreadreq_fu_107_p3;
wire  signed [31:0] icmp_ln191_fu_220_p0;
wire   [0:0] icmp_ln191_fu_220_p2;
wire   [0:0] and_ln191_fu_225_p1;
wire  signed [31:0] sext_ln146_fu_231_p0;
wire  signed [63:0] sext_ln146_fu_231_p1;
wire  signed [31:0] i_req_2_fu_244_p0;
wire   [30:0] tmp_1_fu_262_p4;
wire   [0:0] icmp_ln196_fu_272_p2;
wire   [0:0] trunc_ln199_fu_302_p1;
wire   [8:0] tmp_2_fu_306_p3;
wire   [511:0] zext_ln199_fu_314_p1;
wire   [511:0] shl_ln199_fu_318_p2;
wire   [511:0] xor_ln199_fu_324_p2;
wire   [255:0] elem_val_fu_298_p1;
wire   [511:0] zext_ln199_1_fu_336_p1;
wire   [511:0] and_ln199_fu_330_p2;
wire   [511:0] shl_ln199_1_fu_340_p2;
wire   [0:0] icmp_ln202_fu_373_p2;
wire   [0:0] and_ln202_fu_379_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_285;
reg    ap_condition_288;
wire    ap_ce_reg;
// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 cnt_fu_68 = 32'd0;
#0 i_resp_fu_72 = 32'd0;
#0 i_req_fu_76 = 32'd0;
#0 ap_done_reg = 1'b0;
end
read_A_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);
always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end
always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end
always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end
always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            cnt_fu_68 <= 32'd0;
        end else if (((icmp_ln184_fu_215_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            cnt_fu_68 <= ap_phi_mux_cnt_2_phi_fu_148_p4;
        end
    end
end
always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            i_req_fu_76 <= 32'd0;
        end else if ((1'b1 == ap_condition_285)) begin
            i_req_fu_76 <= i_req_2_fu_244_p2;
        end
    end
end
always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            i_resp_fu_72 <= 32'd0;
        end else if ((1'b1 == ap_condition_288)) begin
            i_resp_fu_72 <= i_resp_2_fu_402_p2;
        end
    end
end
always @ (*) begin
    if (((1'd1 == and_ln191_fu_225_p2) & (icmp_ln184_fu_215_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == A_read_addr_full_n) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_read_addr_write = 1'b1;
    end else begin
        A_read_addr_write = 1'b0;
    end
end
always @ (*) begin
    if (((1'd1 == and_ln196_fu_278_p2) & (icmp_ln184_fu_215_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == A_read_data_s_empty_n) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_read_data_s_read = 1'b1;
    end else begin
        A_read_data_s_read = 1'b0;
    end
end
always @ (*) begin
    if (((icmp_ln184_fu_215_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end
always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end
always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end
always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end
always @ (*) begin
    if ((icmp_ln184_fu_215_p2 == 1'd1)) begin
        if ((1'd0 == and_ln196_fu_278_p2)) begin
            ap_phi_mux_cnt_1_phi_fu_139_p4 = cnt_fu_68;
        end else if ((1'd1 == and_ln196_fu_278_p2)) begin
            ap_phi_mux_cnt_1_phi_fu_139_p4 = cnt_5_fu_352_p2;
        end else begin
            ap_phi_mux_cnt_1_phi_fu_139_p4 = ap_phi_reg_pp0_iter1_cnt_1_reg_136;
        end
    end else begin
        ap_phi_mux_cnt_1_phi_fu_139_p4 = ap_phi_reg_pp0_iter1_cnt_1_reg_136;
    end
end
always @ (*) begin
    if ((icmp_ln184_fu_215_p2 == 1'd1)) begin
        if ((1'd0 == and_ln202_fu_379_p2)) begin
            ap_phi_mux_cnt_2_phi_fu_148_p4 = ap_phi_mux_cnt_1_phi_fu_139_p4;
        end else if ((1'd1 == and_ln202_fu_379_p2)) begin
            ap_phi_mux_cnt_2_phi_fu_148_p4 = 32'd0;
        end else begin
            ap_phi_mux_cnt_2_phi_fu_148_p4 = ap_phi_reg_pp0_iter1_cnt_2_reg_145;
        end
    end else begin
        ap_phi_mux_cnt_2_phi_fu_148_p4 = ap_phi_reg_pp0_iter1_cnt_2_reg_145;
    end
end
always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end
always @ (*) begin
    if (((1'd1 == and_ln196_fu_278_p2) & (icmp_ln184_fu_215_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_tmp_1_out_load_1 = tmp_5_fu_346_p2;
    end else begin
        ap_sig_allocacmp_tmp_1_out_load_1 = tmp_1_out_i;
    end
end
always @ (*) begin
    if (((1'd1 == and_ln202_fu_379_p2) & (fifo_A_full_n == 1'b1) & (icmp_ln184_fu_215_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        fifo_A_write = 1'b1;
    end else begin
        fifo_A_write = 1'b0;
    end
end
always @ (*) begin
    if (((1'd1 == and_ln196_fu_278_p2) & (icmp_ln184_fu_215_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_1_out_o = tmp_5_fu_346_p2;
    end else begin
        tmp_1_out_o = tmp_1_out_i;
    end
end
always @ (*) begin
    if (((1'd1 == and_ln196_fu_278_p2) & (icmp_ln184_fu_215_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_1_out_o_ap_vld = 1'b1;
    end else begin
        tmp_1_out_o_ap_vld = 1'b0;
    end
end
always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end
assign A_read_addr_din = $unsigned(sext_ln146_fu_231_p1);
assign and_ln191_fu_225_p1 = A_read_addr_full_n;
assign and_ln191_fu_225_p2 = (icmp_ln191_fu_220_p2 & and_ln191_fu_225_p1);
assign and_ln196_fu_278_p2 = (tmp_4_nbreadreq_fu_107_p3 & icmp_ln196_fu_272_p2);
assign and_ln199_fu_330_p2 = (xor_ln199_fu_324_p2 & tmp_1_out_i);
assign and_ln202_fu_379_p1 = fifo_A_full_n;
assign and_ln202_fu_379_p2 = (icmp_ln202_fu_373_p2 & and_ln202_fu_379_p1);
assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];
assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);
assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);
assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);
assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);
always @ (*) begin
    ap_condition_285 = ((1'd1 == and_ln191_fu_225_p2) & (icmp_ln184_fu_215_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1));
end
always @ (*) begin
    ap_condition_288 = ((1'd1 == and_ln202_fu_379_p2) & (icmp_ln184_fu_215_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1));
end
assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);
assign ap_enable_reg_pp0_iter0 = ap_start_int;
assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;
assign ap_phi_reg_pp0_iter1_cnt_1_reg_136 = 'bx;
assign ap_phi_reg_pp0_iter1_cnt_2_reg_145 = 'bx;
assign cnt_5_fu_352_p2 = (cnt_fu_68 + 32'd1);
assign elem_val_fu_298_p1 = A_read_data_s_dout[255:0];
assign fifo_A_din = ap_sig_allocacmp_tmp_1_out_load_1;
assign i_req_2_fu_244_p0 = i_req_fu_76;
assign i_req_2_fu_244_p2 = ($signed(i_req_2_fu_244_p0) + $signed(32'd1));
assign i_resp_2_fu_402_p2 = (i_resp_fu_72 + 32'd1);
assign icmp_ln184_fu_215_p2 = (($signed(i_resp_fu_72) < $signed(A_len)) ? 1'b1 : 1'b0);
assign icmp_ln191_fu_220_p0 = i_req_fu_76;
assign icmp_ln191_fu_220_p2 = (($signed(icmp_ln191_fu_220_p0) < $signed(empty)) ? 1'b1 : 1'b0);
assign icmp_ln196_fu_272_p2 = (($signed(tmp_1_fu_262_p4) < $signed(31'd1)) ? 1'b1 : 1'b0);
assign icmp_ln202_fu_373_p2 = ((ap_phi_mux_cnt_1_phi_fu_139_p4 == 32'd2) ? 1'b1 : 1'b0);
assign sext_ln146_fu_231_p0 = i_req_fu_76;
assign sext_ln146_fu_231_p1 = sext_ln146_fu_231_p0;
assign shl_ln199_1_fu_340_p2 = zext_ln199_1_fu_336_p1 << zext_ln199_fu_314_p1;
assign shl_ln199_fu_318_p2 = 512'd115792089237316195423570985008687907853269984665640564039457584007913129639935 << zext_ln199_fu_314_p1;
assign tmp_1_fu_262_p4 = {{cnt_fu_68[31:1]}};
assign tmp_2_fu_306_p3 = {{trunc_ln199_fu_302_p1}, {8'd0}};
assign tmp_4_nbreadreq_fu_107_p3 = A_read_data_s_empty_n;
assign tmp_5_fu_346_p2 = (shl_ln199_1_fu_340_p2 | and_ln199_fu_330_p2);
assign trunc_ln199_fu_302_p1 = cnt_fu_68[0:0];
assign xor_ln199_fu_324_p2 = (shl_ln199_fu_318_p2 ^ 512'd13407807929942597099574024998205846127479365820592393377723561443721764030073546976801874298166903427690031858186486050853753882811946569946433649006084095);
assign zext_ln199_1_fu_336_p1 = elem_val_fu_298_p1;
assign zext_ln199_fu_314_p1 = tmp_2_fu_306_p3;
endmodule