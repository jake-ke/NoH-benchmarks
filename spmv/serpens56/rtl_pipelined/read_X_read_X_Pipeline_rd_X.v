`timescale 1 ns / 1 ps
// ==============================================================
// Generated by Vitis HLS v2023.2.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
 
module read_X_read_X_Pipeline_rd_X (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        sext_ln173,
        fifo_X_din,
        fifo_X_full_n,
        fifo_X_write,
        vec_X_read_data_s_dout,
        vec_X_read_data_s_empty_n,
        vec_X_read_data_s_read,
        sext_ln176,
        vec_X_read_addr_din,
        vec_X_read_addr_full_n,
        vec_X_read_addr_write,
        tmp_1_out_i,
        tmp_1_out_o,
        tmp_1_out_o_ap_vld
);
parameter    ap_ST_fsm_pp0_stage0 = 1'd1;
input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [27:0] sext_ln173;
output  [512:0] fifo_X_din;
input   fifo_X_full_n;
output   fifo_X_write;
input  [256:0] vec_X_read_data_s_dout;
input   vec_X_read_data_s_empty_n;
output   vec_X_read_data_s_read;
input  [28:0] sext_ln176;
output  [64:0] vec_X_read_addr_din;
input   vec_X_read_addr_full_n;
output   vec_X_read_addr_write;
input  [511:0] tmp_1_out_i;
output  [511:0] tmp_1_out_o;
output   tmp_1_out_o_ap_vld;
reg ap_idle;
reg fifo_X_write;
reg vec_X_read_data_s_read;
reg vec_X_read_addr_write;
reg[511:0] tmp_1_out_o;
reg tmp_1_out_o_ap_vld;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln180_fu_269_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire  signed [31:0] sext_ln176_cast_fu_206_p1;
reg  signed [31:0] sext_ln176_cast_reg_988;
wire    ap_block_pp0_stage0_11001;
wire  signed [31:0] sext_ln173_cast_fu_210_p1;
reg  signed [31:0] sext_ln173_cast_reg_993;
reg   [31:0] ap_phi_mux_cnt_1_phi_fu_185_p4;
wire   [31:0] cnt_5_fu_878_p2;
wire   [31:0] ap_phi_reg_pp0_iter1_cnt_1_reg_182;
wire   [0:0] and_ln192_fu_332_p2;
reg   [31:0] ap_phi_mux_cnt_2_phi_fu_194_p4;
wire   [31:0] ap_phi_reg_pp0_iter1_cnt_2_reg_191;
wire   [0:0] and_ln200_fu_905_p2;
wire   [511:0] or_ln59_7_fu_872_p2;
wire    ap_block_pp0_stage0;
reg   [511:0] ap_sig_allocacmp_tmp_1_out_load_1;
reg   [31:0] cnt_fu_114;
wire    ap_loop_init;
reg   [31:0] i_resp_fu_118;
wire   [31:0] i_resp_2_fu_928_p2;
reg   [31:0] i_req_fu_122;
wire   [31:0] i_req_2_fu_298_p2;
wire   [0:0] and_ln187_fu_279_p2;
wire    ap_block_pp0_stage0_01001;
wire   [0:0] tmp_3_nbreadreq_fu_153_p3;
wire  signed [31:0] icmp_ln187_fu_274_p0;
wire   [0:0] icmp_ln187_fu_274_p2;
wire   [0:0] and_ln187_fu_279_p1;
wire  signed [31:0] sext_ln146_fu_285_p0;
wire  signed [63:0] sext_ln146_fu_285_p1;
wire  signed [31:0] i_req_2_fu_298_p0;
wire   [30:0] tmp_1_fu_316_p4;
wire   [0:0] icmp_ln192_fu_326_p2;
wire   [28:0] empty_15_fu_426_p1;
wire   [36:0] shl_ln_fu_436_p3;
wire  signed [63:0] sext_ln59_fu_444_p1;
wire   [511:0] zext_ln59_fu_448_p1;
wire   [31:0] elem_val_fu_352_p1;
wire   [511:0] zext_ln59_1_fu_458_p1;
wire   [31:0] empty_16_fu_430_p2;
wire   [31:0] or_ln196_fu_468_p2;
wire   [36:0] shl_ln54_1_fu_474_p3;
wire  signed [63:0] sext_ln59_1_fu_482_p1;
wire   [511:0] zext_ln59_2_fu_486_p1;
wire   [31:0] elem_val_1_fu_356_p4;
wire   [511:0] zext_ln59_3_fu_496_p1;
wire   [31:0] or_ln196_1_fu_506_p2;
wire   [36:0] shl_ln54_2_fu_512_p3;
wire  signed [63:0] sext_ln59_2_fu_520_p1;
wire   [511:0] zext_ln59_4_fu_524_p1;
wire   [31:0] lshr_ln_fu_366_p4;
wire   [511:0] zext_ln59_5_fu_534_p1;
wire   [31:0] or_ln196_2_fu_544_p2;
wire   [36:0] shl_ln54_3_fu_550_p3;
wire  signed [63:0] sext_ln59_3_fu_558_p1;
wire   [511:0] zext_ln59_6_fu_562_p1;
wire   [31:0] lshr_ln78_1_fu_376_p4;
wire   [511:0] zext_ln59_7_fu_572_p1;
wire   [31:0] or_ln196_3_fu_582_p2;
wire   [36:0] shl_ln54_4_fu_588_p3;
wire  signed [63:0] sext_ln59_4_fu_596_p1;
wire   [511:0] zext_ln59_8_fu_600_p1;
wire   [31:0] lshr_ln78_2_fu_386_p4;
wire   [511:0] zext_ln59_9_fu_610_p1;
wire   [31:0] or_ln196_4_fu_620_p2;
wire   [36:0] shl_ln54_5_fu_626_p3;
wire  signed [63:0] sext_ln59_5_fu_634_p1;
wire   [511:0] zext_ln59_10_fu_638_p1;
wire   [31:0] lshr_ln78_3_fu_396_p4;
wire   [511:0] zext_ln59_11_fu_648_p1;
wire   [31:0] or_ln196_5_fu_658_p2;
wire   [36:0] shl_ln54_6_fu_664_p3;
wire  signed [63:0] sext_ln59_6_fu_672_p1;
wire   [511:0] zext_ln59_12_fu_676_p1;
wire   [31:0] lshr_ln78_4_fu_406_p4;
wire   [511:0] zext_ln59_13_fu_686_p1;
wire   [31:0] or_ln196_6_fu_696_p2;
wire   [36:0] shl_ln54_7_fu_702_p3;
wire  signed [63:0] sext_ln59_7_fu_710_p1;
wire   [511:0] zext_ln59_14_fu_714_p1;
wire   [31:0] lshr_ln78_5_fu_416_p4;
wire   [511:0] zext_ln59_15_fu_724_p1;
wire   [511:0] shl_ln59_fu_452_p2;
wire   [511:0] xor_ln59_fu_734_p2;
wire   [511:0] shl_ln59_2_fu_490_p2;
wire   [511:0] shl_ln59_1_fu_462_p2;
wire   [511:0] and_ln59_fu_740_p2;
wire   [511:0] or_ln59_fu_752_p2;
wire   [511:0] xor_ln59_1_fu_746_p2;
wire   [511:0] shl_ln59_4_fu_528_p2;
wire   [511:0] shl_ln59_3_fu_500_p2;
wire   [511:0] and_ln59_1_fu_758_p2;
wire   [511:0] or_ln59_1_fu_770_p2;
wire   [511:0] xor_ln59_2_fu_764_p2;
wire   [511:0] shl_ln59_6_fu_566_p2;
wire   [511:0] and_ln59_2_fu_776_p2;
wire   [511:0] shl_ln59_5_fu_538_p2;
wire   [511:0] or_ln59_2_fu_788_p2;
wire   [511:0] xor_ln59_3_fu_782_p2;
wire   [511:0] shl_ln59_8_fu_604_p2;
wire   [511:0] and_ln59_3_fu_794_p2;
wire   [511:0] shl_ln59_7_fu_576_p2;
wire   [511:0] or_ln59_3_fu_806_p2;
wire   [511:0] xor_ln59_4_fu_800_p2;
wire   [511:0] shl_ln59_10_fu_642_p2;
wire   [511:0] and_ln59_4_fu_812_p2;
wire   [511:0] shl_ln59_9_fu_614_p2;
wire   [511:0] or_ln59_4_fu_824_p2;
wire   [511:0] xor_ln59_5_fu_818_p2;
wire   [511:0] shl_ln59_12_fu_680_p2;
wire   [511:0] and_ln59_5_fu_830_p2;
wire   [511:0] shl_ln59_11_fu_652_p2;
wire   [511:0] or_ln59_5_fu_842_p2;
wire   [511:0] xor_ln59_6_fu_836_p2;
wire   [511:0] shl_ln59_14_fu_718_p2;
wire   [511:0] and_ln59_6_fu_848_p2;
wire   [511:0] shl_ln59_13_fu_690_p2;
wire   [511:0] or_ln59_6_fu_860_p2;
wire   [511:0] xor_ln59_7_fu_854_p2;
wire   [511:0] and_ln59_7_fu_866_p2;
wire   [511:0] shl_ln59_15_fu_728_p2;
wire   [0:0] icmp_ln200_fu_899_p2;
wire   [0:0] and_ln200_fu_905_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_612;
reg    ap_condition_615;
wire    ap_ce_reg;
// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 cnt_fu_114 = 32'd0;
#0 i_resp_fu_118 = 32'd0;
#0 i_req_fu_122 = 32'd0;
#0 ap_done_reg = 1'b0;
end
read_X_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);
always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end
always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end
always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end
always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            cnt_fu_114 <= 32'd0;
        end else if (((icmp_ln180_fu_269_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            cnt_fu_114 <= ap_phi_mux_cnt_2_phi_fu_194_p4;
        end
    end
end
always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            i_req_fu_122 <= 32'd0;
        end else if ((1'b1 == ap_condition_612)) begin
            i_req_fu_122 <= i_req_2_fu_298_p2;
        end
    end
end
always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            i_resp_fu_118 <= 32'd0;
        end else if ((1'b1 == ap_condition_615)) begin
            i_resp_fu_118 <= i_resp_2_fu_928_p2;
        end
    end
end
always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        sext_ln173_cast_reg_993 <= sext_ln173_cast_fu_210_p1;
        sext_ln176_cast_reg_988 <= sext_ln176_cast_fu_206_p1;
    end
end
always @ (*) begin
    if (((icmp_ln180_fu_269_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end
always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end
always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end
always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end
always @ (*) begin
    if ((icmp_ln180_fu_269_p2 == 1'd1)) begin
        if ((1'd0 == and_ln192_fu_332_p2)) begin
            ap_phi_mux_cnt_1_phi_fu_185_p4 = cnt_fu_114;
        end else if ((1'd1 == and_ln192_fu_332_p2)) begin
            ap_phi_mux_cnt_1_phi_fu_185_p4 = cnt_5_fu_878_p2;
        end else begin
            ap_phi_mux_cnt_1_phi_fu_185_p4 = ap_phi_reg_pp0_iter1_cnt_1_reg_182;
        end
    end else begin
        ap_phi_mux_cnt_1_phi_fu_185_p4 = ap_phi_reg_pp0_iter1_cnt_1_reg_182;
    end
end
always @ (*) begin
    if ((icmp_ln180_fu_269_p2 == 1'd1)) begin
        if ((1'd0 == and_ln200_fu_905_p2)) begin
            ap_phi_mux_cnt_2_phi_fu_194_p4 = ap_phi_mux_cnt_1_phi_fu_185_p4;
        end else if ((1'd1 == and_ln200_fu_905_p2)) begin
            ap_phi_mux_cnt_2_phi_fu_194_p4 = 32'd0;
        end else begin
            ap_phi_mux_cnt_2_phi_fu_194_p4 = ap_phi_reg_pp0_iter1_cnt_2_reg_191;
        end
    end else begin
        ap_phi_mux_cnt_2_phi_fu_194_p4 = ap_phi_reg_pp0_iter1_cnt_2_reg_191;
    end
end
always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end
always @ (*) begin
    if (((1'd1 == and_ln192_fu_332_p2) & (icmp_ln180_fu_269_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_tmp_1_out_load_1 = or_ln59_7_fu_872_p2;
    end else begin
        ap_sig_allocacmp_tmp_1_out_load_1 = tmp_1_out_i;
    end
end
always @ (*) begin
    if (((1'd1 == and_ln200_fu_905_p2) & (fifo_X_full_n == 1'b1) & (icmp_ln180_fu_269_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        fifo_X_write = 1'b1;
    end else begin
        fifo_X_write = 1'b0;
    end
end
always @ (*) begin
    if (((1'd1 == and_ln192_fu_332_p2) & (icmp_ln180_fu_269_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_1_out_o = or_ln59_7_fu_872_p2;
    end else begin
        tmp_1_out_o = tmp_1_out_i;
    end
end
always @ (*) begin
    if (((1'd1 == and_ln192_fu_332_p2) & (icmp_ln180_fu_269_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_1_out_o_ap_vld = 1'b1;
    end else begin
        tmp_1_out_o_ap_vld = 1'b0;
    end
end
always @ (*) begin
    if (((1'd1 == and_ln187_fu_279_p2) & (vec_X_read_addr_full_n == 1'b1) & (icmp_ln180_fu_269_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        vec_X_read_addr_write = 1'b1;
    end else begin
        vec_X_read_addr_write = 1'b0;
    end
end
always @ (*) begin
    if (((1'd1 == and_ln192_fu_332_p2) & (vec_X_read_data_s_empty_n == 1'b1) & (icmp_ln180_fu_269_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        vec_X_read_data_s_read = 1'b1;
    end else begin
        vec_X_read_data_s_read = 1'b0;
    end
end
always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end
assign and_ln187_fu_279_p1 = vec_X_read_addr_full_n;
assign and_ln187_fu_279_p2 = (icmp_ln187_fu_274_p2 & and_ln187_fu_279_p1);
assign and_ln192_fu_332_p2 = (tmp_3_nbreadreq_fu_153_p3 & icmp_ln192_fu_326_p2);
assign and_ln200_fu_905_p1 = fifo_X_full_n;
assign and_ln200_fu_905_p2 = (icmp_ln200_fu_899_p2 & and_ln200_fu_905_p1);
assign and_ln59_1_fu_758_p2 = (xor_ln59_1_fu_746_p2 & or_ln59_fu_752_p2);
assign and_ln59_2_fu_776_p2 = (xor_ln59_2_fu_764_p2 & or_ln59_1_fu_770_p2);
assign and_ln59_3_fu_794_p2 = (xor_ln59_3_fu_782_p2 & or_ln59_2_fu_788_p2);
assign and_ln59_4_fu_812_p2 = (xor_ln59_4_fu_800_p2 & or_ln59_3_fu_806_p2);
assign and_ln59_5_fu_830_p2 = (xor_ln59_5_fu_818_p2 & or_ln59_4_fu_824_p2);
assign and_ln59_6_fu_848_p2 = (xor_ln59_6_fu_836_p2 & or_ln59_5_fu_842_p2);
assign and_ln59_7_fu_866_p2 = (xor_ln59_7_fu_854_p2 & or_ln59_6_fu_860_p2);
assign and_ln59_fu_740_p2 = (xor_ln59_fu_734_p2 & tmp_1_out_i);
assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];
assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);
assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);
assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);
assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);
always @ (*) begin
    ap_condition_612 = ((1'd1 == and_ln187_fu_279_p2) & (icmp_ln180_fu_269_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1));
end
always @ (*) begin
    ap_condition_615 = ((1'd1 == and_ln200_fu_905_p2) & (icmp_ln180_fu_269_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1));
end
assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);
assign ap_enable_reg_pp0_iter0 = ap_start_int;
assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;
assign ap_phi_reg_pp0_iter1_cnt_1_reg_182 = 'bx;
assign ap_phi_reg_pp0_iter1_cnt_2_reg_191 = 'bx;
assign cnt_5_fu_878_p2 = (cnt_fu_114 + 32'd1);
assign elem_val_1_fu_356_p4 = {{vec_X_read_data_s_dout[63:32]}};
assign elem_val_fu_352_p1 = vec_X_read_data_s_dout[31:0];
assign empty_15_fu_426_p1 = cnt_fu_114[28:0];
assign empty_16_fu_430_p2 = cnt_fu_114 << 32'd3;
assign fifo_X_din = ap_sig_allocacmp_tmp_1_out_load_1;
assign i_req_2_fu_298_p0 = i_req_fu_122;
assign i_req_2_fu_298_p2 = ($signed(i_req_2_fu_298_p0) + $signed(32'd1));
assign i_resp_2_fu_928_p2 = (i_resp_fu_118 + 32'd1);
assign icmp_ln180_fu_269_p2 = (($signed(i_resp_fu_118) < $signed(sext_ln173_cast_reg_993)) ? 1'b1 : 1'b0);
assign icmp_ln187_fu_274_p0 = i_req_fu_122;
assign icmp_ln187_fu_274_p2 = (($signed(icmp_ln187_fu_274_p0) < $signed(sext_ln176_cast_reg_988)) ? 1'b1 : 1'b0);
assign icmp_ln192_fu_326_p2 = (($signed(tmp_1_fu_316_p4) < $signed(31'd1)) ? 1'b1 : 1'b0);
assign icmp_ln200_fu_899_p2 = ((ap_phi_mux_cnt_1_phi_fu_185_p4 == 32'd2) ? 1'b1 : 1'b0);
assign lshr_ln78_1_fu_376_p4 = {{vec_X_read_data_s_dout[127:96]}};
assign lshr_ln78_2_fu_386_p4 = {{vec_X_read_data_s_dout[159:128]}};
assign lshr_ln78_3_fu_396_p4 = {{vec_X_read_data_s_dout[191:160]}};
assign lshr_ln78_4_fu_406_p4 = {{vec_X_read_data_s_dout[223:192]}};
assign lshr_ln78_5_fu_416_p4 = {{vec_X_read_data_s_dout[255:224]}};
assign lshr_ln_fu_366_p4 = {{vec_X_read_data_s_dout[95:64]}};
assign or_ln196_1_fu_506_p2 = (empty_16_fu_430_p2 | 32'd2);
assign or_ln196_2_fu_544_p2 = (empty_16_fu_430_p2 | 32'd3);
assign or_ln196_3_fu_582_p2 = (empty_16_fu_430_p2 | 32'd4);
assign or_ln196_4_fu_620_p2 = (empty_16_fu_430_p2 | 32'd5);
assign or_ln196_5_fu_658_p2 = (empty_16_fu_430_p2 | 32'd6);
assign or_ln196_6_fu_696_p2 = (empty_16_fu_430_p2 | 32'd7);
assign or_ln196_fu_468_p2 = (empty_16_fu_430_p2 | 32'd1);
assign or_ln59_1_fu_770_p2 = (shl_ln59_3_fu_500_p2 | and_ln59_1_fu_758_p2);
assign or_ln59_2_fu_788_p2 = (shl_ln59_5_fu_538_p2 | and_ln59_2_fu_776_p2);
assign or_ln59_3_fu_806_p2 = (shl_ln59_7_fu_576_p2 | and_ln59_3_fu_794_p2);
assign or_ln59_4_fu_824_p2 = (shl_ln59_9_fu_614_p2 | and_ln59_4_fu_812_p2);
assign or_ln59_5_fu_842_p2 = (shl_ln59_11_fu_652_p2 | and_ln59_5_fu_830_p2);
assign or_ln59_6_fu_860_p2 = (shl_ln59_13_fu_690_p2 | and_ln59_6_fu_848_p2);
assign or_ln59_7_fu_872_p2 = (shl_ln59_15_fu_728_p2 | and_ln59_7_fu_866_p2);
assign or_ln59_fu_752_p2 = (shl_ln59_1_fu_462_p2 | and_ln59_fu_740_p2);
assign sext_ln146_fu_285_p0 = i_req_fu_122;
assign sext_ln146_fu_285_p1 = sext_ln146_fu_285_p0;
assign sext_ln173_cast_fu_210_p1 = $signed(sext_ln173);
assign sext_ln176_cast_fu_206_p1 = $signed(sext_ln176);
assign sext_ln59_1_fu_482_p1 = $signed(shl_ln54_1_fu_474_p3);
assign sext_ln59_2_fu_520_p1 = $signed(shl_ln54_2_fu_512_p3);
assign sext_ln59_3_fu_558_p1 = $signed(shl_ln54_3_fu_550_p3);
assign sext_ln59_4_fu_596_p1 = $signed(shl_ln54_4_fu_588_p3);
assign sext_ln59_5_fu_634_p1 = $signed(shl_ln54_5_fu_626_p3);
assign sext_ln59_6_fu_672_p1 = $signed(shl_ln54_6_fu_664_p3);
assign sext_ln59_7_fu_710_p1 = $signed(shl_ln54_7_fu_702_p3);
assign sext_ln59_fu_444_p1 = $signed(shl_ln_fu_436_p3);
assign shl_ln54_1_fu_474_p3 = {{or_ln196_fu_468_p2}, {5'd0}};
assign shl_ln54_2_fu_512_p3 = {{or_ln196_1_fu_506_p2}, {5'd0}};
assign shl_ln54_3_fu_550_p3 = {{or_ln196_2_fu_544_p2}, {5'd0}};
assign shl_ln54_4_fu_588_p3 = {{or_ln196_3_fu_582_p2}, {5'd0}};
assign shl_ln54_5_fu_626_p3 = {{or_ln196_4_fu_620_p2}, {5'd0}};
assign shl_ln54_6_fu_664_p3 = {{or_ln196_5_fu_658_p2}, {5'd0}};
assign shl_ln54_7_fu_702_p3 = {{or_ln196_6_fu_696_p2}, {5'd0}};
assign shl_ln59_10_fu_642_p2 = 512'd4294967295 << zext_ln59_10_fu_638_p1;
assign shl_ln59_11_fu_652_p2 = zext_ln59_11_fu_648_p1 << zext_ln59_10_fu_638_p1;
assign shl_ln59_12_fu_680_p2 = 512'd4294967295 << zext_ln59_12_fu_676_p1;
assign shl_ln59_13_fu_690_p2 = zext_ln59_13_fu_686_p1 << zext_ln59_12_fu_676_p1;
assign shl_ln59_14_fu_718_p2 = 512'd4294967295 << zext_ln59_14_fu_714_p1;
assign shl_ln59_15_fu_728_p2 = zext_ln59_15_fu_724_p1 << zext_ln59_14_fu_714_p1;
assign shl_ln59_1_fu_462_p2 = zext_ln59_1_fu_458_p1 << zext_ln59_fu_448_p1;
assign shl_ln59_2_fu_490_p2 = 512'd4294967295 << zext_ln59_2_fu_486_p1;
assign shl_ln59_3_fu_500_p2 = zext_ln59_3_fu_496_p1 << zext_ln59_2_fu_486_p1;
assign shl_ln59_4_fu_528_p2 = 512'd4294967295 << zext_ln59_4_fu_524_p1;
assign shl_ln59_5_fu_538_p2 = zext_ln59_5_fu_534_p1 << zext_ln59_4_fu_524_p1;
assign shl_ln59_6_fu_566_p2 = 512'd4294967295 << zext_ln59_6_fu_562_p1;
assign shl_ln59_7_fu_576_p2 = zext_ln59_7_fu_572_p1 << zext_ln59_6_fu_562_p1;
assign shl_ln59_8_fu_604_p2 = 512'd4294967295 << zext_ln59_8_fu_600_p1;
assign shl_ln59_9_fu_614_p2 = zext_ln59_9_fu_610_p1 << zext_ln59_8_fu_600_p1;
assign shl_ln59_fu_452_p2 = 512'd4294967295 << zext_ln59_fu_448_p1;
assign shl_ln_fu_436_p3 = {{empty_15_fu_426_p1}, {8'd0}};
assign tmp_1_fu_316_p4 = {{cnt_fu_114[31:1]}};
assign tmp_3_nbreadreq_fu_153_p3 = vec_X_read_data_s_empty_n;
assign vec_X_read_addr_din = $unsigned(sext_ln146_fu_285_p1);
assign xor_ln59_1_fu_746_p2 = (shl_ln59_2_fu_490_p2 ^ 512'd13407807929942597099574024998205846127479365820592393377723561443721764030073546976801874298166903427690031858186486050853753882811946569946433649006084095);
assign xor_ln59_2_fu_764_p2 = (shl_ln59_4_fu_528_p2 ^ 512'd13407807929942597099574024998205846127479365820592393377723561443721764030073546976801874298166903427690031858186486050853753882811946569946433649006084095);
assign xor_ln59_3_fu_782_p2 = (shl_ln59_6_fu_566_p2 ^ 512'd13407807929942597099574024998205846127479365820592393377723561443721764030073546976801874298166903427690031858186486050853753882811946569946433649006084095);
assign xor_ln59_4_fu_800_p2 = (shl_ln59_8_fu_604_p2 ^ 512'd13407807929942597099574024998205846127479365820592393377723561443721764030073546976801874298166903427690031858186486050853753882811946569946433649006084095);
assign xor_ln59_5_fu_818_p2 = (shl_ln59_10_fu_642_p2 ^ 512'd13407807929942597099574024998205846127479365820592393377723561443721764030073546976801874298166903427690031858186486050853753882811946569946433649006084095);
assign xor_ln59_6_fu_836_p2 = (shl_ln59_12_fu_680_p2 ^ 512'd13407807929942597099574024998205846127479365820592393377723561443721764030073546976801874298166903427690031858186486050853753882811946569946433649006084095);
assign xor_ln59_7_fu_854_p2 = (shl_ln59_14_fu_718_p2 ^ 512'd13407807929942597099574024998205846127479365820592393377723561443721764030073546976801874298166903427690031858186486050853753882811946569946433649006084095);
assign xor_ln59_fu_734_p2 = (shl_ln59_fu_452_p2 ^ 512'd13407807929942597099574024998205846127479365820592393377723561443721764030073546976801874298166903427690031858186486050853753882811946569946433649006084095);
assign zext_ln59_10_fu_638_p1 = $unsigned(sext_ln59_5_fu_634_p1);
assign zext_ln59_11_fu_648_p1 = lshr_ln78_3_fu_396_p4;
assign zext_ln59_12_fu_676_p1 = $unsigned(sext_ln59_6_fu_672_p1);
assign zext_ln59_13_fu_686_p1 = lshr_ln78_4_fu_406_p4;
assign zext_ln59_14_fu_714_p1 = $unsigned(sext_ln59_7_fu_710_p1);
assign zext_ln59_15_fu_724_p1 = lshr_ln78_5_fu_416_p4;
assign zext_ln59_1_fu_458_p1 = elem_val_fu_352_p1;
assign zext_ln59_2_fu_486_p1 = $unsigned(sext_ln59_1_fu_482_p1);
assign zext_ln59_3_fu_496_p1 = elem_val_1_fu_356_p4;
assign zext_ln59_4_fu_524_p1 = $unsigned(sext_ln59_2_fu_520_p1);
assign zext_ln59_5_fu_534_p1 = lshr_ln_fu_366_p4;
assign zext_ln59_6_fu_562_p1 = $unsigned(sext_ln59_3_fu_558_p1);
assign zext_ln59_7_fu_572_p1 = lshr_ln78_1_fu_376_p4;
assign zext_ln59_8_fu_600_p1 = $unsigned(sext_ln59_4_fu_596_p1);
assign zext_ln59_9_fu_610_p1 = lshr_ln78_2_fu_386_p4;
assign zext_ln59_fu_448_p1 = $unsigned(sext_ln59_fu_444_p1);
endmodule