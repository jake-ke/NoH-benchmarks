// ==============================================================
// Generated by Vitis HLS v2023.2.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module krnl_output_dist_id_krnl_output_dist_id_Pipeline_VITIS_LOOP_831_3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        output_knnId_write_resp_s_dout,
        output_knnId_write_resp_s_empty_n,
        output_knnId_write_resp_s_read,
        output_knnDist_write_resp_s_dout,
        output_knnDist_write_resp_s_empty_n,
        output_knnDist_write_resp_s_read,
        output_knnDist_write_addr_s_din,
        output_knnDist_write_addr_s_full_n,
        output_knnDist_write_addr_s_write,
        output_knnDist_write_data_din,
        output_knnDist_write_data_full_n,
        output_knnDist_write_data_write,
        output_knnDist_write_addr_offset_load,
        mux_case_018_reload,
        mux_case_122_reload,
        mux_case_226_reload,
        mux_case_330_reload,
        mux_case_434_reload,
        mux_case_538_reload,
        mux_case_642_reload,
        mux_case_746_reload,
        mux_case_850_reload,
        mux_case_954_reload,
        output_knnId_write_addr_s_din,
        output_knnId_write_addr_s_full_n,
        output_knnId_write_addr_s_write,
        output_knnId_write_data_din,
        output_knnId_write_data_full_n,
        output_knnId_write_data_write,
        output_knnId_write_addr_offset_load,
        output_id_reload,
        output_id_1_reload,
        output_id_2_reload,
        output_id_3_reload,
        output_id_4_reload,
        output_id_5_reload,
        output_id_6_reload,
        output_id_7_reload,
        output_id_8_reload,
        output_id_9_reload
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [8:0] output_knnId_write_resp_s_dout;
input   output_knnId_write_resp_s_empty_n;
output   output_knnId_write_resp_s_read;
input  [8:0] output_knnDist_write_resp_s_dout;
input   output_knnDist_write_resp_s_empty_n;
output   output_knnDist_write_resp_s_read;
output  [63:0] output_knnDist_write_addr_s_din;
input   output_knnDist_write_addr_s_full_n;
output   output_knnDist_write_addr_s_write;
output  [32:0] output_knnDist_write_data_din;
input   output_knnDist_write_data_full_n;
output   output_knnDist_write_data_write;
input  [63:0] output_knnDist_write_addr_offset_load;
input  [31:0] mux_case_018_reload;
input  [31:0] mux_case_122_reload;
input  [31:0] mux_case_226_reload;
input  [31:0] mux_case_330_reload;
input  [31:0] mux_case_434_reload;
input  [31:0] mux_case_538_reload;
input  [31:0] mux_case_642_reload;
input  [31:0] mux_case_746_reload;
input  [31:0] mux_case_850_reload;
input  [31:0] mux_case_954_reload;
output  [63:0] output_knnId_write_addr_s_din;
input   output_knnId_write_addr_s_full_n;
output   output_knnId_write_addr_s_write;
output  [32:0] output_knnId_write_data_din;
input   output_knnId_write_data_full_n;
output   output_knnId_write_data_write;
input  [63:0] output_knnId_write_addr_offset_load;
input  [31:0] output_id_reload;
input  [31:0] output_id_1_reload;
input  [31:0] output_id_2_reload;
input  [31:0] output_id_3_reload;
input  [31:0] output_id_4_reload;
input  [31:0] output_id_5_reload;
input  [31:0] output_id_6_reload;
input  [31:0] output_id_7_reload;
input  [31:0] output_id_8_reload;
input  [31:0] output_id_9_reload;

reg ap_idle;
reg output_knnId_write_resp_s_read;
reg output_knnDist_write_resp_s_read;
reg output_knnDist_write_addr_s_write;
reg output_knnDist_write_data_write;
reg output_knnId_write_addr_s_write;
reg output_knnId_write_data_write;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] or_ln831_fu_492_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
reg   [31:0] i_req_id_fu_128;
wire   [31:0] i_req_id_2_fu_720_p2;
wire   [0:0] icmp_ln846_fu_645_p2;
wire   [0:0] tmp_5_nbwritereq_fu_320_p3;
wire   [0:0] tmp_6_nbwritereq_fu_328_p3;
wire    ap_loop_init;
wire    ap_block_pp0_stage0;
reg   [31:0] i_req_dist_fu_132;
wire   [31:0] i_req_dist_2_fu_585_p2;
wire   [0:0] icmp_ln834_fu_506_p2;
wire   [0:0] tmp_nbwritereq_fu_276_p3;
wire   [0:0] tmp_1_nbwritereq_fu_284_p3;
reg   [31:0] i_resp_id_fu_136;
wire   [31:0] i_resp_id_2_fu_762_p2;
wire   [0:0] tmp_8_nbreadreq_fu_350_p3;
reg   [31:0] i_resp_dist_fu_140;
wire   [31:0] i_resp_dist_2_fu_627_p2;
wire   [0:0] tmp_3_nbreadreq_fu_306_p3;
wire    ap_block_pp0_stage0_01001;
wire   [0:0] icmp_ln831_fu_480_p2;
wire   [0:0] icmp_ln831_1_fu_486_p2;
wire   [3:0] trunc_ln831_1_fu_502_p1;
wire   [5:0] shl_ln_fu_512_p3;
wire   [63:0] zext_ln25_fu_520_p1;
wire   [31:0] tmp_2_fu_534_p21;
wire   [31:0] tmp_2_fu_534_p23;
wire   [31:0] bitcast_ln146_fu_572_p1;
wire   [7:0] elem_val_fu_609_p1;
wire   [8:0] zext_ln843_fu_613_p1;
wire   [8:0] add_ln843_fu_617_p2;
wire   [31:0] zext_ln843_1_fu_623_p1;
wire   [3:0] trunc_ln831_fu_498_p1;
wire   [5:0] shl_ln25_1_fu_651_p3;
wire   [63:0] zext_ln25_1_fu_659_p1;
wire   [31:0] tmp_7_fu_673_p21;
wire   [31:0] tmp_7_fu_673_p23;
wire   [7:0] elem_val_1_fu_744_p1;
wire   [8:0] zext_ln855_fu_748_p1;
wire   [8:0] add_ln855_fu_752_p2;
wire   [31:0] zext_ln855_1_fu_758_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_430;
reg    ap_condition_435;
reg    ap_condition_438;
reg    ap_condition_441;
wire   [3:0] tmp_2_fu_534_p1;
wire   [3:0] tmp_2_fu_534_p3;
wire   [3:0] tmp_2_fu_534_p5;
wire   [3:0] tmp_2_fu_534_p7;
wire   [3:0] tmp_2_fu_534_p9;
wire   [3:0] tmp_2_fu_534_p11;
wire   [3:0] tmp_2_fu_534_p13;
wire   [3:0] tmp_2_fu_534_p15;
wire  signed [3:0] tmp_2_fu_534_p17;
wire  signed [3:0] tmp_2_fu_534_p19;
wire   [3:0] tmp_7_fu_673_p1;
wire   [3:0] tmp_7_fu_673_p3;
wire   [3:0] tmp_7_fu_673_p5;
wire   [3:0] tmp_7_fu_673_p7;
wire   [3:0] tmp_7_fu_673_p9;
wire   [3:0] tmp_7_fu_673_p11;
wire   [3:0] tmp_7_fu_673_p13;
wire   [3:0] tmp_7_fu_673_p15;
wire  signed [3:0] tmp_7_fu_673_p17;
wire  signed [3:0] tmp_7_fu_673_p19;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 i_req_id_fu_128 = 32'd0;
#0 i_req_dist_fu_132 = 32'd0;
#0 i_resp_id_fu_136 = 32'd0;
#0 i_resp_dist_fu_140 = 32'd0;
#0 ap_done_reg = 1'b0;
end

krnl_output_dist_id_sparsemux_21_4_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 4'h0 ),
    .din0_WIDTH( 32 ),
    .CASE1( 4'h1 ),
    .din1_WIDTH( 32 ),
    .CASE2( 4'h2 ),
    .din2_WIDTH( 32 ),
    .CASE3( 4'h3 ),
    .din3_WIDTH( 32 ),
    .CASE4( 4'h4 ),
    .din4_WIDTH( 32 ),
    .CASE5( 4'h5 ),
    .din5_WIDTH( 32 ),
    .CASE6( 4'h6 ),
    .din6_WIDTH( 32 ),
    .CASE7( 4'h7 ),
    .din7_WIDTH( 32 ),
    .CASE8( 4'h8 ),
    .din8_WIDTH( 32 ),
    .CASE9( 4'h9 ),
    .din9_WIDTH( 32 ),
    .def_WIDTH( 32 ),
    .sel_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
sparsemux_21_4_32_1_1_U23(
    .din0(mux_case_018_reload),
    .din1(mux_case_122_reload),
    .din2(mux_case_226_reload),
    .din3(mux_case_330_reload),
    .din4(mux_case_434_reload),
    .din5(mux_case_538_reload),
    .din6(mux_case_642_reload),
    .din7(mux_case_746_reload),
    .din8(mux_case_850_reload),
    .din9(mux_case_954_reload),
    .def(tmp_2_fu_534_p21),
    .sel(trunc_ln831_1_fu_502_p1),
    .dout(tmp_2_fu_534_p23)
);

krnl_output_dist_id_sparsemux_21_4_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 4'h0 ),
    .din0_WIDTH( 32 ),
    .CASE1( 4'h1 ),
    .din1_WIDTH( 32 ),
    .CASE2( 4'h2 ),
    .din2_WIDTH( 32 ),
    .CASE3( 4'h3 ),
    .din3_WIDTH( 32 ),
    .CASE4( 4'h4 ),
    .din4_WIDTH( 32 ),
    .CASE5( 4'h5 ),
    .din5_WIDTH( 32 ),
    .CASE6( 4'h6 ),
    .din6_WIDTH( 32 ),
    .CASE7( 4'h7 ),
    .din7_WIDTH( 32 ),
    .CASE8( 4'h8 ),
    .din8_WIDTH( 32 ),
    .CASE9( 4'h9 ),
    .din9_WIDTH( 32 ),
    .def_WIDTH( 32 ),
    .sel_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
sparsemux_21_4_32_1_1_U24(
    .din0(output_id_reload),
    .din1(output_id_1_reload),
    .din2(output_id_2_reload),
    .din3(output_id_3_reload),
    .din4(output_id_4_reload),
    .din5(output_id_5_reload),
    .din6(output_id_6_reload),
    .din7(output_id_7_reload),
    .din8(output_id_8_reload),
    .din9(output_id_9_reload),
    .def(tmp_7_fu_673_p21),
    .sel(trunc_ln831_fu_498_p1),
    .dout(tmp_7_fu_673_p23)
);

krnl_output_dist_id_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            i_req_dist_fu_132 <= 32'd0;
        end else if ((1'b1 == ap_condition_430)) begin
            i_req_dist_fu_132 <= i_req_dist_2_fu_585_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            i_req_id_fu_128 <= 32'd0;
        end else if ((1'b1 == ap_condition_435)) begin
            i_req_id_fu_128 <= i_req_id_2_fu_720_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            i_resp_dist_fu_140 <= 32'd0;
        end else if ((1'b1 == ap_condition_438)) begin
            i_resp_dist_fu_140 <= i_resp_dist_2_fu_627_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            i_resp_id_fu_136 <= 32'd0;
        end else if ((1'b1 == ap_condition_441)) begin
            i_resp_id_fu_136 <= i_resp_id_2_fu_762_p2;
        end
    end
end

always @ (*) begin
    if (((or_ln831_fu_492_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((output_knnDist_write_addr_s_full_n == 1'b1) & (or_ln831_fu_492_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_1_nbwritereq_fu_284_p3 == 1'd1) & (tmp_nbwritereq_fu_276_p3 == 1'd1) & (icmp_ln834_fu_506_p2 == 1'd1))) begin
        output_knnDist_write_addr_s_write = 1'b1;
    end else begin
        output_knnDist_write_addr_s_write = 1'b0;
    end
end

always @ (*) begin
    if (((output_knnDist_write_data_full_n == 1'b1) & (or_ln831_fu_492_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_1_nbwritereq_fu_284_p3 == 1'd1) & (tmp_nbwritereq_fu_276_p3 == 1'd1) & (icmp_ln834_fu_506_p2 == 1'd1))) begin
        output_knnDist_write_data_write = 1'b1;
    end else begin
        output_knnDist_write_data_write = 1'b0;
    end
end

always @ (*) begin
    if (((output_knnDist_write_resp_s_empty_n == 1'b1) & (or_ln831_fu_492_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_3_nbreadreq_fu_306_p3 == 1'd1))) begin
        output_knnDist_write_resp_s_read = 1'b1;
    end else begin
        output_knnDist_write_resp_s_read = 1'b0;
    end
end

always @ (*) begin
    if (((output_knnId_write_addr_s_full_n == 1'b1) & (or_ln831_fu_492_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_6_nbwritereq_fu_328_p3 == 1'd1) & (tmp_5_nbwritereq_fu_320_p3 == 1'd1) & (icmp_ln846_fu_645_p2 == 1'd1))) begin
        output_knnId_write_addr_s_write = 1'b1;
    end else begin
        output_knnId_write_addr_s_write = 1'b0;
    end
end

always @ (*) begin
    if (((output_knnId_write_data_full_n == 1'b1) & (or_ln831_fu_492_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_6_nbwritereq_fu_328_p3 == 1'd1) & (tmp_5_nbwritereq_fu_320_p3 == 1'd1) & (icmp_ln846_fu_645_p2 == 1'd1))) begin
        output_knnId_write_data_write = 1'b1;
    end else begin
        output_knnId_write_data_write = 1'b0;
    end
end

always @ (*) begin
    if (((output_knnId_write_resp_s_empty_n == 1'b1) & (or_ln831_fu_492_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_8_nbreadreq_fu_350_p3 == 1'd1))) begin
        output_knnId_write_resp_s_read = 1'b1;
    end else begin
        output_knnId_write_resp_s_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln843_fu_617_p2 = (zext_ln843_fu_613_p1 + 9'd1);

assign add_ln855_fu_752_p2 = (zext_ln855_fu_748_p1 + 9'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_430 = ((or_ln831_fu_492_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (tmp_1_nbwritereq_fu_284_p3 == 1'd1) & (tmp_nbwritereq_fu_276_p3 == 1'd1) & (icmp_ln834_fu_506_p2 == 1'd1));
end

always @ (*) begin
    ap_condition_435 = ((or_ln831_fu_492_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (tmp_6_nbwritereq_fu_328_p3 == 1'd1) & (tmp_5_nbwritereq_fu_320_p3 == 1'd1) & (icmp_ln846_fu_645_p2 == 1'd1));
end

always @ (*) begin
    ap_condition_438 = ((or_ln831_fu_492_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (tmp_3_nbreadreq_fu_306_p3 == 1'd1));
end

always @ (*) begin
    ap_condition_441 = ((or_ln831_fu_492_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (tmp_8_nbreadreq_fu_350_p3 == 1'd1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign bitcast_ln146_fu_572_p1 = tmp_2_fu_534_p23;

assign elem_val_1_fu_744_p1 = output_knnId_write_resp_s_dout[7:0];

assign elem_val_fu_609_p1 = output_knnDist_write_resp_s_dout[7:0];

assign i_req_dist_2_fu_585_p2 = (i_req_dist_fu_132 + 32'd1);

assign i_req_id_2_fu_720_p2 = (i_req_id_fu_128 + 32'd1);

assign i_resp_dist_2_fu_627_p2 = (zext_ln843_1_fu_623_p1 + i_resp_dist_fu_140);

assign i_resp_id_2_fu_762_p2 = (zext_ln855_1_fu_758_p1 + i_resp_id_fu_136);

assign icmp_ln831_1_fu_486_p2 = ((i_resp_id_fu_136 < 32'd10) ? 1'b1 : 1'b0);

assign icmp_ln831_fu_480_p2 = ((i_resp_dist_fu_140 < 32'd10) ? 1'b1 : 1'b0);

assign icmp_ln834_fu_506_p2 = ((i_req_dist_fu_132 < 32'd10) ? 1'b1 : 1'b0);

assign icmp_ln846_fu_645_p2 = ((i_req_id_fu_128 < 32'd10) ? 1'b1 : 1'b0);

assign or_ln831_fu_492_p2 = (icmp_ln831_fu_480_p2 | icmp_ln831_1_fu_486_p2);

assign output_knnDist_write_addr_s_din = (output_knnDist_write_addr_offset_load + zext_ln25_fu_520_p1);

assign output_knnDist_write_data_din = bitcast_ln146_fu_572_p1;

assign output_knnId_write_addr_s_din = (output_knnId_write_addr_offset_load + zext_ln25_1_fu_659_p1);

assign output_knnId_write_data_din = tmp_7_fu_673_p23;

assign shl_ln25_1_fu_651_p3 = {{trunc_ln831_fu_498_p1}, {2'd0}};

assign shl_ln_fu_512_p3 = {{trunc_ln831_1_fu_502_p1}, {2'd0}};

assign tmp_1_nbwritereq_fu_284_p3 = output_knnDist_write_data_full_n;

assign tmp_2_fu_534_p21 = 'bx;

assign tmp_3_nbreadreq_fu_306_p3 = output_knnDist_write_resp_s_empty_n;

assign tmp_5_nbwritereq_fu_320_p3 = output_knnId_write_addr_s_full_n;

assign tmp_6_nbwritereq_fu_328_p3 = output_knnId_write_data_full_n;

assign tmp_7_fu_673_p21 = 'bx;

assign tmp_8_nbreadreq_fu_350_p3 = output_knnId_write_resp_s_empty_n;

assign tmp_nbwritereq_fu_276_p3 = output_knnDist_write_addr_s_full_n;

assign trunc_ln831_1_fu_502_p1 = i_req_dist_fu_132[3:0];

assign trunc_ln831_fu_498_p1 = i_req_id_fu_128[3:0];

assign zext_ln25_1_fu_659_p1 = shl_ln25_1_fu_651_p3;

assign zext_ln25_fu_520_p1 = shl_ln_fu_512_p3;

assign zext_ln843_1_fu_623_p1 = add_ln843_fu_617_p2;

assign zext_ln843_fu_613_p1 = elem_val_fu_609_p1;

assign zext_ln855_1_fu_758_p1 = add_ln855_fu_752_p2;

assign zext_ln855_fu_748_p1 = elem_val_1_fu_744_p1;

endmodule //krnl_output_dist_id_krnl_output_dist_id_Pipeline_VITIS_LOOP_831_3
