`timescale 1 ns / 1 ps
// ==============================================================
// Generated by Vitis HLS v2023.2.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
 
module krnl_globalSort_L3_seq_global_merge_L3_Pipeline_VITIS_LOOP_724_3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        idx_1,
        idx,
        local_kNearstDist_partial_0_0_val,
        local_kNearstDist_partial_0_1_val,
        local_kNearstDist_partial_0_2_val,
        local_kNearstDist_partial_0_3_val,
        local_kNearstDist_partial_0_4_val,
        local_kNearstDist_partial_0_5_val,
        local_kNearstDist_partial_0_6_val,
        local_kNearstDist_partial_0_7_val,
        local_kNearstDist_partial_0_8_val,
        local_kNearstDist_partial_0_9_val,
        local_kNearstDist_partial_1_0_val,
        local_kNearstDist_partial_1_1_val,
        local_kNearstDist_partial_1_2_val,
        local_kNearstDist_partial_1_3_val,
        local_kNearstDist_partial_1_4_val,
        local_kNearstDist_partial_1_5_val,
        local_kNearstDist_partial_1_6_val,
        local_kNearstDist_partial_1_7_val,
        local_kNearstDist_partial_1_8_val,
        local_kNearstDist_partial_1_9_val,
        min_idx_out,
        min_idx_out_ap_vld,
        min_value_out,
        min_value_out_ap_vld
);
parameter    ap_ST_fsm_pp0_stage0 = 1'd1;
input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [3:0] idx_1;
input  [3:0] idx;
input  [31:0] local_kNearstDist_partial_0_0_val;
input  [31:0] local_kNearstDist_partial_0_1_val;
input  [31:0] local_kNearstDist_partial_0_2_val;
input  [31:0] local_kNearstDist_partial_0_3_val;
input  [31:0] local_kNearstDist_partial_0_4_val;
input  [31:0] local_kNearstDist_partial_0_5_val;
input  [31:0] local_kNearstDist_partial_0_6_val;
input  [31:0] local_kNearstDist_partial_0_7_val;
input  [31:0] local_kNearstDist_partial_0_8_val;
input  [31:0] local_kNearstDist_partial_0_9_val;
input  [31:0] local_kNearstDist_partial_1_0_val;
input  [31:0] local_kNearstDist_partial_1_1_val;
input  [31:0] local_kNearstDist_partial_1_2_val;
input  [31:0] local_kNearstDist_partial_1_3_val;
input  [31:0] local_kNearstDist_partial_1_4_val;
input  [31:0] local_kNearstDist_partial_1_5_val;
input  [31:0] local_kNearstDist_partial_1_6_val;
input  [31:0] local_kNearstDist_partial_1_7_val;
input  [31:0] local_kNearstDist_partial_1_8_val;
input  [31:0] local_kNearstDist_partial_1_9_val;
output  [0:0] min_idx_out;
output   min_idx_out_ap_vld;
output  [31:0] min_value_out;
output   min_value_out_ap_vld;
reg ap_idle;
reg min_idx_out_ap_vld;
reg min_value_out_ap_vld;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln724_fu_373_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg   [0:0] icmp_ln724_reg_697;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] trunc_ln722_fu_379_p1;
reg   [0:0] trunc_ln722_reg_701;
wire   [31:0] min_value_1_fu_487_p3;
reg   [31:0] min_value_1_reg_706;
reg   [31:0] min_value_fu_116;
wire   [31:0] min_value_2_fu_612_p3;
wire    ap_loop_init;
wire    ap_block_pp0_stage0;
reg   [31:0] min_idx_fu_120;
wire   [31:0] min_idx_5_fu_622_p3;
reg   [1:0] min_idx_1_fu_124;
wire   [1:0] add_ln724_fu_367_p2;
reg   [1:0] ap_sig_allocacmp_j;
wire    ap_block_pp0_stage0_01001;
wire   [31:0] tmp_5_fu_391_p21;
wire   [3:0] select_ln727_fu_383_p3;
wire   [31:0] tmp_6_fu_439_p21;
wire   [31:0] tmp_6_fu_439_p23;
wire   [31:0] tmp_5_fu_391_p23;
wire   [31:0] bitcast_ln727_fu_522_p1;
wire   [31:0] bitcast_ln727_1_fu_539_p1;
wire   [7:0] tmp_fu_525_p4;
wire   [22:0] trunc_ln727_fu_535_p1;
wire   [0:0] icmp_ln727_1_fu_563_p2;
wire   [0:0] icmp_ln727_fu_557_p2;
wire   [7:0] tmp_3_fu_543_p4;
wire   [22:0] trunc_ln727_1_fu_553_p1;
wire   [0:0] icmp_ln727_3_fu_581_p2;
wire   [0:0] icmp_ln727_2_fu_575_p2;
wire   [0:0] tmp_4_fu_274_p2;
wire   [0:0] or_ln727_fu_569_p2;
wire   [0:0] and_ln727_fu_600_p2;
wire   [0:0] or_ln727_1_fu_587_p2;
wire   [0:0] and_ln727_1_fu_606_p2;
wire   [31:0] zext_ln727_fu_619_p1;
wire    ap_block_pp0_stage0_00001;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire   [3:0] tmp_5_fu_391_p1;
wire   [3:0] tmp_5_fu_391_p3;
wire   [3:0] tmp_5_fu_391_p5;
wire   [3:0] tmp_5_fu_391_p7;
wire   [3:0] tmp_5_fu_391_p9;
wire   [3:0] tmp_5_fu_391_p11;
wire   [3:0] tmp_5_fu_391_p13;
wire   [3:0] tmp_5_fu_391_p15;
wire  signed [3:0] tmp_5_fu_391_p17;
wire  signed [3:0] tmp_5_fu_391_p19;
wire   [3:0] tmp_6_fu_439_p1;
wire   [3:0] tmp_6_fu_439_p3;
wire   [3:0] tmp_6_fu_439_p5;
wire   [3:0] tmp_6_fu_439_p7;
wire   [3:0] tmp_6_fu_439_p9;
wire   [3:0] tmp_6_fu_439_p11;
wire   [3:0] tmp_6_fu_439_p13;
wire   [3:0] tmp_6_fu_439_p15;
wire  signed [3:0] tmp_6_fu_439_p17;
wire  signed [3:0] tmp_6_fu_439_p19;
wire    ap_ce_reg;
// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 min_value_fu_116 = 32'd0;
#0 min_idx_fu_120 = 32'd0;
#0 min_idx_1_fu_124 = 2'd0;
#0 ap_done_reg = 1'b0;
end
krnl_globalSort_L3_fcmp_32ns_32ns_1_1_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_1_no_dsp_1_U45(
    .din0(min_value_1_reg_706),
    .din1(min_value_fu_116),
    .opcode(5'd4),
    .dout(tmp_4_fu_274_p2)
);
krnl_globalSort_L3_sparsemux_21_4_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 4'h0 ),
    .din0_WIDTH( 32 ),
    .CASE1( 4'h1 ),
    .din1_WIDTH( 32 ),
    .CASE2( 4'h2 ),
    .din2_WIDTH( 32 ),
    .CASE3( 4'h3 ),
    .din3_WIDTH( 32 ),
    .CASE4( 4'h4 ),
    .din4_WIDTH( 32 ),
    .CASE5( 4'h5 ),
    .din5_WIDTH( 32 ),
    .CASE6( 4'h6 ),
    .din6_WIDTH( 32 ),
    .CASE7( 4'h7 ),
    .din7_WIDTH( 32 ),
    .CASE8( 4'h8 ),
    .din8_WIDTH( 32 ),
    .CASE9( 4'h9 ),
    .din9_WIDTH( 32 ),
    .def_WIDTH( 32 ),
    .sel_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
sparsemux_21_4_32_1_1_U46(
    .din0(local_kNearstDist_partial_0_0_val),
    .din1(local_kNearstDist_partial_0_1_val),
    .din2(local_kNearstDist_partial_0_2_val),
    .din3(local_kNearstDist_partial_0_3_val),
    .din4(local_kNearstDist_partial_0_4_val),
    .din5(local_kNearstDist_partial_0_5_val),
    .din6(local_kNearstDist_partial_0_6_val),
    .din7(local_kNearstDist_partial_0_7_val),
    .din8(local_kNearstDist_partial_0_8_val),
    .din9(local_kNearstDist_partial_0_9_val),
    .def(tmp_5_fu_391_p21),
    .sel(select_ln727_fu_383_p3),
    .dout(tmp_5_fu_391_p23)
);
krnl_globalSort_L3_sparsemux_21_4_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 4'h0 ),
    .din0_WIDTH( 32 ),
    .CASE1( 4'h1 ),
    .din1_WIDTH( 32 ),
    .CASE2( 4'h2 ),
    .din2_WIDTH( 32 ),
    .CASE3( 4'h3 ),
    .din3_WIDTH( 32 ),
    .CASE4( 4'h4 ),
    .din4_WIDTH( 32 ),
    .CASE5( 4'h5 ),
    .din5_WIDTH( 32 ),
    .CASE6( 4'h6 ),
    .din6_WIDTH( 32 ),
    .CASE7( 4'h7 ),
    .din7_WIDTH( 32 ),
    .CASE8( 4'h8 ),
    .din8_WIDTH( 32 ),
    .CASE9( 4'h9 ),
    .din9_WIDTH( 32 ),
    .def_WIDTH( 32 ),
    .sel_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
sparsemux_21_4_32_1_1_U47(
    .din0(local_kNearstDist_partial_1_0_val),
    .din1(local_kNearstDist_partial_1_1_val),
    .din2(local_kNearstDist_partial_1_2_val),
    .din3(local_kNearstDist_partial_1_3_val),
    .din4(local_kNearstDist_partial_1_4_val),
    .din5(local_kNearstDist_partial_1_5_val),
    .din6(local_kNearstDist_partial_1_6_val),
    .din7(local_kNearstDist_partial_1_7_val),
    .din8(local_kNearstDist_partial_1_8_val),
    .din9(local_kNearstDist_partial_1_9_val),
    .def(tmp_6_fu_439_p21),
    .sel(select_ln727_fu_383_p3),
    .dout(tmp_6_fu_439_p23)
);
krnl_globalSort_L3_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);
always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end
always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end
always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end
always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        if (((ap_loop_exit_ready == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_loop_exit_ready_pp0_iter1_reg <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_11001)) begin
            ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        end
    end
end
always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln724_fu_373_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            min_idx_1_fu_124 <= add_ln724_fu_367_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            min_idx_1_fu_124 <= 2'd0;
        end
    end
end
always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            min_idx_fu_120 <= 32'd4294967295;
        end else if (((icmp_ln724_reg_697 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            min_idx_fu_120 <= min_idx_5_fu_622_p3;
        end
    end
end
always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            min_value_fu_116 <= 32'd2139095037;
        end else if (((icmp_ln724_reg_697 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            min_value_fu_116 <= min_value_2_fu_612_p3;
        end
    end
end
always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln724_reg_697 <= icmp_ln724_fu_373_p2;
        min_value_1_reg_706 <= min_value_1_fu_487_p3;
        trunc_ln722_reg_701 <= trunc_ln722_fu_379_p1;
    end
end
always @ (*) begin
    if (((icmp_ln724_fu_373_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end
always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end
always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end
always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end
always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end
always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_j = 2'd0;
    end else begin
        ap_sig_allocacmp_j = min_idx_1_fu_124;
    end
end
always @ (*) begin
    if (((icmp_ln724_reg_697 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        min_idx_out_ap_vld = 1'b1;
    end else begin
        min_idx_out_ap_vld = 1'b0;
    end
end
always @ (*) begin
    if (((icmp_ln724_reg_697 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        min_value_out_ap_vld = 1'b1;
    end else begin
        min_value_out_ap_vld = 1'b0;
    end
end
always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end
assign add_ln724_fu_367_p2 = (ap_sig_allocacmp_j + 2'd1);
assign and_ln727_1_fu_606_p2 = (or_ln727_1_fu_587_p2 & and_ln727_fu_600_p2);
assign and_ln727_fu_600_p2 = (tmp_4_fu_274_p2 & or_ln727_fu_569_p2);
assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];
assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);
assign ap_block_pp0_stage0_00001 = ~(1'b1 == 1'b1);
assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);
assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);
assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);
assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);
assign ap_enable_reg_pp0_iter0 = ap_start_int;
assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;
assign bitcast_ln727_1_fu_539_p1 = min_value_fu_116;
assign bitcast_ln727_fu_522_p1 = min_value_1_reg_706;
assign icmp_ln724_fu_373_p2 = ((ap_sig_allocacmp_j == 2'd2) ? 1'b1 : 1'b0);
assign icmp_ln727_1_fu_563_p2 = ((trunc_ln727_fu_535_p1 == 23'd0) ? 1'b1 : 1'b0);
assign icmp_ln727_2_fu_575_p2 = ((tmp_3_fu_543_p4 != 8'd255) ? 1'b1 : 1'b0);
assign icmp_ln727_3_fu_581_p2 = ((trunc_ln727_1_fu_553_p1 == 23'd0) ? 1'b1 : 1'b0);
assign icmp_ln727_fu_557_p2 = ((tmp_fu_525_p4 != 8'd255) ? 1'b1 : 1'b0);
assign min_idx_5_fu_622_p3 = ((and_ln727_1_fu_606_p2[0:0] == 1'b1) ? zext_ln727_fu_619_p1 : min_idx_fu_120);
assign min_idx_out = min_idx_fu_120[0:0];
assign min_value_1_fu_487_p3 = ((trunc_ln722_fu_379_p1[0:0] == 1'b1) ? tmp_6_fu_439_p23 : tmp_5_fu_391_p23);
assign min_value_2_fu_612_p3 = ((and_ln727_1_fu_606_p2[0:0] == 1'b1) ? min_value_1_reg_706 : min_value_fu_116);
assign min_value_out = min_value_fu_116;
assign or_ln727_1_fu_587_p2 = (icmp_ln727_3_fu_581_p2 | icmp_ln727_2_fu_575_p2);
assign or_ln727_fu_569_p2 = (icmp_ln727_fu_557_p2 | icmp_ln727_1_fu_563_p2);
assign select_ln727_fu_383_p3 = ((trunc_ln722_fu_379_p1[0:0] == 1'b1) ? idx_1 : idx);
assign tmp_3_fu_543_p4 = {{bitcast_ln727_1_fu_539_p1[30:23]}};
assign tmp_5_fu_391_p21 = 'bx;
assign tmp_6_fu_439_p21 = 'bx;
assign tmp_fu_525_p4 = {{bitcast_ln727_fu_522_p1[30:23]}};
assign trunc_ln722_fu_379_p1 = ap_sig_allocacmp_j[0:0];
assign trunc_ln727_1_fu_553_p1 = bitcast_ln727_1_fu_539_p1[22:0];
assign trunc_ln727_fu_535_p1 = bitcast_ln727_fu_522_p1[22:0];
assign zext_ln727_fu_619_p1 = trunc_ln722_reg_701;
endmodule