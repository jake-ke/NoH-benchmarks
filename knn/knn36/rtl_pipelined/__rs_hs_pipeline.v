`timescale 1 ns / 1 ps
// ==================================================
// RTL generated by RapidStream
//
// Copyright 2024 RapidStream Design Automation, Inc.
// All Rights Reserved.
// ==================================================
// Note that this template is also used by Jump DSL inference
// first-word fall-through (FWFT) FIFO that is friendly for floorplanning
module __rs_hs_pipeline #(
    parameter DATA_WIDTH = 32,
    parameter DEPTH = 24,
    parameter PIPELINE_READY_IN_HEAD = 1,
    parameter PIPELINE_VALID_AND_DATA_IN_HEAD = 0,
    parameter BODY_LEVEL = 2,
    parameter EXTRA_PIPELINE_BEFORE_TAIL = 0,
    parameter MEM_STYLE = 0,   // 0: SRL, 1: ULTRA, 2: BLOCK
    parameter __HEAD_REGION = "",
    parameter __BODY_0_REGION = "",
    parameter __BODY_1_REGION = "",
    parameter __BODY_2_REGION = "",
    parameter __BODY_3_REGION = "",
    parameter __BODY_4_REGION = "",
    parameter __BODY_5_REGION = "",
    parameter __BODY_6_REGION = "",
    parameter __BODY_7_REGION = "",
    parameter __BODY_8_REGION = "",
    parameter __TAIL_REGION = ""
) (
    // pragma RS clk port=clk
    input wire clk,
    // pragma RS rst port=reset active=high
    input wire reset,
    // inbound
    // pragma RS handshake valid=if_write ready=if_full_n data=if_din
    output wire                  if_full_n,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    // outbound
    // pragma RS handshake valid=if_empty_n ready=if_read data=if_dout
    output wire                  if_empty_n,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
    parameter GRACE_PERIOD = BODY_LEVEL * 2 + PIPELINE_READY_IN_HEAD + PIPELINE_VALID_AND_DATA_IN_HEAD + EXTRA_PIPELINE_BEFORE_TAIL * 2;
    parameter REAL_DEPTH = GRACE_PERIOD + DEPTH + 4;
    parameter REAL_ADDR_WIDTH  = $clog2(REAL_DEPTH);
    wire                  gate_valid;
    wire                  gate_ready;
    wire [DATA_WIDTH-1:0] gate_data ;
    wire                  body_outbound_0_valid;
    wire                  body_outbound_0_ready;
    wire [DATA_WIDTH-1:0] body_outbound_0_data ;
    wire                  body_outbound_1_valid;
    wire                  body_outbound_1_ready;
    wire [DATA_WIDTH-1:0] body_outbound_1_data ;
    wire                  body_outbound_2_valid;
    wire                  body_outbound_2_ready;
    wire [DATA_WIDTH-1:0] body_outbound_2_data ;
    wire                  body_outbound_3_valid;
    wire                  body_outbound_3_ready;
    wire [DATA_WIDTH-1:0] body_outbound_3_data ;
    wire                  body_outbound_4_valid;
    wire                  body_outbound_4_ready;
    wire [DATA_WIDTH-1:0] body_outbound_4_data ;
    wire                  body_outbound_5_valid;
    wire                  body_outbound_5_ready;
    wire [DATA_WIDTH-1:0] body_outbound_5_data ;
    wire                  body_outbound_6_valid;
    wire                  body_outbound_6_ready;
    wire [DATA_WIDTH-1:0] body_outbound_6_data ;
    wire                  body_outbound_7_valid;
    wire                  body_outbound_7_ready;
    wire [DATA_WIDTH-1:0] body_outbound_7_data ;
    wire                  body_outbound_8_valid;
    wire                  body_outbound_8_ready;
    wire [DATA_WIDTH-1:0] body_outbound_8_data ;
    wire                  body_outbound_9_valid;
    wire                  body_outbound_9_ready;
    wire [DATA_WIDTH-1:0] body_outbound_9_data ;
    wire                  tail_gate_valid;
    wire                  tail_gate_ready;
    wire [DATA_WIDTH-1:0] tail_gate_data ;
    __rs_hs_pipeline_head_gate #(
        .DATA_WIDTH(DATA_WIDTH),
        .__REGION(__HEAD_REGION)
    ) RS_HS_PP_HEAD_GATE (
        .clk(clk),
        .reset(reset),
        // inbound
        .if_full_n  (if_full_n),
        .if_write   (if_write),
        .if_din     (if_din),
        // outbound
        .if_empty_n (gate_valid),
        .if_read    (gate_ready),
        .if_dout    (gate_data)
    );
    __rs_hs_pipeline_head #(
        .DATA_WIDTH(DATA_WIDTH),
        .PIPELINE_READY(PIPELINE_READY_IN_HEAD),
        .PIPELINE_VALID_AND_DATA(PIPELINE_VALID_AND_DATA_IN_HEAD),
        .__REGION(__HEAD_REGION)
    ) RS_HS_PP_HEAD (
        .clk(clk),
        .reset(reset),
        // inbound
        .if_full_n  (gate_ready),
        .if_write   (gate_valid),
        .if_din     (gate_data),
        // outbound
        .if_empty_n (body_outbound_0_valid),
        .if_read    (body_outbound_0_ready),
        .if_dout    (body_outbound_0_data)
    );
    __rs_fifo_reg #(
        .DATA_WIDTH(DATA_WIDTH),
        .ENABLE_REG(BODY_LEVEL - 0),
        .__REGION(__BODY_0_REGION),
        .__NEXT_REGION(__BODY_1_REGION),
        .__PREV_REGION(__HEAD_REGION)
    ) RS_HS_PP_BODY_0 (
        .clk(clk),
        .reset(reset),
        // inbound
        .if_full_n  (body_outbound_0_ready),
        .if_write   (body_outbound_0_valid),
        .if_din     (body_outbound_0_data),
        // outbound
        .if_empty_n(body_outbound_1_valid),
        .if_read   (body_outbound_1_ready),
        .if_dout   (body_outbound_1_data)
    );
    __rs_fifo_reg #(
        .DATA_WIDTH(DATA_WIDTH),
        .ENABLE_REG(BODY_LEVEL - 1),
        .__REGION(__BODY_1_REGION),
        .__NEXT_REGION(__BODY_2_REGION),
        .__PREV_REGION(__BODY_0_REGION)
    ) RS_HS_PP_BODY_1 (
        .clk(clk),
        .reset(reset),
        // inbound
        .if_full_n  (body_outbound_1_ready),
        .if_write   (body_outbound_1_valid),
        .if_din     (body_outbound_1_data),
        // outbound
        .if_empty_n(body_outbound_2_valid),
        .if_read   (body_outbound_2_ready),
        .if_dout   (body_outbound_2_data)
    );
    __rs_fifo_reg #(
        .DATA_WIDTH(DATA_WIDTH),
        .ENABLE_REG(BODY_LEVEL - 2),
        .__REGION(__BODY_2_REGION),
        .__NEXT_REGION(__BODY_3_REGION),
        .__PREV_REGION(__BODY_1_REGION)
    ) RS_HS_PP_BODY_2 (
        .clk(clk),
        .reset(reset),
        // inbound
        .if_full_n  (body_outbound_2_ready),
        .if_write   (body_outbound_2_valid),
        .if_din     (body_outbound_2_data),
        // outbound
        .if_empty_n(body_outbound_3_valid),
        .if_read   (body_outbound_3_ready),
        .if_dout   (body_outbound_3_data)
    );
    __rs_fifo_reg #(
        .DATA_WIDTH(DATA_WIDTH),
        .ENABLE_REG(BODY_LEVEL - 3),
        .__REGION(__BODY_3_REGION),
        .__NEXT_REGION(__BODY_4_REGION),
        .__PREV_REGION(__BODY_2_REGION)
    ) RS_HS_PP_BODY_3 (
        .clk(clk),
        .reset(reset),
        // inbound
        .if_full_n  (body_outbound_3_ready),
        .if_write   (body_outbound_3_valid),
        .if_din     (body_outbound_3_data),
        // outbound
        .if_empty_n(body_outbound_4_valid),
        .if_read   (body_outbound_4_ready),
        .if_dout   (body_outbound_4_data)
    );
    __rs_fifo_reg #(
        .DATA_WIDTH(DATA_WIDTH),
        .ENABLE_REG(BODY_LEVEL - 4),
        .__REGION(__BODY_4_REGION),
        .__NEXT_REGION(__BODY_5_REGION),
        .__PREV_REGION(__BODY_3_REGION)
    ) RS_HS_PP_BODY_4 (
        .clk(clk),
        .reset(reset),
        // inbound
        .if_full_n  (body_outbound_4_ready),
        .if_write   (body_outbound_4_valid),
        .if_din     (body_outbound_4_data),
        // outbound
        .if_empty_n(body_outbound_5_valid),
        .if_read   (body_outbound_5_ready),
        .if_dout   (body_outbound_5_data)
    );
    __rs_fifo_reg #(
        .DATA_WIDTH(DATA_WIDTH),
        .ENABLE_REG(BODY_LEVEL - 5),
        .__REGION(__BODY_5_REGION),
        .__NEXT_REGION(__BODY_6_REGION),
        .__PREV_REGION(__BODY_4_REGION)
    ) RS_HS_PP_BODY_5 (
        .clk(clk),
        .reset(reset),
        // inbound
        .if_full_n  (body_outbound_5_ready),
        .if_write   (body_outbound_5_valid),
        .if_din     (body_outbound_5_data),
        // outbound
        .if_empty_n(body_outbound_6_valid),
        .if_read   (body_outbound_6_ready),
        .if_dout   (body_outbound_6_data)
    );
    __rs_fifo_reg #(
        .DATA_WIDTH(DATA_WIDTH),
        .ENABLE_REG(BODY_LEVEL - 6),
        .__REGION(__BODY_6_REGION),
        .__NEXT_REGION(__BODY_7_REGION),
        .__PREV_REGION(__BODY_5_REGION)
    ) RS_HS_PP_BODY_6 (
        .clk(clk),
        .reset(reset),
        // inbound
        .if_full_n  (body_outbound_6_ready),
        .if_write   (body_outbound_6_valid),
        .if_din     (body_outbound_6_data),
        // outbound
        .if_empty_n(body_outbound_7_valid),
        .if_read   (body_outbound_7_ready),
        .if_dout   (body_outbound_7_data)
    );
    __rs_fifo_reg #(
        .DATA_WIDTH(DATA_WIDTH),
        .ENABLE_REG(BODY_LEVEL - 7),
        .__REGION(__BODY_7_REGION),
        .__NEXT_REGION(__BODY_8_REGION),
        .__PREV_REGION(__BODY_6_REGION)
    ) RS_HS_PP_BODY_7 (
        .clk(clk),
        .reset(reset),
        // inbound
        .if_full_n  (body_outbound_7_ready),
        .if_write   (body_outbound_7_valid),
        .if_din     (body_outbound_7_data),
        // outbound
        .if_empty_n(body_outbound_8_valid),
        .if_read   (body_outbound_8_ready),
        .if_dout   (body_outbound_8_data)
    );
    __rs_fifo_reg #(
        .DATA_WIDTH(DATA_WIDTH),
        .ENABLE_REG(BODY_LEVEL - 8),
        .__REGION(__BODY_8_REGION),
        .__NEXT_REGION(__TAIL_REGION),
        .__PREV_REGION(__BODY_7_REGION)
    ) RS_HS_PP_BODY_8 (
        .clk(clk),
        .reset(reset),
        // inbound
        .if_full_n  (body_outbound_8_ready),
        .if_write   (body_outbound_8_valid),
        .if_din     (body_outbound_8_data),
        // outbound
        .if_empty_n(body_outbound_9_valid),
        .if_read   (body_outbound_9_ready),
        .if_dout   (body_outbound_9_data)
    );
    // tail gate is always together with the tail module
    // insulate the timing path between to the tail module
    __rs_fifo_reg #(
        .DATA_WIDTH(DATA_WIDTH),
        .ENABLE_REG(EXTRA_PIPELINE_BEFORE_TAIL),
        .__REGION(__TAIL_REGION)
    ) RS_HS_PP_TAIL_GATE (
        .clk(clk),
        .reset(reset),
        // inbound
        .if_full_n  (body_outbound_9_ready),
        .if_write   (body_outbound_9_valid),
        .if_din     (body_outbound_9_data),
        // outbound
        .if_empty_n(tail_gate_valid),
        .if_read   (tail_gate_ready),
        .if_dout   (tail_gate_data)
    );
    __rs_hs_pipeline_tail #(
        .DATA_WIDTH(DATA_WIDTH),
        .ADDR_WIDTH(REAL_ADDR_WIDTH),
        .DEPTH(REAL_DEPTH),
        .GRACE_PERIOD(GRACE_PERIOD),
        .MEM_STYLE(MEM_STYLE),
        .__REGION(__TAIL_REGION)
    ) RS_HS_PP_TAIL (
        .clk(clk),
        .reset(reset),
        // inbound
        .if_full_n  (tail_gate_ready),
        .if_write   (tail_gate_valid),
        .if_din     (tail_gate_data),
        // outbound
        .if_empty_n(if_empty_n),
        .if_read   (if_read),
        .if_dout   (if_dout)
    );
endmodule