// ==============================================================
// Generated by Vitis HLS v2023.2.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module krnl_globalSort_L1_L2_krnl_globalSort_L1_L2_Pipeline_VITIS_LOOP_785_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in_id0_s_dout,
        in_id0_s_empty_n,
        in_id0_s_read,
        in_id1_s_dout,
        in_id1_s_empty_n,
        in_id1_s_read,
        in_id2_s_dout,
        in_id2_s_empty_n,
        in_id2_s_read,
        p_0_0_0_0_064_out,
        p_0_0_0_0_064_out_ap_vld,
        p_0_0_0_0_013162_out,
        p_0_0_0_0_013162_out_ap_vld,
        p_0_0_0_0_014660_out,
        p_0_0_0_0_014660_out_ap_vld,
        p_0_0_0_0_058_out,
        p_0_0_0_0_058_out_ap_vld,
        p_0_0_0_0_013156_out,
        p_0_0_0_0_013156_out_ap_vld,
        p_0_0_0_0_014654_out,
        p_0_0_0_0_014654_out_ap_vld,
        p_0_0_0_0_052_out,
        p_0_0_0_0_052_out_ap_vld,
        p_0_0_0_0_013150_out,
        p_0_0_0_0_013150_out_ap_vld,
        p_0_0_0_0_014648_out,
        p_0_0_0_0_014648_out_ap_vld,
        p_0_0_0_0_046_out,
        p_0_0_0_0_046_out_ap_vld,
        p_0_0_0_0_013144_out,
        p_0_0_0_0_013144_out_ap_vld,
        p_0_0_0_0_014642_out,
        p_0_0_0_0_014642_out_ap_vld,
        p_0_0_0_0_040_out,
        p_0_0_0_0_040_out_ap_vld,
        p_0_0_0_0_013138_out,
        p_0_0_0_0_013138_out_ap_vld,
        p_0_0_0_0_014636_out,
        p_0_0_0_0_014636_out_ap_vld,
        p_0_0_0_0_034_out,
        p_0_0_0_0_034_out_ap_vld,
        p_0_0_0_0_013132_out,
        p_0_0_0_0_013132_out_ap_vld,
        p_0_0_0_0_014630_out,
        p_0_0_0_0_014630_out_ap_vld,
        p_0_0_0_0_028_out,
        p_0_0_0_0_028_out_ap_vld,
        p_0_0_0_0_013126_out,
        p_0_0_0_0_013126_out_ap_vld,
        p_0_0_0_0_014624_out,
        p_0_0_0_0_014624_out_ap_vld,
        p_0_0_0_0_022_out,
        p_0_0_0_0_022_out_ap_vld,
        p_0_0_0_0_013120_out,
        p_0_0_0_0_013120_out_ap_vld,
        p_0_0_0_0_014618_out,
        p_0_0_0_0_014618_out_ap_vld,
        p_0_0_0_0_016_out,
        p_0_0_0_0_016_out_ap_vld,
        p_0_0_0_0_013114_out,
        p_0_0_0_0_013114_out_ap_vld,
        p_0_0_0_0_014612_out,
        p_0_0_0_0_014612_out_ap_vld,
        p_0_0_0_0_010_out,
        p_0_0_0_0_010_out_ap_vld,
        p_0_0_0_0_01318_out,
        p_0_0_0_0_01318_out_ap_vld,
        p_0_0_0_0_01466_out,
        p_0_0_0_0_01466_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [65:0] in_id0_s_dout;
input   in_id0_s_empty_n;
output   in_id0_s_read;
input  [65:0] in_id1_s_dout;
input   in_id1_s_empty_n;
output   in_id1_s_read;
input  [65:0] in_id2_s_dout;
input   in_id2_s_empty_n;
output   in_id2_s_read;
output  [31:0] p_0_0_0_0_064_out;
output   p_0_0_0_0_064_out_ap_vld;
output  [31:0] p_0_0_0_0_013162_out;
output   p_0_0_0_0_013162_out_ap_vld;
output  [31:0] p_0_0_0_0_014660_out;
output   p_0_0_0_0_014660_out_ap_vld;
output  [31:0] p_0_0_0_0_058_out;
output   p_0_0_0_0_058_out_ap_vld;
output  [31:0] p_0_0_0_0_013156_out;
output   p_0_0_0_0_013156_out_ap_vld;
output  [31:0] p_0_0_0_0_014654_out;
output   p_0_0_0_0_014654_out_ap_vld;
output  [31:0] p_0_0_0_0_052_out;
output   p_0_0_0_0_052_out_ap_vld;
output  [31:0] p_0_0_0_0_013150_out;
output   p_0_0_0_0_013150_out_ap_vld;
output  [31:0] p_0_0_0_0_014648_out;
output   p_0_0_0_0_014648_out_ap_vld;
output  [31:0] p_0_0_0_0_046_out;
output   p_0_0_0_0_046_out_ap_vld;
output  [31:0] p_0_0_0_0_013144_out;
output   p_0_0_0_0_013144_out_ap_vld;
output  [31:0] p_0_0_0_0_014642_out;
output   p_0_0_0_0_014642_out_ap_vld;
output  [31:0] p_0_0_0_0_040_out;
output   p_0_0_0_0_040_out_ap_vld;
output  [31:0] p_0_0_0_0_013138_out;
output   p_0_0_0_0_013138_out_ap_vld;
output  [31:0] p_0_0_0_0_014636_out;
output   p_0_0_0_0_014636_out_ap_vld;
output  [31:0] p_0_0_0_0_034_out;
output   p_0_0_0_0_034_out_ap_vld;
output  [31:0] p_0_0_0_0_013132_out;
output   p_0_0_0_0_013132_out_ap_vld;
output  [31:0] p_0_0_0_0_014630_out;
output   p_0_0_0_0_014630_out_ap_vld;
output  [31:0] p_0_0_0_0_028_out;
output   p_0_0_0_0_028_out_ap_vld;
output  [31:0] p_0_0_0_0_013126_out;
output   p_0_0_0_0_013126_out_ap_vld;
output  [31:0] p_0_0_0_0_014624_out;
output   p_0_0_0_0_014624_out_ap_vld;
output  [31:0] p_0_0_0_0_022_out;
output   p_0_0_0_0_022_out_ap_vld;
output  [31:0] p_0_0_0_0_013120_out;
output   p_0_0_0_0_013120_out_ap_vld;
output  [31:0] p_0_0_0_0_014618_out;
output   p_0_0_0_0_014618_out_ap_vld;
output  [31:0] p_0_0_0_0_016_out;
output   p_0_0_0_0_016_out_ap_vld;
output  [31:0] p_0_0_0_0_013114_out;
output   p_0_0_0_0_013114_out_ap_vld;
output  [31:0] p_0_0_0_0_014612_out;
output   p_0_0_0_0_014612_out_ap_vld;
output  [31:0] p_0_0_0_0_010_out;
output   p_0_0_0_0_010_out_ap_vld;
output  [31:0] p_0_0_0_0_01318_out;
output   p_0_0_0_0_01318_out_ap_vld;
output  [31:0] p_0_0_0_0_01466_out;
output   p_0_0_0_0_01466_out_ap_vld;

reg ap_idle;
reg in_id0_s_read;
reg in_id1_s_read;
reg in_id2_s_read;
reg p_0_0_0_0_064_out_ap_vld;
reg p_0_0_0_0_013162_out_ap_vld;
reg p_0_0_0_0_014660_out_ap_vld;
reg p_0_0_0_0_058_out_ap_vld;
reg p_0_0_0_0_013156_out_ap_vld;
reg p_0_0_0_0_014654_out_ap_vld;
reg p_0_0_0_0_052_out_ap_vld;
reg p_0_0_0_0_013150_out_ap_vld;
reg p_0_0_0_0_014648_out_ap_vld;
reg p_0_0_0_0_046_out_ap_vld;
reg p_0_0_0_0_013144_out_ap_vld;
reg p_0_0_0_0_014642_out_ap_vld;
reg p_0_0_0_0_040_out_ap_vld;
reg p_0_0_0_0_013138_out_ap_vld;
reg p_0_0_0_0_014636_out_ap_vld;
reg p_0_0_0_0_034_out_ap_vld;
reg p_0_0_0_0_013132_out_ap_vld;
reg p_0_0_0_0_014630_out_ap_vld;
reg p_0_0_0_0_028_out_ap_vld;
reg p_0_0_0_0_013126_out_ap_vld;
reg p_0_0_0_0_014624_out_ap_vld;
reg p_0_0_0_0_022_out_ap_vld;
reg p_0_0_0_0_013120_out_ap_vld;
reg p_0_0_0_0_014618_out_ap_vld;
reg p_0_0_0_0_016_out_ap_vld;
reg p_0_0_0_0_013114_out_ap_vld;
reg p_0_0_0_0_014612_out_ap_vld;
reg p_0_0_0_0_010_out_ap_vld;
reg p_0_0_0_0_01318_out_ap_vld;
reg p_0_0_0_0_01466_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln785_fu_497_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    in_id0_s_blk_n;
wire    ap_block_pp0_stage0;
reg    in_id1_s_blk_n;
reg    in_id2_s_blk_n;
reg   [3:0] i_reg_1356;
reg    ap_block_pp0_stage0_11001;
reg   [3:0] i_1_fu_112;
wire   [3:0] add_ln785_fu_491_p2;
wire    ap_loop_init;
reg   [3:0] ap_sig_allocacmp_i;
reg   [31:0] p_0_0_0_0_01466_fu_116;
wire   [31:0] v0_id_data_fu_517_p1;
reg   [31:0] p_0_0_0_0_01318_fu_120;
wire   [31:0] v1_id_data_fu_524_p1;
reg   [31:0] p_0_0_0_0_010_fu_124;
wire   [31:0] v2_id_data_fu_531_p1;
reg   [31:0] p_0_0_0_0_014612_fu_128;
reg   [31:0] p_0_0_0_0_013114_fu_132;
reg   [31:0] p_0_0_0_0_016_fu_136;
reg   [31:0] p_0_0_0_0_014618_fu_140;
reg   [31:0] p_0_0_0_0_013120_fu_144;
reg   [31:0] p_0_0_0_0_022_fu_148;
reg   [31:0] p_0_0_0_0_014624_fu_152;
reg   [31:0] p_0_0_0_0_013126_fu_156;
reg   [31:0] p_0_0_0_0_028_fu_160;
reg   [31:0] p_0_0_0_0_014630_fu_164;
reg   [31:0] p_0_0_0_0_013132_fu_168;
reg   [31:0] p_0_0_0_0_034_fu_172;
reg   [31:0] p_0_0_0_0_014636_fu_176;
reg   [31:0] p_0_0_0_0_013138_fu_180;
reg   [31:0] p_0_0_0_0_040_fu_184;
reg   [31:0] p_0_0_0_0_014642_fu_188;
reg   [31:0] p_0_0_0_0_013144_fu_192;
reg   [31:0] p_0_0_0_0_046_fu_196;
reg   [31:0] p_0_0_0_0_014648_fu_200;
reg   [31:0] p_0_0_0_0_013150_fu_204;
reg   [31:0] p_0_0_0_0_052_fu_208;
reg   [31:0] p_0_0_0_0_014654_fu_212;
reg   [31:0] p_0_0_0_0_013156_fu_216;
reg   [31:0] p_0_0_0_0_058_fu_220;
reg   [31:0] p_0_0_0_0_014660_fu_224;
reg   [31:0] p_0_0_0_0_013162_fu_228;
reg   [31:0] p_0_0_0_0_064_fu_232;
reg    ap_block_pp0_stage0_01001;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 i_1_fu_112 = 4'd0;
#0 p_0_0_0_0_01466_fu_116 = 32'd0;
#0 p_0_0_0_0_01318_fu_120 = 32'd0;
#0 p_0_0_0_0_010_fu_124 = 32'd0;
#0 p_0_0_0_0_014612_fu_128 = 32'd0;
#0 p_0_0_0_0_013114_fu_132 = 32'd0;
#0 p_0_0_0_0_016_fu_136 = 32'd0;
#0 p_0_0_0_0_014618_fu_140 = 32'd0;
#0 p_0_0_0_0_013120_fu_144 = 32'd0;
#0 p_0_0_0_0_022_fu_148 = 32'd0;
#0 p_0_0_0_0_014624_fu_152 = 32'd0;
#0 p_0_0_0_0_013126_fu_156 = 32'd0;
#0 p_0_0_0_0_028_fu_160 = 32'd0;
#0 p_0_0_0_0_014630_fu_164 = 32'd0;
#0 p_0_0_0_0_013132_fu_168 = 32'd0;
#0 p_0_0_0_0_034_fu_172 = 32'd0;
#0 p_0_0_0_0_014636_fu_176 = 32'd0;
#0 p_0_0_0_0_013138_fu_180 = 32'd0;
#0 p_0_0_0_0_040_fu_184 = 32'd0;
#0 p_0_0_0_0_014642_fu_188 = 32'd0;
#0 p_0_0_0_0_013144_fu_192 = 32'd0;
#0 p_0_0_0_0_046_fu_196 = 32'd0;
#0 p_0_0_0_0_014648_fu_200 = 32'd0;
#0 p_0_0_0_0_013150_fu_204 = 32'd0;
#0 p_0_0_0_0_052_fu_208 = 32'd0;
#0 p_0_0_0_0_014654_fu_212 = 32'd0;
#0 p_0_0_0_0_013156_fu_216 = 32'd0;
#0 p_0_0_0_0_058_fu_220 = 32'd0;
#0 p_0_0_0_0_014660_fu_224 = 32'd0;
#0 p_0_0_0_0_013162_fu_228 = 32'd0;
#0 p_0_0_0_0_064_fu_232 = 32'd0;
#0 ap_done_reg = 1'b0;
end

krnl_globalSort_L1_L2_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln785_fu_497_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_1_fu_112 <= add_ln785_fu_491_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_1_fu_112 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_reg_1356 <= ap_sig_allocacmp_i;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (i_reg_1356 == 4'd8))) begin
        p_0_0_0_0_010_fu_124 <= v2_id_data_fu_531_p1;
        p_0_0_0_0_01318_fu_120 <= v1_id_data_fu_524_p1;
        p_0_0_0_0_01466_fu_116 <= v0_id_data_fu_517_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (i_reg_1356 == 4'd7))) begin
        p_0_0_0_0_013114_fu_132 <= v1_id_data_fu_524_p1;
        p_0_0_0_0_014612_fu_128 <= v0_id_data_fu_517_p1;
        p_0_0_0_0_016_fu_136 <= v2_id_data_fu_531_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (i_reg_1356 == 4'd6))) begin
        p_0_0_0_0_013120_fu_144 <= v1_id_data_fu_524_p1;
        p_0_0_0_0_014618_fu_140 <= v0_id_data_fu_517_p1;
        p_0_0_0_0_022_fu_148 <= v2_id_data_fu_531_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (i_reg_1356 == 4'd5))) begin
        p_0_0_0_0_013126_fu_156 <= v1_id_data_fu_524_p1;
        p_0_0_0_0_014624_fu_152 <= v0_id_data_fu_517_p1;
        p_0_0_0_0_028_fu_160 <= v2_id_data_fu_531_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (i_reg_1356 == 4'd4))) begin
        p_0_0_0_0_013132_fu_168 <= v1_id_data_fu_524_p1;
        p_0_0_0_0_014630_fu_164 <= v0_id_data_fu_517_p1;
        p_0_0_0_0_034_fu_172 <= v2_id_data_fu_531_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (i_reg_1356 == 4'd3))) begin
        p_0_0_0_0_013138_fu_180 <= v1_id_data_fu_524_p1;
        p_0_0_0_0_014636_fu_176 <= v0_id_data_fu_517_p1;
        p_0_0_0_0_040_fu_184 <= v2_id_data_fu_531_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (i_reg_1356 == 4'd2))) begin
        p_0_0_0_0_013144_fu_192 <= v1_id_data_fu_524_p1;
        p_0_0_0_0_014642_fu_188 <= v0_id_data_fu_517_p1;
        p_0_0_0_0_046_fu_196 <= v2_id_data_fu_531_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (i_reg_1356 == 4'd1))) begin
        p_0_0_0_0_013150_fu_204 <= v1_id_data_fu_524_p1;
        p_0_0_0_0_014648_fu_200 <= v0_id_data_fu_517_p1;
        p_0_0_0_0_052_fu_208 <= v2_id_data_fu_531_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (i_reg_1356 == 4'd0))) begin
        p_0_0_0_0_013156_fu_216 <= v1_id_data_fu_524_p1;
        p_0_0_0_0_014654_fu_212 <= v0_id_data_fu_517_p1;
        p_0_0_0_0_058_fu_220 <= v2_id_data_fu_531_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((~(i_reg_1356 == 4'd0) & ~(i_reg_1356 == 4'd1) & ~(i_reg_1356 == 4'd2) & ~(i_reg_1356 == 4'd3) & ~(i_reg_1356 == 4'd4) & ~(i_reg_1356 == 4'd5) & ~(i_reg_1356 == 4'd6) & ~(i_reg_1356 == 4'd7) & ~(i_reg_1356 == 4'd8) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_0_0_0_0_013162_fu_228 <= v1_id_data_fu_524_p1;
        p_0_0_0_0_014660_fu_224 <= v0_id_data_fu_517_p1;
        p_0_0_0_0_064_fu_232 <= v2_id_data_fu_531_p1;
    end
end

always @ (*) begin
    if (((icmp_ln785_fu_497_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i = 4'd0;
    end else begin
        ap_sig_allocacmp_i = i_1_fu_112;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in_id0_s_blk_n = in_id0_s_empty_n;
    end else begin
        in_id0_s_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in_id0_s_read = 1'b1;
    end else begin
        in_id0_s_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in_id1_s_blk_n = in_id1_s_empty_n;
    end else begin
        in_id1_s_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in_id1_s_read = 1'b1;
    end else begin
        in_id1_s_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in_id2_s_blk_n = in_id2_s_empty_n;
    end else begin
        in_id2_s_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in_id2_s_read = 1'b1;
    end else begin
        in_id2_s_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln785_fu_497_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_0_0_0_0_010_out_ap_vld = 1'b1;
    end else begin
        p_0_0_0_0_010_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln785_fu_497_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_0_0_0_0_013114_out_ap_vld = 1'b1;
    end else begin
        p_0_0_0_0_013114_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln785_fu_497_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_0_0_0_0_013120_out_ap_vld = 1'b1;
    end else begin
        p_0_0_0_0_013120_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln785_fu_497_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_0_0_0_0_013126_out_ap_vld = 1'b1;
    end else begin
        p_0_0_0_0_013126_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln785_fu_497_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_0_0_0_0_013132_out_ap_vld = 1'b1;
    end else begin
        p_0_0_0_0_013132_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln785_fu_497_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_0_0_0_0_013138_out_ap_vld = 1'b1;
    end else begin
        p_0_0_0_0_013138_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln785_fu_497_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_0_0_0_0_013144_out_ap_vld = 1'b1;
    end else begin
        p_0_0_0_0_013144_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln785_fu_497_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_0_0_0_0_013150_out_ap_vld = 1'b1;
    end else begin
        p_0_0_0_0_013150_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln785_fu_497_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_0_0_0_0_013156_out_ap_vld = 1'b1;
    end else begin
        p_0_0_0_0_013156_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln785_fu_497_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_0_0_0_0_013162_out_ap_vld = 1'b1;
    end else begin
        p_0_0_0_0_013162_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln785_fu_497_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_0_0_0_0_01318_out_ap_vld = 1'b1;
    end else begin
        p_0_0_0_0_01318_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln785_fu_497_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_0_0_0_0_014612_out_ap_vld = 1'b1;
    end else begin
        p_0_0_0_0_014612_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln785_fu_497_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_0_0_0_0_014618_out_ap_vld = 1'b1;
    end else begin
        p_0_0_0_0_014618_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln785_fu_497_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_0_0_0_0_014624_out_ap_vld = 1'b1;
    end else begin
        p_0_0_0_0_014624_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln785_fu_497_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_0_0_0_0_014630_out_ap_vld = 1'b1;
    end else begin
        p_0_0_0_0_014630_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln785_fu_497_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_0_0_0_0_014636_out_ap_vld = 1'b1;
    end else begin
        p_0_0_0_0_014636_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln785_fu_497_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_0_0_0_0_014642_out_ap_vld = 1'b1;
    end else begin
        p_0_0_0_0_014642_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln785_fu_497_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_0_0_0_0_014648_out_ap_vld = 1'b1;
    end else begin
        p_0_0_0_0_014648_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln785_fu_497_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_0_0_0_0_014654_out_ap_vld = 1'b1;
    end else begin
        p_0_0_0_0_014654_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln785_fu_497_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_0_0_0_0_014660_out_ap_vld = 1'b1;
    end else begin
        p_0_0_0_0_014660_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln785_fu_497_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_0_0_0_0_01466_out_ap_vld = 1'b1;
    end else begin
        p_0_0_0_0_01466_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln785_fu_497_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_0_0_0_0_016_out_ap_vld = 1'b1;
    end else begin
        p_0_0_0_0_016_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln785_fu_497_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_0_0_0_0_022_out_ap_vld = 1'b1;
    end else begin
        p_0_0_0_0_022_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln785_fu_497_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_0_0_0_0_028_out_ap_vld = 1'b1;
    end else begin
        p_0_0_0_0_028_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln785_fu_497_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_0_0_0_0_034_out_ap_vld = 1'b1;
    end else begin
        p_0_0_0_0_034_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln785_fu_497_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_0_0_0_0_040_out_ap_vld = 1'b1;
    end else begin
        p_0_0_0_0_040_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln785_fu_497_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_0_0_0_0_046_out_ap_vld = 1'b1;
    end else begin
        p_0_0_0_0_046_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln785_fu_497_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_0_0_0_0_052_out_ap_vld = 1'b1;
    end else begin
        p_0_0_0_0_052_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln785_fu_497_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_0_0_0_0_058_out_ap_vld = 1'b1;
    end else begin
        p_0_0_0_0_058_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln785_fu_497_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_0_0_0_0_064_out_ap_vld = 1'b1;
    end else begin
        p_0_0_0_0_064_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln785_fu_491_p2 = (ap_sig_allocacmp_i + 4'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = ((in_id2_s_empty_n == 1'b0) | (in_id1_s_empty_n == 1'b0) | (in_id0_s_empty_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign icmp_ln785_fu_497_p2 = ((ap_sig_allocacmp_i == 4'd10) ? 1'b1 : 1'b0);

assign p_0_0_0_0_010_out = p_0_0_0_0_010_fu_124;

assign p_0_0_0_0_013114_out = p_0_0_0_0_013114_fu_132;

assign p_0_0_0_0_013120_out = p_0_0_0_0_013120_fu_144;

assign p_0_0_0_0_013126_out = p_0_0_0_0_013126_fu_156;

assign p_0_0_0_0_013132_out = p_0_0_0_0_013132_fu_168;

assign p_0_0_0_0_013138_out = p_0_0_0_0_013138_fu_180;

assign p_0_0_0_0_013144_out = p_0_0_0_0_013144_fu_192;

assign p_0_0_0_0_013150_out = p_0_0_0_0_013150_fu_204;

assign p_0_0_0_0_013156_out = p_0_0_0_0_013156_fu_216;

assign p_0_0_0_0_013162_out = p_0_0_0_0_013162_fu_228;

assign p_0_0_0_0_01318_out = p_0_0_0_0_01318_fu_120;

assign p_0_0_0_0_014612_out = p_0_0_0_0_014612_fu_128;

assign p_0_0_0_0_014618_out = p_0_0_0_0_014618_fu_140;

assign p_0_0_0_0_014624_out = p_0_0_0_0_014624_fu_152;

assign p_0_0_0_0_014630_out = p_0_0_0_0_014630_fu_164;

assign p_0_0_0_0_014636_out = p_0_0_0_0_014636_fu_176;

assign p_0_0_0_0_014642_out = p_0_0_0_0_014642_fu_188;

assign p_0_0_0_0_014648_out = p_0_0_0_0_014648_fu_200;

assign p_0_0_0_0_014654_out = p_0_0_0_0_014654_fu_212;

assign p_0_0_0_0_014660_out = p_0_0_0_0_014660_fu_224;

assign p_0_0_0_0_01466_out = p_0_0_0_0_01466_fu_116;

assign p_0_0_0_0_016_out = p_0_0_0_0_016_fu_136;

assign p_0_0_0_0_022_out = p_0_0_0_0_022_fu_148;

assign p_0_0_0_0_028_out = p_0_0_0_0_028_fu_160;

assign p_0_0_0_0_034_out = p_0_0_0_0_034_fu_172;

assign p_0_0_0_0_040_out = p_0_0_0_0_040_fu_184;

assign p_0_0_0_0_046_out = p_0_0_0_0_046_fu_196;

assign p_0_0_0_0_052_out = p_0_0_0_0_052_fu_208;

assign p_0_0_0_0_058_out = p_0_0_0_0_058_fu_220;

assign p_0_0_0_0_064_out = p_0_0_0_0_064_fu_232;

assign v0_id_data_fu_517_p1 = in_id0_s_dout[31:0];

assign v1_id_data_fu_524_p1 = in_id1_s_dout[31:0];

assign v2_id_data_fu_531_p1 = in_id2_s_dout[31:0];

endmodule //krnl_globalSort_L1_L2_krnl_globalSort_L1_L2_Pipeline_VITIS_LOOP_785_2
