// ==============================================================
// Generated by Vitis HLS v2023.2.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module krnl_partialKnn_wrapper_11_merge_dual_all_PEs (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        local_kNearstDist_partial_a_address0,
        local_kNearstDist_partial_a_ce0,
        local_kNearstDist_partial_a_q0,
        local_kNearstDist_partial_b_address0,
        local_kNearstDist_partial_b_ce0,
        local_kNearstDist_partial_b_q0,
        local_kNearstId_partial_a_address0,
        local_kNearstId_partial_a_ce0,
        local_kNearstId_partial_a_q0,
        local_kNearstId_partial_b_address0,
        local_kNearstId_partial_b_ce0,
        local_kNearstId_partial_b_q0,
        dist_r_address0,
        dist_r_ce0,
        dist_r_we0,
        dist_r_d0,
        id_address0,
        id_ce0,
        id_we0,
        id_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] local_kNearstDist_partial_a_address0;
output   local_kNearstDist_partial_a_ce0;
input  [31:0] local_kNearstDist_partial_a_q0;
output  [3:0] local_kNearstDist_partial_b_address0;
output   local_kNearstDist_partial_b_ce0;
input  [31:0] local_kNearstDist_partial_b_q0;
output  [3:0] local_kNearstId_partial_a_address0;
output   local_kNearstId_partial_a_ce0;
input  [31:0] local_kNearstId_partial_a_q0;
output  [3:0] local_kNearstId_partial_b_address0;
output   local_kNearstId_partial_b_ce0;
input  [31:0] local_kNearstId_partial_b_q0;
output  [3:0] dist_r_address0;
output   dist_r_ce0;
output   dist_r_we0;
output  [31:0] dist_r_d0;
output  [3:0] id_address0;
output   id_ce0;
output   id_we0;
output  [31:0] id_d0;

reg ap_idle;
reg local_kNearstDist_partial_a_ce0;
reg local_kNearstDist_partial_b_ce0;
reg local_kNearstId_partial_a_ce0;
reg local_kNearstId_partial_b_ce0;
reg dist_r_ce0;
reg dist_r_we0;
reg[31:0] dist_r_d0;
reg id_ce0;
reg id_we0;
reg[31:0] id_d0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] tmp_3_fu_220_p3;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
reg   [4:0] i_2_reg_447;
reg   [4:0] i_2_reg_447_pp0_iter2_reg;
reg   [31:0] idx_a_2_reg_452;
reg   [31:0] idx_b_2_reg_457;
wire   [63:0] zext_ln241_fu_228_p1;
reg   [63:0] zext_ln241_reg_466;
wire   [63:0] zext_ln241_1_fu_237_p1;
reg   [63:0] zext_ln241_1_reg_476;
reg   [31:0] local_kNearstDist_partial_a_load_reg_486;
reg   [31:0] local_kNearstDist_partial_b_load_reg_492;
wire   [0:0] and_ln241_1_fu_350_p2;
reg   [0:0] and_ln241_1_reg_498;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln239_fu_398_p1;
reg   [4:0] i_fu_60;
wire   [4:0] add_ln239_fu_246_p2;
wire    ap_loop_init;
reg   [31:0] idx_a_fu_64;
wire   [31:0] idx_a_3_fu_381_p2;
reg   [31:0] ap_sig_allocacmp_idx_a_2;
reg   [31:0] idx_b_fu_68;
wire   [31:0] idx_b_3_fu_360_p2;
reg   [31:0] ap_sig_allocacmp_idx_b_2;
wire   [31:0] bitcast_ln241_fu_264_p1;
wire   [31:0] bitcast_ln241_1_fu_282_p1;
wire   [7:0] tmp_fu_268_p4;
wire   [22:0] trunc_ln241_fu_278_p1;
wire   [0:0] icmp_ln241_1_fu_306_p2;
wire   [0:0] icmp_ln241_fu_300_p2;
wire   [7:0] tmp_1_fu_286_p4;
wire   [22:0] trunc_ln241_1_fu_296_p1;
wire   [0:0] icmp_ln241_3_fu_324_p2;
wire   [0:0] icmp_ln241_2_fu_318_p2;
wire   [0:0] or_ln241_fu_312_p2;
wire   [0:0] or_ln241_1_fu_330_p2;
wire   [0:0] and_ln241_fu_336_p2;
wire   [0:0] tmp_2_fu_152_p2;
wire    ap_block_pp0_stage0_00001;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 i_fu_60 = 5'd0;
#0 idx_a_fu_64 = 32'd0;
#0 idx_b_fu_68 = 32'd0;
#0 ap_done_reg = 1'b0;
end

krnl_partialKnn_wrapper_11_fcmp_32ns_32ns_1_1_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_1_no_dsp_1_U595(
    .din0(local_kNearstDist_partial_a_q0),
    .din1(local_kNearstDist_partial_b_q0),
    .opcode(5'd4),
    .dout(tmp_2_fu_152_p2)
);

krnl_partialKnn_wrapper_11_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            i_fu_60 <= 5'd10;
        end else if (((tmp_3_fu_220_p3 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            i_fu_60 <= add_ln239_fu_246_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            idx_a_fu_64 <= 32'd10;
        end else if (((1'd1 == and_ln241_1_fu_350_p2) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
            idx_a_fu_64 <= idx_a_3_fu_381_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            idx_b_fu_68 <= 32'd10;
        end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'd0 == and_ln241_1_fu_350_p2))) begin
            idx_b_fu_68 <= idx_b_3_fu_360_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        and_ln241_1_reg_498 <= and_ln241_1_fu_350_p2;
        i_2_reg_447_pp0_iter2_reg <= i_2_reg_447;
        local_kNearstDist_partial_a_load_reg_486 <= local_kNearstDist_partial_a_q0;
        local_kNearstDist_partial_b_load_reg_492 <= local_kNearstDist_partial_b_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
        i_2_reg_447 <= i_fu_60;
        idx_a_2_reg_452 <= ap_sig_allocacmp_idx_a_2;
        idx_b_2_reg_457 <= ap_sig_allocacmp_idx_b_2;
        zext_ln241_1_reg_476[31 : 0] <= zext_ln241_1_fu_237_p1[31 : 0];
        zext_ln241_reg_466[31 : 0] <= zext_ln241_fu_228_p1[31 : 0];
    end
end

always @ (*) begin
    if (((tmp_3_fu_220_p3 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln241_1_fu_350_p2) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_sig_allocacmp_idx_a_2 = idx_a_3_fu_381_p2;
    end else begin
        ap_sig_allocacmp_idx_a_2 = idx_a_fu_64;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'd0 == and_ln241_1_fu_350_p2))) begin
        ap_sig_allocacmp_idx_b_2 = idx_b_3_fu_360_p2;
    end else begin
        ap_sig_allocacmp_idx_b_2 = idx_b_fu_68;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'd0 == and_ln241_1_reg_498)) | ((1'd1 == and_ln241_1_reg_498) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1)))) begin
        dist_r_ce0 = 1'b1;
    end else begin
        dist_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        if ((1'd1 == and_ln241_1_reg_498)) begin
            dist_r_d0 = local_kNearstDist_partial_a_load_reg_486;
        end else if ((1'd0 == and_ln241_1_reg_498)) begin
            dist_r_d0 = local_kNearstDist_partial_b_load_reg_492;
        end else begin
            dist_r_d0 = 'bx;
        end
    end else begin
        dist_r_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'd0 == and_ln241_1_reg_498)) | ((1'd1 == and_ln241_1_reg_498) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1)))) begin
        dist_r_we0 = 1'b1;
    end else begin
        dist_r_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'd0 == and_ln241_1_reg_498)) | ((1'd1 == and_ln241_1_reg_498) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1)))) begin
        id_ce0 = 1'b1;
    end else begin
        id_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        if ((1'd1 == and_ln241_1_reg_498)) begin
            id_d0 = local_kNearstId_partial_a_q0;
        end else if ((1'd0 == and_ln241_1_reg_498)) begin
            id_d0 = local_kNearstId_partial_b_q0;
        end else begin
            id_d0 = 'bx;
        end
    end else begin
        id_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'd0 == and_ln241_1_reg_498)) | ((1'd1 == and_ln241_1_reg_498) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1)))) begin
        id_we0 = 1'b1;
    end else begin
        id_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        local_kNearstDist_partial_a_ce0 = 1'b1;
    end else begin
        local_kNearstDist_partial_a_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        local_kNearstDist_partial_b_ce0 = 1'b1;
    end else begin
        local_kNearstDist_partial_b_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        local_kNearstId_partial_a_ce0 = 1'b1;
    end else begin
        local_kNearstId_partial_a_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        local_kNearstId_partial_b_ce0 = 1'b1;
    end else begin
        local_kNearstId_partial_b_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln239_fu_246_p2 = ($signed(i_fu_60) + $signed(5'd31));

assign and_ln241_1_fu_350_p2 = (tmp_2_fu_152_p2 & and_ln241_fu_336_p2);

assign and_ln241_fu_336_p2 = (or_ln241_fu_312_p2 & or_ln241_1_fu_330_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign bitcast_ln241_1_fu_282_p1 = local_kNearstDist_partial_b_q0;

assign bitcast_ln241_fu_264_p1 = local_kNearstDist_partial_a_q0;

assign dist_r_address0 = zext_ln239_fu_398_p1;

assign icmp_ln241_1_fu_306_p2 = ((trunc_ln241_fu_278_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln241_2_fu_318_p2 = ((tmp_1_fu_286_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln241_3_fu_324_p2 = ((trunc_ln241_1_fu_296_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln241_fu_300_p2 = ((tmp_fu_268_p4 != 8'd255) ? 1'b1 : 1'b0);

assign id_address0 = zext_ln239_fu_398_p1;

assign idx_a_3_fu_381_p2 = ($signed(idx_a_2_reg_452) + $signed(32'd4294967295));

assign idx_b_3_fu_360_p2 = ($signed(idx_b_2_reg_457) + $signed(32'd4294967295));

assign local_kNearstDist_partial_a_address0 = zext_ln241_fu_228_p1;

assign local_kNearstDist_partial_b_address0 = zext_ln241_1_fu_237_p1;

assign local_kNearstId_partial_a_address0 = zext_ln241_reg_466;

assign local_kNearstId_partial_b_address0 = zext_ln241_1_reg_476;

assign or_ln241_1_fu_330_p2 = (icmp_ln241_3_fu_324_p2 | icmp_ln241_2_fu_318_p2);

assign or_ln241_fu_312_p2 = (icmp_ln241_fu_300_p2 | icmp_ln241_1_fu_306_p2);

assign tmp_1_fu_286_p4 = {{bitcast_ln241_1_fu_282_p1[30:23]}};

assign tmp_3_fu_220_p3 = i_fu_60[32'd4];

assign tmp_fu_268_p4 = {{bitcast_ln241_fu_264_p1[30:23]}};

assign trunc_ln241_1_fu_296_p1 = bitcast_ln241_1_fu_282_p1[22:0];

assign trunc_ln241_fu_278_p1 = bitcast_ln241_fu_264_p1[22:0];

assign zext_ln239_fu_398_p1 = i_2_reg_447_pp0_iter2_reg;

assign zext_ln241_1_fu_237_p1 = ap_sig_allocacmp_idx_b_2;

assign zext_ln241_fu_228_p1 = ap_sig_allocacmp_idx_a_2;

always @ (posedge ap_clk) begin
    zext_ln241_reg_466[63:32] <= 32'b00000000000000000000000000000000;
    zext_ln241_1_reg_476[63:32] <= 32'b00000000000000000000000000000000;
end

endmodule //krnl_partialKnn_wrapper_11_merge_dual_all_PEs
