`timescale 1 ns / 1 ps
// ==============================================================
// Generated by Vitis HLS v2023.2.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
 
module krnl_partialKnn_wrapper_21_load_Pipeline_VITIS_LOOP_54_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        searchSpace_0_read_data_s_dout,
        searchSpace_0_read_data_s_empty_n,
        searchSpace_0_read_data_s_read,
        zext_ln54,
        searchSpace_read_addr_offset_val,
        searchSpace_0_read_addr_s_din,
        searchSpace_0_read_addr_s_full_n,
        searchSpace_0_read_addr_s_write,
        local_SP_address0,
        local_SP_ce0,
        local_SP_we0,
        local_SP_d0
);
parameter    ap_ST_fsm_pp0_stage0 = 1'd1;
input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [256:0] searchSpace_0_read_data_s_dout;
input   searchSpace_0_read_data_s_empty_n;
output   searchSpace_0_read_data_s_read;
input  [12:0] zext_ln54;
input  [63:0] searchSpace_read_addr_offset_val;
output  [63:0] searchSpace_0_read_addr_s_din;
input   searchSpace_0_read_addr_s_full_n;
output   searchSpace_0_read_addr_s_write;
output  [10:0] local_SP_address0;
output   local_SP_ce0;
output   local_SP_we0;
output  [255:0] local_SP_d0;
reg ap_idle;
reg searchSpace_0_read_data_s_read;
reg searchSpace_0_read_addr_s_write;
reg local_SP_ce0;
reg local_SP_we0;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln54_fu_162_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [31:0] zext_ln54_cast_fu_118_p1;
reg   [31:0] zext_ln54_cast_reg_307;
reg   [31:0] i_resp_1_reg_312;
reg   [0:0] icmp_ln54_reg_317;
wire   [0:0] tmp_1_nbreadreq_fu_80_p3;
reg   [0:0] tmp_1_reg_321;
wire   [255:0] elem_val_fu_174_p1;
reg   [255:0] elem_val_reg_325;
wire   [63:0] zext_ln61_fu_271_p1;
wire    ap_block_pp0_stage0;
reg   [31:0] i_resp_fu_60;
wire   [31:0] i_resp_2_fu_178_p2;
wire    ap_loop_init;
reg   [31:0] ap_sig_allocacmp_i_resp_1;
reg   [31:0] i_req_fu_64;
wire   [31:0] select_ln57_fu_251_p3;
wire   [0:0] icmp_ln57_fu_217_p2;
wire    ap_block_pp0_stage0_01001;
wire   [20:0] tmp_4_fu_152_p4;
wire   [20:0] tmp_5_fu_207_p4;
wire   [31:0] addr_fu_202_p2;
wire   [36:0] shl_ln_fu_223_p3;
wire  signed [63:0] sext_ln25_fu_231_p1;
wire   [0:0] select_ln57_fu_251_p0;
wire   [31:0] add_ln58_fu_245_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_224;
reg    ap_condition_227;
wire    ap_ce_reg;
// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 i_resp_fu_60 = 32'd0;
#0 i_req_fu_64 = 32'd0;
#0 ap_done_reg = 1'b0;
end
krnl_partialKnn_wrapper_21_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);
always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end
always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end
always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end
always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        if (((ap_loop_exit_ready == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_loop_exit_ready_pp0_iter1_reg <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_11001)) begin
            ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        end
    end
end
always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            i_req_fu_64 <= 32'd0;
        end else if ((1'b1 == ap_condition_224)) begin
            i_req_fu_64 <= select_ln57_fu_251_p3;
        end
    end
end
always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((1'b1 == ap_condition_227)) begin
            i_resp_fu_60 <= i_resp_2_fu_178_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_resp_fu_60 <= 32'd0;
        end
    end
end
always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        elem_val_reg_325 <= elem_val_fu_174_p1;
        i_resp_1_reg_312 <= ap_sig_allocacmp_i_resp_1;
        icmp_ln54_reg_317 <= icmp_ln54_fu_162_p2;
        tmp_1_reg_321 <= tmp_1_nbreadreq_fu_80_p3;
        zext_ln54_cast_reg_307[12 : 0] <= zext_ln54_cast_fu_118_p1[12 : 0];
    end
end
always @ (*) begin
    if (((icmp_ln54_fu_162_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end
always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end
always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end
always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end
always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end
always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i_resp_1 = 32'd0;
    end else begin
        ap_sig_allocacmp_i_resp_1 = i_resp_fu_60;
    end
end
always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        local_SP_ce0 = 1'b1;
    end else begin
        local_SP_ce0 = 1'b0;
    end
end
always @ (*) begin
    if (((tmp_1_reg_321 == 1'd1) & (icmp_ln54_reg_317 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        local_SP_we0 = 1'b1;
    end else begin
        local_SP_we0 = 1'b0;
    end
end
always @ (*) begin
    if (((icmp_ln54_reg_317 == 1'd1) & (searchSpace_0_read_addr_s_full_n == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln57_fu_217_p2 == 1'd1))) begin
        searchSpace_0_read_addr_s_write = 1'b1;
    end else begin
        searchSpace_0_read_addr_s_write = 1'b0;
    end
end
always @ (*) begin
    if (((tmp_1_nbreadreq_fu_80_p3 == 1'd1) & (searchSpace_0_read_data_s_empty_n == 1'b1) & (icmp_ln54_fu_162_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        searchSpace_0_read_data_s_read = 1'b1;
    end else begin
        searchSpace_0_read_data_s_read = 1'b0;
    end
end
always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end
assign add_ln58_fu_245_p2 = (i_req_fu_64 + 32'd1);
assign addr_fu_202_p2 = (i_req_fu_64 + zext_ln54_cast_reg_307);
assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];
assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);
assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);
assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);
assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);
always @ (*) begin
    ap_condition_224 = ((icmp_ln54_reg_317 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln57_fu_217_p2 == 1'd1));
end
always @ (*) begin
    ap_condition_227 = ((tmp_1_nbreadreq_fu_80_p3 == 1'd1) & (icmp_ln54_fu_162_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1));
end
assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);
assign ap_enable_reg_pp0_iter0 = ap_start_int;
assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;
assign elem_val_fu_174_p1 = searchSpace_0_read_data_s_dout[255:0];
assign i_resp_2_fu_178_p2 = (ap_sig_allocacmp_i_resp_1 + 32'd1);
assign icmp_ln54_fu_162_p2 = (($signed(tmp_4_fu_152_p4) < $signed(21'd1)) ? 1'b1 : 1'b0);
assign icmp_ln57_fu_217_p2 = (($signed(tmp_5_fu_207_p4) < $signed(21'd1)) ? 1'b1 : 1'b0);
assign local_SP_address0 = zext_ln61_fu_271_p1;
assign local_SP_d0 = elem_val_reg_325;
assign searchSpace_0_read_addr_s_din = ($signed(sext_ln25_fu_231_p1) + $signed(searchSpace_read_addr_offset_val));
assign select_ln57_fu_251_p0 = searchSpace_0_read_addr_s_full_n;
assign select_ln57_fu_251_p3 = ((select_ln57_fu_251_p0[0:0] == 1'b1) ? add_ln58_fu_245_p2 : i_req_fu_64);
assign sext_ln25_fu_231_p1 = $signed(shl_ln_fu_223_p3);
assign shl_ln_fu_223_p3 = {{addr_fu_202_p2}, {5'd0}};
assign tmp_1_nbreadreq_fu_80_p3 = searchSpace_0_read_data_s_empty_n;
assign tmp_4_fu_152_p4 = {{ap_sig_allocacmp_i_resp_1[31:11]}};
assign tmp_5_fu_207_p4 = {{i_req_fu_64[31:11]}};
assign zext_ln54_cast_fu_118_p1 = zext_ln54;
assign zext_ln61_fu_271_p1 = i_resp_1_reg_312;
always @ (posedge ap_clk) begin
    zext_ln54_cast_reg_307[31:13] <= 19'b0000000000000000000;
end
endmodule