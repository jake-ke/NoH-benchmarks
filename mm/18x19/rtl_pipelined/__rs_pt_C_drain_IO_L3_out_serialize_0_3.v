// ==================================================
// RTL generated by RapidStream
//
// Copyright 2024 RapidStream Design Automation, Inc.
// All Rights Reserved.
// ==================================================
`timescale 1 ns / 1 ps
/**   Generated by RapidStream   **/
module __rs_pt_C_drain_IO_L3_out_serialize_0_3 #(
    parameter ap_ST_fsm_state1       = 3'd1,
    parameter ap_ST_fsm_state2       = 3'd2,
    parameter ap_ST_fsm_state3       = 3'd4,
    parameter C_M_AXI_C_ID_WIDTH     = 1,
    parameter C_M_AXI_C_ADDR_WIDTH   = 64,
    parameter C_M_AXI_C_DATA_WIDTH   = 512,
    parameter C_M_AXI_C_AWUSER_WIDTH = 1,
    parameter C_M_AXI_C_ARUSER_WIDTH = 1,
    parameter C_M_AXI_C_WUSER_WIDTH  = 1,
    parameter C_M_AXI_C_RUSER_WIDTH  = 1,
    parameter C_M_AXI_C_BUSER_WIDTH  = 1,
    parameter C_M_AXI_C_USER_VALUE   = 0,
    parameter C_M_AXI_C_PROT_VALUE   = 0,
    parameter C_M_AXI_C_CACHE_VALUE  = 3,
    parameter C_M_AXI_DATA_WIDTH     = 32,
    parameter C_M_AXI_C_WSTRB_WIDTH  = 64,
    parameter C_M_AXI_WSTRB_WIDTH    = 4
) (
    output wire [ (C_M_AXI_C_DATA_WIDTH - 1):0] __rs_pt_m_axi_C_RDATA,
    output wire [   (C_M_AXI_C_ID_WIDTH - 1):0] __rs_pt_m_axi_C_RID,
    output wire                                 __rs_pt_m_axi_C_RLAST,
    input wire                                  __rs_pt_m_axi_C_RREADY,
    output wire [                          1:0] __rs_pt_m_axi_C_RRESP,
    output wire [(C_M_AXI_C_RUSER_WIDTH - 1):0] __rs_pt_m_axi_C_RUSER,
    output wire                                 __rs_pt_m_axi_C_RVALID,
    input wire                                  ap_clk,
    input wire                                  ap_rst_n,
    input wire  [ (C_M_AXI_C_DATA_WIDTH - 1):0] m_axi_C_RDATA,
    input wire  [   (C_M_AXI_C_ID_WIDTH - 1):0] m_axi_C_RID,
    input wire                                  m_axi_C_RLAST,
    output wire                                 m_axi_C_RREADY,
    input wire  [                          1:0] m_axi_C_RRESP,
    input wire  [(C_M_AXI_C_RUSER_WIDTH - 1):0] m_axi_C_RUSER,
    input wire                                  m_axi_C_RVALID
);




__rs_pass_through #(
    .WIDTH (( ( C_M_AXI_C_DATA_WIDTH - 1 ) - ( 0 ) + 1 ))
) __rs_pt_C_drain_IO_L3_out_serialize_m_axi_C_RDATA_inst /**   Generated by RapidStream   **/ (
    .din  (m_axi_C_RDATA),
    .dout (__rs_pt_m_axi_C_RDATA)
);


__rs_pass_through #(
    .WIDTH (( ( C_M_AXI_C_ID_WIDTH - 1 ) - ( 0 ) + 1 ))
) __rs_pt_C_drain_IO_L3_out_serialize_m_axi_C_RID_inst /**   Generated by RapidStream   **/ (
    .din  (m_axi_C_RID),
    .dout (__rs_pt_m_axi_C_RID)
);


__rs_pass_through #(
    .WIDTH (1)
) __rs_pt_C_drain_IO_L3_out_serialize_m_axi_C_RLAST_inst /**   Generated by RapidStream   **/ (
    .din  (m_axi_C_RLAST),
    .dout (__rs_pt_m_axi_C_RLAST)
);


__rs_pass_through #(
    .WIDTH (1)
) __rs_pt_C_drain_IO_L3_out_serialize_m_axi_C_RREADY_inst /**   Generated by RapidStream   **/ (
    .din  (__rs_pt_m_axi_C_RREADY),
    .dout (m_axi_C_RREADY)
);


__rs_pass_through #(
    .WIDTH (2)
) __rs_pt_C_drain_IO_L3_out_serialize_m_axi_C_RRESP_inst /**   Generated by RapidStream   **/ (
    .din  (m_axi_C_RRESP),
    .dout (__rs_pt_m_axi_C_RRESP)
);


__rs_pass_through #(
    .WIDTH (( ( C_M_AXI_C_RUSER_WIDTH - 1 ) - ( 0 ) + 1 ))
) __rs_pt_C_drain_IO_L3_out_serialize_m_axi_C_RUSER_inst /**   Generated by RapidStream   **/ (
    .din  (m_axi_C_RUSER),
    .dout (__rs_pt_m_axi_C_RUSER)
);


__rs_pass_through #(
    .WIDTH (1)
) __rs_pt_C_drain_IO_L3_out_serialize_m_axi_C_RVALID_inst /**   Generated by RapidStream   **/ (
    .din  (m_axi_C_RVALID),
    .dout (__rs_pt_m_axi_C_RVALID)
);

endmodule  // __rs_pt_C_drain_IO_L3_out_serialize_0_3