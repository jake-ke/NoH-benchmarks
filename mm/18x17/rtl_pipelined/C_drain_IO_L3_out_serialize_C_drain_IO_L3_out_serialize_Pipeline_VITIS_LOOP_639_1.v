`timescale 1 ns / 1 ps
// ==============================================================
// Generated by Vitis HLS v2023.2.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
 
module C_drain_IO_L3_out_serialize_C_drain_IO_L3_out_serialize_Pipeline_VITIS_LOOP_639_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        fifo_C_drain_local_in_s_dout,
        fifo_C_drain_local_in_s_empty_n,
        fifo_C_drain_local_in_s_read,
        m_axi_C_AWVALID,
        m_axi_C_AWREADY,
        m_axi_C_AWADDR,
        m_axi_C_AWID,
        m_axi_C_AWLEN,
        m_axi_C_AWSIZE,
        m_axi_C_AWBURST,
        m_axi_C_AWLOCK,
        m_axi_C_AWCACHE,
        m_axi_C_AWPROT,
        m_axi_C_AWQOS,
        m_axi_C_AWREGION,
        m_axi_C_AWUSER,
        m_axi_C_WVALID,
        m_axi_C_WREADY,
        m_axi_C_WDATA,
        m_axi_C_WSTRB,
        m_axi_C_WLAST,
        m_axi_C_WID,
        m_axi_C_WUSER,
        m_axi_C_ARVALID,
        m_axi_C_ARREADY,
        m_axi_C_ARADDR,
        m_axi_C_ARID,
        m_axi_C_ARLEN,
        m_axi_C_ARSIZE,
        m_axi_C_ARBURST,
        m_axi_C_ARLOCK,
        m_axi_C_ARCACHE,
        m_axi_C_ARPROT,
        m_axi_C_ARQOS,
        m_axi_C_ARREGION,
        m_axi_C_ARUSER,
        m_axi_C_RVALID,
        m_axi_C_RREADY,
        m_axi_C_RDATA,
        m_axi_C_RLAST,
        m_axi_C_RID,
        m_axi_C_RFIFONUM,
        m_axi_C_RUSER,
        m_axi_C_RRESP,
        m_axi_C_BVALID,
        m_axi_C_BREADY,
        m_axi_C_BRESP,
        m_axi_C_BID,
        m_axi_C_BUSER,
        C_offset,
        zext_ln681,
        empty
);
parameter    ap_ST_fsm_pp0_stage0 = 4'd1;
parameter    ap_ST_fsm_pp0_stage1 = 4'd2;
parameter    ap_ST_fsm_pp0_stage2 = 4'd4;
parameter    ap_ST_fsm_pp0_stage3 = 4'd8;
input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [128:0] fifo_C_drain_local_in_s_dout;
input   fifo_C_drain_local_in_s_empty_n;
output   fifo_C_drain_local_in_s_read;
output   m_axi_C_AWVALID;
input   m_axi_C_AWREADY;
output  [63:0] m_axi_C_AWADDR;
output  [0:0] m_axi_C_AWID;
output  [31:0] m_axi_C_AWLEN;
output  [2:0] m_axi_C_AWSIZE;
output  [1:0] m_axi_C_AWBURST;
output  [1:0] m_axi_C_AWLOCK;
output  [3:0] m_axi_C_AWCACHE;
output  [2:0] m_axi_C_AWPROT;
output  [3:0] m_axi_C_AWQOS;
output  [3:0] m_axi_C_AWREGION;
output  [0:0] m_axi_C_AWUSER;
output   m_axi_C_WVALID;
input   m_axi_C_WREADY;
output  [511:0] m_axi_C_WDATA;
output  [63:0] m_axi_C_WSTRB;
output   m_axi_C_WLAST;
output  [0:0] m_axi_C_WID;
output  [0:0] m_axi_C_WUSER;
output   m_axi_C_ARVALID;
input   m_axi_C_ARREADY;
output  [63:0] m_axi_C_ARADDR;
output  [0:0] m_axi_C_ARID;
output  [31:0] m_axi_C_ARLEN;
output  [2:0] m_axi_C_ARSIZE;
output  [1:0] m_axi_C_ARBURST;
output  [1:0] m_axi_C_ARLOCK;
output  [3:0] m_axi_C_ARCACHE;
output  [2:0] m_axi_C_ARPROT;
output  [3:0] m_axi_C_ARQOS;
output  [3:0] m_axi_C_ARREGION;
output  [0:0] m_axi_C_ARUSER;
input   m_axi_C_RVALID;
output   m_axi_C_RREADY;
input  [511:0] m_axi_C_RDATA;
input   m_axi_C_RLAST;
input  [0:0] m_axi_C_RID;
input  [8:0] m_axi_C_RFIFONUM;
input  [0:0] m_axi_C_RUSER;
input  [1:0] m_axi_C_RRESP;
input   m_axi_C_BVALID;
output   m_axi_C_BREADY;
input  [1:0] m_axi_C_BRESP;
input  [0:0] m_axi_C_BID;
input  [0:0] m_axi_C_BUSER;
input  [63:0] C_offset;
input  [5:0] zext_ln681;
input  [5:0] empty;
reg ap_idle;
reg fifo_C_drain_local_in_s_read;
reg m_axi_C_AWVALID;
reg m_axi_C_WVALID;
reg[511:0] m_axi_C_WDATA;
reg[63:0] m_axi_C_WSTRB;
reg m_axi_C_BREADY;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage3;
reg   [0:0] icmp_ln639_reg_369;
reg    ap_block_state4_pp0_stage3_iter0;
reg    ap_block_pp0_stage3_subdone;
reg    ap_condition_exit_pp0_iter0_stage3;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    C_blk_n_B;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1;
reg    C_blk_n_AW;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_pp0_stage2;
reg    C_blk_n_W;
wire    ap_block_pp0_stage3;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln681_reg_413;
reg    fifo_C_drain_local_in_s_blk_n;
reg    ap_block_state5_pp0_stage0_iter1;
reg    ap_block_state9_io;
reg    ap_block_pp0_stage0_11001;
wire   [126:0] zext_ln681_cast_fu_147_p1;
reg   [126:0] zext_ln681_cast_reg_359;
reg   [9:0] i_1_reg_364;
reg   [9:0] i_1_reg_364_pp0_iter1_reg;
wire   [0:0] icmp_ln639_fu_175_p2;
reg   [0:0] icmp_ln639_reg_369_pp0_iter1_reg;
reg   [0:0] icmp_ln639_reg_369_pp0_iter2_reg;
wire   [127:0] trunc_ln681_3_fu_193_p1;
reg   [127:0] trunc_ln681_3_reg_373;
reg    ap_block_state2_pp0_stage1_iter0;
reg    ap_block_state14_pp0_stage1_iter3;
reg    ap_block_pp0_stage1_11001;
wire   [127:0] trunc_ln681_2_fu_197_p1;
reg   [127:0] trunc_ln681_2_reg_378;
reg    ap_block_state3_pp0_stage2_iter0;
reg    ap_block_pp0_stage2_11001;
wire   [127:0] trunc_ln681_1_fu_201_p1;
reg   [127:0] trunc_ln681_1_reg_383;
reg    ap_block_pp0_stage3_11001;
wire   [127:0] trunc_ln681_fu_207_p1;
reg   [127:0] trunc_ln681_reg_388;
wire   [63:0] trunc_ln681_5_fu_216_p1;
reg   [63:0] trunc_ln681_5_reg_393;
reg   [62:0] tmp_5_reg_398;
wire   [0:0] icmp_ln681_fu_259_p2;
wire   [511:0] trunc_ln681_6_fu_309_p1;
reg   [511:0] trunc_ln681_6_reg_425;
reg   [503:0] tmp_6_reg_431;
reg    ap_enable_reg_pp0_iter0_reg;
reg    ap_block_pp0_stage1_subdone;
wire  signed [63:0] sext_ln681_fu_290_p1;
reg    ap_block_pp0_stage3_01001;
wire   [511:0] zext_ln681_5_fu_330_p1;
reg    ap_block_pp0_stage0_01001;
wire   [63:0] zext_ln681_4_fu_326_p1;
reg   [9:0] i_fu_92;
wire   [9:0] add_ln639_fu_169_p2;
wire    ap_loop_init;
reg   [9:0] ap_sig_allocacmp_i_1;
wire   [126:0] shl_ln681_fu_211_p2;
wire   [511:0] or_ln681_s_fu_230_p5;
wire   [8:0] shl_ln681_2_fu_242_p3;
wire   [1015:0] grp_fu_253_p0;
wire   [1015:0] grp_fu_253_p1;
wire   [15:0] shl_ln_fu_264_p3;
wire   [63:0] zext_ln681_1_fu_271_p1;
wire   [63:0] add_ln681_fu_275_p2;
wire   [57:0] trunc_ln681_4_fu_280_p4;
wire   [1015:0] grp_fu_253_p2;
reg    grp_fu_253_ce;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_condition_exit_pp0_iter2_stage1;
reg    ap_idle_pp0_0to1;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [3:0] ap_NS_fsm;
reg    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_1to3;
reg    ap_block_pp0_stage2_subdone;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;
// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 i_fu_92 = 10'd0;
#0 ap_done_reg = 1'b0;
end
C_drain_IO_L3_out_serialize_shl_1016ns_9ns_1016_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .OP( 0 ),
    .din0_WIDTH( 1016 ),
    .din1_WIDTH( 9 ),
    .dout_WIDTH( 1016 ))
shl_1016ns_9ns_1016_2_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_253_p0),
    .din1(grp_fu_253_p1),
    .ce(grp_fu_253_ce),
    .dout(grp_fu_253_p2)
);
C_drain_IO_L3_out_serialize_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage3),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);
always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end
always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end
always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end
always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage3)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end
always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_subdone))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end
always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_subdone))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end
always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to1 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter2_stage1))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= 1'b0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
    end
end
always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to1 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter2_stage1))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= 1'b0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
    end
end
always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln639_fu_175_p2 == 1'd0))) begin
            i_fu_92 <= add_ln639_fu_169_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_92 <= 10'd0;
        end
    end
end
always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_1_reg_364 <= ap_sig_allocacmp_i_1;
        i_1_reg_364_pp0_iter1_reg <= i_1_reg_364;
        icmp_ln639_reg_369 <= icmp_ln639_fu_175_p2;
        icmp_ln639_reg_369_pp0_iter1_reg <= icmp_ln639_reg_369;
        icmp_ln639_reg_369_pp0_iter2_reg <= icmp_ln639_reg_369_pp0_iter1_reg;
        tmp_5_reg_398 <= {{shl_ln681_fu_211_p2[126:64]}};
        trunc_ln681_5_reg_393 <= trunc_ln681_5_fu_216_p1;
        trunc_ln681_reg_388 <= trunc_ln681_fu_207_p1;
        zext_ln681_cast_reg_359[5 : 0] <= zext_ln681_cast_fu_147_p1[5 : 0];
    end
end
always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        icmp_ln681_reg_413 <= icmp_ln681_fu_259_p2;
        trunc_ln681_3_reg_373 <= trunc_ln681_3_fu_193_p1;
    end
end
always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        tmp_6_reg_431 <= {{grp_fu_253_p2[1015:512]}};
        trunc_ln681_2_reg_378 <= trunc_ln681_2_fu_197_p1;
        trunc_ln681_6_reg_425 <= trunc_ln681_6_fu_309_p1;
    end
end
always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        trunc_ln681_1_reg_383 <= trunc_ln681_1_fu_201_p1;
    end
end
always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2))) begin
        C_blk_n_AW = m_axi_C_AWREADY;
    end else begin
        C_blk_n_AW = 1'b1;
    end
end
always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        C_blk_n_B = m_axi_C_BVALID;
    end else begin
        C_blk_n_B = 1'b1;
    end
end
always @ (*) begin
    if ((((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln681_reg_413 == 1'd1) & (1'b0 == ap_block_pp0_stage0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3)))) begin
        C_blk_n_W = m_axi_C_WREADY;
    end else begin
        C_blk_n_W = 1'b1;
    end
end
always @ (*) begin
    if (((icmp_ln639_reg_369 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_subdone))) begin
        ap_condition_exit_pp0_iter0_stage3 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage3 = 1'b0;
    end
end
always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln639_reg_369_pp0_iter2_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
        ap_condition_exit_pp0_iter2_stage1 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter2_stage1 = 1'b0;
    end
end
always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end
always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end
always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end
always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end
always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to1 = 1'b1;
    end else begin
        ap_idle_pp0_0to1 = 1'b0;
    end
end
always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_1to3 = 1'b1;
    end else begin
        ap_idle_pp0_1to3 = 1'b0;
    end
end
always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end
always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_i_1 = 10'd0;
    end else begin
        ap_sig_allocacmp_i_1 = i_fu_92;
    end
end
always @ (*) begin
    if ((((icmp_ln639_reg_369 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3)) | ((icmp_ln639_reg_369 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2)) | ((icmp_ln639_reg_369 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0)))) begin
        fifo_C_drain_local_in_s_blk_n = fifo_C_drain_local_in_s_empty_n;
    end else begin
        fifo_C_drain_local_in_s_blk_n = 1'b1;
    end
end
always @ (*) begin
    if ((((icmp_ln639_reg_369 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((icmp_ln639_reg_369 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((icmp_ln639_reg_369 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        fifo_C_drain_local_in_s_read = 1'b1;
    end else begin
        fifo_C_drain_local_in_s_read = 1'b0;
    end
end
always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        grp_fu_253_ce = 1'b1;
    end else begin
        grp_fu_253_ce = 1'b0;
    end
end
always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        m_axi_C_AWVALID = 1'b1;
    end else begin
        m_axi_C_AWVALID = 1'b0;
    end
end
always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        m_axi_C_BREADY = 1'b1;
    end else begin
        m_axi_C_BREADY = 1'b0;
    end
end
always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln681_reg_413 == 1'd1) & (1'b0 == ap_block_pp0_stage0_01001))) begin
        m_axi_C_WDATA = zext_ln681_5_fu_330_p1;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_01001))) begin
        m_axi_C_WDATA = trunc_ln681_6_reg_425;
    end else begin
        m_axi_C_WDATA = 'bx;
    end
end
always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln681_reg_413 == 1'd1) & (1'b0 == ap_block_pp0_stage0_01001))) begin
        m_axi_C_WSTRB = zext_ln681_4_fu_326_p1;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_01001))) begin
        m_axi_C_WSTRB = trunc_ln681_5_reg_393;
    end else begin
        m_axi_C_WSTRB = 'bx;
    end
end
always @ (*) begin
    if ((((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln681_reg_413 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)))) begin
        m_axi_C_WVALID = 1'b1;
    end else begin
        m_axi_C_WVALID = 1'b0;
    end
end
always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to3 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if (((ap_idle_pp0_0to1 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter2_stage1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end
assign add_ln639_fu_169_p2 = (ap_sig_allocacmp_i_1 + 10'd1);
assign add_ln681_fu_275_p2 = (zext_ln681_1_fu_271_p1 + C_offset);
assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];
assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];
assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];
assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd3];
assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);
always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state5_pp0_stage0_iter1));
end
always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state9_io)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state5_pp0_stage0_iter1)));
end
always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state9_io)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state5_pp0_stage0_iter1)));
end
assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);
always @ (*) begin
    ap_block_pp0_stage1_11001 = (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage1_iter0)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state14_pp0_stage1_iter3)));
end
always @ (*) begin
    ap_block_pp0_stage1_subdone = (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage1_iter0)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state14_pp0_stage1_iter3)));
end
assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);
always @ (*) begin
    ap_block_pp0_stage2_11001 = (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage2_iter0)) | ((m_axi_C_AWREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end
always @ (*) begin
    ap_block_pp0_stage2_subdone = (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage2_iter0)) | ((m_axi_C_AWREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end
assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);
always @ (*) begin
    ap_block_pp0_stage3_01001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage3_iter0));
end
always @ (*) begin
    ap_block_pp0_stage3_11001 = (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage3_iter0)) | ((m_axi_C_WREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end
always @ (*) begin
    ap_block_pp0_stage3_subdone = (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage3_iter0)) | ((m_axi_C_WREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end
always @ (*) begin
    ap_block_state14_pp0_stage1_iter3 = (m_axi_C_BVALID == 1'b0);
end
always @ (*) begin
    ap_block_state2_pp0_stage1_iter0 = ((icmp_ln639_reg_369 == 1'd0) & (fifo_C_drain_local_in_s_empty_n == 1'b0));
end
always @ (*) begin
    ap_block_state3_pp0_stage2_iter0 = ((icmp_ln639_reg_369 == 1'd0) & (fifo_C_drain_local_in_s_empty_n == 1'b0));
end
always @ (*) begin
    ap_block_state4_pp0_stage3_iter0 = ((icmp_ln639_reg_369 == 1'd0) & (fifo_C_drain_local_in_s_empty_n == 1'b0));
end
always @ (*) begin
    ap_block_state5_pp0_stage0_iter1 = (fifo_C_drain_local_in_s_empty_n == 1'b0);
end
always @ (*) begin
    ap_block_state9_io = ((m_axi_C_WREADY == 1'b0) & (icmp_ln681_reg_413 == 1'd1));
end
assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);
assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage3;
assign grp_fu_253_p0 = or_ln681_s_fu_230_p5;
assign grp_fu_253_p1 = shl_ln681_2_fu_242_p3;
assign icmp_ln639_fu_175_p2 = ((ap_sig_allocacmp_i_1 == 10'd612) ? 1'b1 : 1'b0);
assign icmp_ln681_fu_259_p2 = ((empty != 6'd0) ? 1'b1 : 1'b0);
assign m_axi_C_ARADDR = 64'd0;
assign m_axi_C_ARBURST = 2'd0;
assign m_axi_C_ARCACHE = 4'd0;
assign m_axi_C_ARID = 1'd0;
assign m_axi_C_ARLEN = 32'd0;
assign m_axi_C_ARLOCK = 2'd0;
assign m_axi_C_ARPROT = 3'd0;
assign m_axi_C_ARQOS = 4'd0;
assign m_axi_C_ARREGION = 4'd0;
assign m_axi_C_ARSIZE = 3'd0;
assign m_axi_C_ARUSER = 1'd0;
assign m_axi_C_ARVALID = 1'b0;
assign m_axi_C_AWADDR = sext_ln681_fu_290_p1;
assign m_axi_C_AWBURST = 2'd0;
assign m_axi_C_AWCACHE = 4'd0;
assign m_axi_C_AWID = 1'd0;
assign m_axi_C_AWLEN = ((icmp_ln681_reg_413[0:0] == 1'b1) ? 32'd2 : 32'd1);
assign m_axi_C_AWLOCK = 2'd0;
assign m_axi_C_AWPROT = 3'd0;
assign m_axi_C_AWQOS = 4'd0;
assign m_axi_C_AWREGION = 4'd0;
assign m_axi_C_AWSIZE = 3'd0;
assign m_axi_C_AWUSER = 1'd0;
assign m_axi_C_RREADY = 1'b0;
assign m_axi_C_WID = 1'd0;
assign m_axi_C_WLAST = 1'b0;
assign m_axi_C_WUSER = 1'd0;
assign or_ln681_s_fu_230_p5 = {{{{trunc_ln681_reg_388}, {trunc_ln681_1_reg_383}}, {trunc_ln681_2_reg_378}}, {trunc_ln681_3_reg_373}};
assign sext_ln681_fu_290_p1 = $signed(trunc_ln681_4_fu_280_p4);
assign shl_ln681_2_fu_242_p3 = {{empty}, {3'd0}};
assign shl_ln681_fu_211_p2 = 127'd18446744073709551615 << zext_ln681_cast_reg_359;
assign shl_ln_fu_264_p3 = {{i_1_reg_364_pp0_iter1_reg}, {6'd0}};
assign trunc_ln681_1_fu_201_p1 = fifo_C_drain_local_in_s_dout[127:0];
assign trunc_ln681_2_fu_197_p1 = fifo_C_drain_local_in_s_dout[127:0];
assign trunc_ln681_3_fu_193_p1 = fifo_C_drain_local_in_s_dout[127:0];
assign trunc_ln681_4_fu_280_p4 = {{add_ln681_fu_275_p2[63:6]}};
assign trunc_ln681_5_fu_216_p1 = shl_ln681_fu_211_p2[63:0];
assign trunc_ln681_6_fu_309_p1 = grp_fu_253_p2[511:0];
assign trunc_ln681_fu_207_p1 = fifo_C_drain_local_in_s_dout[127:0];
assign zext_ln681_1_fu_271_p1 = shl_ln_fu_264_p3;
assign zext_ln681_4_fu_326_p1 = tmp_5_reg_398;
assign zext_ln681_5_fu_330_p1 = tmp_6_reg_431;
assign zext_ln681_cast_fu_147_p1 = zext_ln681;
always @ (posedge ap_clk) begin
    zext_ln681_cast_reg_359[126:6] <= 121'b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
end
endmodule