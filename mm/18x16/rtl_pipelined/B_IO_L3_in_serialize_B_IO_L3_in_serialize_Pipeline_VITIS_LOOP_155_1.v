`timescale 1 ns / 1 ps
// ==============================================================
// Generated by Vitis HLS v2023.2.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
 
module B_IO_L3_in_serialize_B_IO_L3_in_serialize_Pipeline_VITIS_LOOP_155_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_B_AWVALID,
        m_axi_B_AWREADY,
        m_axi_B_AWADDR,
        m_axi_B_AWID,
        m_axi_B_AWLEN,
        m_axi_B_AWSIZE,
        m_axi_B_AWBURST,
        m_axi_B_AWLOCK,
        m_axi_B_AWCACHE,
        m_axi_B_AWPROT,
        m_axi_B_AWQOS,
        m_axi_B_AWREGION,
        m_axi_B_AWUSER,
        m_axi_B_WVALID,
        m_axi_B_WREADY,
        m_axi_B_WDATA,
        m_axi_B_WSTRB,
        m_axi_B_WLAST,
        m_axi_B_WID,
        m_axi_B_WUSER,
        m_axi_B_ARVALID,
        m_axi_B_ARREADY,
        m_axi_B_ARADDR,
        m_axi_B_ARID,
        m_axi_B_ARLEN,
        m_axi_B_ARSIZE,
        m_axi_B_ARBURST,
        m_axi_B_ARLOCK,
        m_axi_B_ARCACHE,
        m_axi_B_ARPROT,
        m_axi_B_ARQOS,
        m_axi_B_ARREGION,
        m_axi_B_ARUSER,
        m_axi_B_RVALID,
        m_axi_B_RREADY,
        m_axi_B_RDATA,
        m_axi_B_RLAST,
        m_axi_B_RID,
        m_axi_B_RFIFONUM,
        m_axi_B_RUSER,
        m_axi_B_RRESP,
        m_axi_B_BVALID,
        m_axi_B_BREADY,
        m_axi_B_BRESP,
        m_axi_B_BID,
        m_axi_B_BUSER,
        fifo_B_local_out_din,
        fifo_B_local_out_full_n,
        fifo_B_local_out_write,
        empty,
        B_offset
);
parameter    ap_ST_fsm_pp0_stage0 = 2'd1;
parameter    ap_ST_fsm_pp0_stage1 = 2'd2;
input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_B_AWVALID;
input   m_axi_B_AWREADY;
output  [63:0] m_axi_B_AWADDR;
output  [0:0] m_axi_B_AWID;
output  [31:0] m_axi_B_AWLEN;
output  [2:0] m_axi_B_AWSIZE;
output  [1:0] m_axi_B_AWBURST;
output  [1:0] m_axi_B_AWLOCK;
output  [3:0] m_axi_B_AWCACHE;
output  [2:0] m_axi_B_AWPROT;
output  [3:0] m_axi_B_AWQOS;
output  [3:0] m_axi_B_AWREGION;
output  [0:0] m_axi_B_AWUSER;
output   m_axi_B_WVALID;
input   m_axi_B_WREADY;
output  [511:0] m_axi_B_WDATA;
output  [63:0] m_axi_B_WSTRB;
output   m_axi_B_WLAST;
output  [0:0] m_axi_B_WID;
output  [0:0] m_axi_B_WUSER;
output   m_axi_B_ARVALID;
input   m_axi_B_ARREADY;
output  [63:0] m_axi_B_ARADDR;
output  [0:0] m_axi_B_ARID;
output  [31:0] m_axi_B_ARLEN;
output  [2:0] m_axi_B_ARSIZE;
output  [1:0] m_axi_B_ARBURST;
output  [1:0] m_axi_B_ARLOCK;
output  [3:0] m_axi_B_ARCACHE;
output  [2:0] m_axi_B_ARPROT;
output  [3:0] m_axi_B_ARQOS;
output  [3:0] m_axi_B_ARREGION;
output  [0:0] m_axi_B_ARUSER;
input   m_axi_B_RVALID;
output   m_axi_B_RREADY;
input  [511:0] m_axi_B_RDATA;
input   m_axi_B_RLAST;
input  [0:0] m_axi_B_RID;
input  [8:0] m_axi_B_RFIFONUM;
input  [0:0] m_axi_B_RUSER;
input  [1:0] m_axi_B_RRESP;
input   m_axi_B_BVALID;
output   m_axi_B_BREADY;
input  [1:0] m_axi_B_BRESP;
input  [0:0] m_axi_B_BID;
input  [0:0] m_axi_B_BUSER;
output  [512:0] fifo_B_local_out_din;
input   fifo_B_local_out_full_n;
output   fifo_B_local_out_write;
input  [5:0] empty;
input  [63:0] B_offset;
reg ap_idle;
reg m_axi_B_ARVALID;
reg m_axi_B_RREADY;
reg fifo_B_local_out_write;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage1;
reg   [0:0] icmp_ln155_reg_281;
reg    ap_block_state2_io;
reg   [0:0] icmp_ln155_reg_281_pp0_iter4_reg;
reg    ap_block_state10_pp0_stage1_iter4;
reg    ap_block_state14_pp0_stage1_iter6;
reg    ap_block_pp0_stage1_subdone;
reg    ap_condition_exit_pp0_iter0_stage1;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    B_blk_n_AR;
wire    ap_block_pp0_stage1;
reg    B_blk_n_R;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln158_reg_290;
reg   [0:0] icmp_ln158_reg_290_pp0_iter4_reg;
reg    fifo_B_local_out_blk_n;
reg    ap_predicate_op61_read_state11;
reg    ap_block_state11_pp0_stage0_iter5;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln155_fu_149_p2;
reg   [0:0] icmp_ln155_reg_281_pp0_iter1_reg;
reg   [0:0] icmp_ln155_reg_281_pp0_iter2_reg;
reg   [0:0] icmp_ln155_reg_281_pp0_iter3_reg;
wire   [7:0] trunc_ln158_fu_155_p1;
reg   [7:0] trunc_ln158_reg_285;
wire   [0:0] icmp_ln158_fu_187_p2;
reg    ap_block_pp0_stage1_11001;
reg   [0:0] icmp_ln158_reg_290_pp0_iter1_reg;
reg   [0:0] icmp_ln158_reg_290_pp0_iter2_reg;
reg   [0:0] icmp_ln158_reg_290_pp0_iter3_reg;
reg   [511:0] B_addr_read_reg_305;
wire   [511:0] trunc_ln151_fu_248_p1;
reg   [511:0] trunc_ln151_reg_325;
reg    ap_enable_reg_pp0_iter0_reg;
wire   [511:0] ap_phi_reg_pp0_iter0_empty_24_reg_110;
reg   [511:0] ap_phi_reg_pp0_iter1_empty_24_reg_110;
reg   [511:0] ap_phi_reg_pp0_iter2_empty_24_reg_110;
reg   [511:0] ap_phi_reg_pp0_iter3_empty_24_reg_110;
reg   [511:0] ap_phi_reg_pp0_iter4_empty_24_reg_110;
reg   [511:0] ap_phi_reg_pp0_iter5_empty_24_reg_110;
wire  signed [63:0] sext_ln158_fu_202_p1;
reg   [8:0] i_fu_76;
wire   [8:0] add_ln155_fu_143_p2;
wire    ap_loop_init;
reg   [8:0] ap_sig_allocacmp_i_1;
reg    ap_block_pp0_stage1_01001;
wire   [13:0] shl_ln158_1_fu_171_p3;
wire   [63:0] zext_ln158_fu_178_p1;
wire   [63:0] add_ln158_fu_182_p2;
wire   [57:0] trunc_ln1_fu_192_p4;
wire   [8:0] shl_ln_fu_231_p3;
wire   [1023:0] grp_fu_242_p0;
wire   [1023:0] grp_fu_242_p1;
wire   [1023:0] grp_fu_242_p2;
reg    grp_fu_242_ce;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg   [1:0] ap_NS_fsm;
reg    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_1to6;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;
// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 i_fu_76 = 9'd0;
#0 ap_done_reg = 1'b0;
end
B_IO_L3_in_serialize_lshr_1024ns_9ns_1024_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .OP( 1 ),
    .din0_WIDTH( 1024 ),
    .din1_WIDTH( 9 ),
    .dout_WIDTH( 1024 ))
lshr_1024ns_9ns_1024_2_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_242_p0),
    .din1(grp_fu_242_p1),
    .ce(grp_fu_242_ce),
    .dout(grp_fu_242_p2)
);
B_IO_L3_in_serialize_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage1),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);
always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end
always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter5_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end
always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end
always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage1)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end
always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end
always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end
always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end
always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end
always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end
always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln158_reg_290_pp0_iter4_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln155_reg_281_pp0_iter4_reg == 1'd0))) begin
        ap_phi_reg_pp0_iter5_empty_24_reg_110 <= m_axi_B_RDATA;
    end else if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        ap_phi_reg_pp0_iter5_empty_24_reg_110 <= ap_phi_reg_pp0_iter4_empty_24_reg_110;
    end
end
always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln155_fu_149_p2 == 1'd0))) begin
            i_fu_76 <= add_ln155_fu_143_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_76 <= 9'd0;
        end
    end
end
always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        B_addr_read_reg_305 <= m_axi_B_RDATA;
    end
end
always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        icmp_ln158_reg_290 <= icmp_ln158_fu_187_p2;
        icmp_ln158_reg_290_pp0_iter1_reg <= icmp_ln158_reg_290;
        icmp_ln158_reg_290_pp0_iter2_reg <= icmp_ln158_reg_290_pp0_iter1_reg;
        icmp_ln158_reg_290_pp0_iter3_reg <= icmp_ln158_reg_290_pp0_iter2_reg;
        icmp_ln158_reg_290_pp0_iter4_reg <= icmp_ln158_reg_290_pp0_iter3_reg;
    end
end
always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        ap_phi_reg_pp0_iter1_empty_24_reg_110 <= ap_phi_reg_pp0_iter0_empty_24_reg_110;
    end
end
always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        ap_phi_reg_pp0_iter2_empty_24_reg_110 <= ap_phi_reg_pp0_iter1_empty_24_reg_110;
    end
end
always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        ap_phi_reg_pp0_iter3_empty_24_reg_110 <= ap_phi_reg_pp0_iter2_empty_24_reg_110;
    end
end
always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        ap_phi_reg_pp0_iter4_empty_24_reg_110 <= ap_phi_reg_pp0_iter3_empty_24_reg_110;
    end
end
always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln155_reg_281 <= icmp_ln155_fu_149_p2;
        icmp_ln155_reg_281_pp0_iter1_reg <= icmp_ln155_reg_281;
        icmp_ln155_reg_281_pp0_iter2_reg <= icmp_ln155_reg_281_pp0_iter1_reg;
        icmp_ln155_reg_281_pp0_iter3_reg <= icmp_ln155_reg_281_pp0_iter2_reg;
        icmp_ln155_reg_281_pp0_iter4_reg <= icmp_ln155_reg_281_pp0_iter3_reg;
        trunc_ln151_reg_325 <= trunc_ln151_fu_248_p1;
        trunc_ln158_reg_285 <= trunc_ln158_fu_155_p1;
    end
end
always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1) & (icmp_ln155_reg_281 == 1'd0))) begin
        B_blk_n_AR = m_axi_B_ARREADY;
    end else begin
        B_blk_n_AR = 1'b1;
    end
end
always @ (*) begin
    if ((((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln158_reg_290_pp0_iter4_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (icmp_ln155_reg_281_pp0_iter4_reg == 1'd0)) | ((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1) & (icmp_ln155_reg_281_pp0_iter4_reg == 1'd0)))) begin
        B_blk_n_R = m_axi_B_RVALID;
    end else begin
        B_blk_n_R = 1'b1;
    end
end
always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone) & (icmp_ln155_reg_281 == 1'd1))) begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b0;
    end
end
always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter5_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end
always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end
always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end
always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end
always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_1to6 = 1'b1;
    end else begin
        ap_idle_pp0_1to6 = 1'b0;
    end
end
always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end
always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_i_1 = 9'd0;
    end else begin
        ap_sig_allocacmp_i_1 = i_fu_76;
    end
end
always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        fifo_B_local_out_blk_n = fifo_B_local_out_full_n;
    end else begin
        fifo_B_local_out_blk_n = 1'b1;
    end
end
always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        fifo_B_local_out_write = 1'b1;
    end else begin
        fifo_B_local_out_write = 1'b0;
    end
end
always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        grp_fu_242_ce = 1'b1;
    end else begin
        grp_fu_242_ce = 1'b0;
    end
end
always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln155_reg_281 == 1'd0))) begin
        m_axi_B_ARVALID = 1'b1;
    end else begin
        m_axi_B_ARVALID = 1'b0;
    end
end
always @ (*) begin
    if ((((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op61_read_state11 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln155_reg_281_pp0_iter4_reg == 1'd0)))) begin
        m_axi_B_RREADY = 1'b1;
    end else begin
        m_axi_B_RREADY = 1'b0;
    end
end
always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to6 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end
assign add_ln155_fu_143_p2 = (ap_sig_allocacmp_i_1 + 9'd1);
assign add_ln158_fu_182_p2 = (zext_ln158_fu_178_p1 + B_offset);
assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];
assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];
assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);
always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_block_state11_pp0_stage0_iter5));
end
always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_block_state11_pp0_stage0_iter5));
end
assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);
always @ (*) begin
    ap_block_pp0_stage1_01001 = (((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b1 == ap_block_state14_pp0_stage1_iter6)) | ((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_block_state10_pp0_stage1_iter4)));
end
always @ (*) begin
    ap_block_pp0_stage1_11001 = (((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b1 == ap_block_state14_pp0_stage1_iter6)) | ((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_block_state10_pp0_stage1_iter4)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state2_io)));
end
always @ (*) begin
    ap_block_pp0_stage1_subdone = (((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b1 == ap_block_state14_pp0_stage1_iter6)) | ((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_block_state10_pp0_stage1_iter4)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state2_io)));
end
always @ (*) begin
    ap_block_state10_pp0_stage1_iter4 = ((m_axi_B_RVALID == 1'b0) & (icmp_ln155_reg_281_pp0_iter4_reg == 1'd0));
end
always @ (*) begin
    ap_block_state11_pp0_stage0_iter5 = ((m_axi_B_RVALID == 1'b0) & (ap_predicate_op61_read_state11 == 1'b1));
end
always @ (*) begin
    ap_block_state14_pp0_stage1_iter6 = (fifo_B_local_out_full_n == 1'b0);
end
always @ (*) begin
    ap_block_state2_io = ((m_axi_B_ARREADY == 1'b0) & (icmp_ln155_reg_281 == 1'd0));
end
assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);
assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage1;
assign ap_phi_reg_pp0_iter0_empty_24_reg_110 = 'bx;
always @ (*) begin
    ap_predicate_op61_read_state11 = ((icmp_ln158_reg_290_pp0_iter4_reg == 1'd1) & (icmp_ln155_reg_281_pp0_iter4_reg == 1'd0));
end
assign fifo_B_local_out_din = trunc_ln151_reg_325;
assign grp_fu_242_p0 = {{ap_phi_reg_pp0_iter5_empty_24_reg_110}, {B_addr_read_reg_305}};
assign grp_fu_242_p1 = shl_ln_fu_231_p3;
assign icmp_ln155_fu_149_p2 = ((ap_sig_allocacmp_i_1 == 9'd256) ? 1'b1 : 1'b0);
assign icmp_ln158_fu_187_p2 = ((empty != 6'd0) ? 1'b1 : 1'b0);
assign m_axi_B_ARADDR = sext_ln158_fu_202_p1;
assign m_axi_B_ARBURST = 2'd0;
assign m_axi_B_ARCACHE = 4'd0;
assign m_axi_B_ARID = 1'd0;
assign m_axi_B_ARLEN = ((icmp_ln158_fu_187_p2[0:0] == 1'b1) ? 32'd2 : 32'd1);
assign m_axi_B_ARLOCK = 2'd0;
assign m_axi_B_ARPROT = 3'd0;
assign m_axi_B_ARQOS = 4'd0;
assign m_axi_B_ARREGION = 4'd0;
assign m_axi_B_ARSIZE = 3'd0;
assign m_axi_B_ARUSER = 1'd0;
assign m_axi_B_AWADDR = 64'd0;
assign m_axi_B_AWBURST = 2'd0;
assign m_axi_B_AWCACHE = 4'd0;
assign m_axi_B_AWID = 1'd0;
assign m_axi_B_AWLEN = 32'd0;
assign m_axi_B_AWLOCK = 2'd0;
assign m_axi_B_AWPROT = 3'd0;
assign m_axi_B_AWQOS = 4'd0;
assign m_axi_B_AWREGION = 4'd0;
assign m_axi_B_AWSIZE = 3'd0;
assign m_axi_B_AWUSER = 1'd0;
assign m_axi_B_AWVALID = 1'b0;
assign m_axi_B_BREADY = 1'b0;
assign m_axi_B_WDATA = 512'd0;
assign m_axi_B_WID = 1'd0;
assign m_axi_B_WLAST = 1'b0;
assign m_axi_B_WSTRB = 64'd0;
assign m_axi_B_WUSER = 1'd0;
assign m_axi_B_WVALID = 1'b0;
assign sext_ln158_fu_202_p1 = $signed(trunc_ln1_fu_192_p4);
assign shl_ln158_1_fu_171_p3 = {{trunc_ln158_reg_285}, {6'd0}};
assign shl_ln_fu_231_p3 = {{empty}, {3'd0}};
assign trunc_ln151_fu_248_p1 = grp_fu_242_p2[511:0];
assign trunc_ln158_fu_155_p1 = ap_sig_allocacmp_i_1[7:0];
assign trunc_ln1_fu_192_p4 = {{add_ln158_fu_182_p2[63:6]}};
assign zext_ln158_fu_178_p1 = shl_ln158_1_fu_171_p3;
endmodule