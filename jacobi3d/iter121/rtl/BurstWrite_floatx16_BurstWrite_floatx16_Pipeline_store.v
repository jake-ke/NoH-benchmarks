// ==============================================================
// Generated by Vitis HLS v2023.2.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module BurstWrite_floatx16_BurstWrite_floatx16_Pipeline_store (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        n,
        dest_write_resp_s_dout,
        dest_write_resp_s_empty_n,
        dest_write_resp_s_read,
        src_s_dout,
        src_s_empty_n,
        src_s_read,
        dest_write_addr_s_din,
        dest_write_addr_s_full_n,
        dest_write_addr_s_write,
        dest_write_data_din,
        dest_write_data_full_n,
        dest_write_data_write,
        dest_write_addr_offset_load
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [63:0] n;
input  [8:0] dest_write_resp_s_dout;
input   dest_write_resp_s_empty_n;
output   dest_write_resp_s_read;
input  [512:0] src_s_dout;
input   src_s_empty_n;
output   src_s_read;
output  [63:0] dest_write_addr_s_din;
input   dest_write_addr_s_full_n;
output   dest_write_addr_s_write;
output  [512:0] dest_write_data_din;
input   dest_write_data_full_n;
output   dest_write_data_write;
input  [63:0] dest_write_addr_offset_load;

reg ap_idle;
reg dest_write_resp_s_read;
reg src_s_read;
reg dest_write_addr_s_write;
reg dest_write_data_write;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln104_fu_174_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
reg   [63:0] i_req_fu_56;
wire   [63:0] i_req_2_fu_219_p2;
wire   [0:0] icmp_ln106_fu_179_p2;
wire   [0:0] tmp_nbreadreq_fu_76_p3;
wire   [0:0] tmp_1_nbwritereq_fu_84_p3;
wire   [0:0] tmp_2_nbwritereq_fu_92_p3;
wire    ap_loop_init;
wire    ap_block_pp0_stage0;
reg   [63:0] i_resp_fu_60;
wire   [63:0] i_resp_2_fu_261_p2;
wire   [0:0] tmp_s_nbreadreq_fu_120_p3;
wire    ap_block_pp0_stage0_01001;
wire   [63:0] shl_ln25_fu_184_p2;
wire   [511:0] trunc_ln146_fu_206_p1;
wire   [7:0] elem_val_fu_243_p1;
wire   [8:0] zext_ln112_fu_247_p1;
wire   [8:0] resp_1_fu_251_p2;
wire   [63:0] zext_ln113_fu_257_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_223;
reg    ap_condition_227;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 i_req_fu_56 = 64'd0;
#0 i_resp_fu_60 = 64'd0;
#0 ap_done_reg = 1'b0;
end

BurstWrite_floatx16_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            i_req_fu_56 <= 64'd0;
        end else if ((1'b1 == ap_condition_223)) begin
            i_req_fu_56 <= i_req_2_fu_219_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            i_resp_fu_60 <= 64'd0;
        end else if ((1'b1 == ap_condition_227)) begin
            i_resp_fu_60 <= i_resp_2_fu_261_p2;
        end
    end
end

always @ (*) begin
    if (((icmp_ln104_fu_174_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_2_nbwritereq_fu_92_p3 == 1'd1) & (tmp_1_nbwritereq_fu_84_p3 == 1'd1) & (tmp_nbreadreq_fu_76_p3 == 1'd1) & (icmp_ln106_fu_179_p2 == 1'd1) & (dest_write_addr_s_full_n == 1'b1) & (icmp_ln104_fu_174_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dest_write_addr_s_write = 1'b1;
    end else begin
        dest_write_addr_s_write = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_2_nbwritereq_fu_92_p3 == 1'd1) & (tmp_1_nbwritereq_fu_84_p3 == 1'd1) & (tmp_nbreadreq_fu_76_p3 == 1'd1) & (icmp_ln106_fu_179_p2 == 1'd1) & (dest_write_data_full_n == 1'b1) & (icmp_ln104_fu_174_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dest_write_data_write = 1'b1;
    end else begin
        dest_write_data_write = 1'b0;
    end
end

always @ (*) begin
    if (((dest_write_resp_s_empty_n == 1'b1) & (icmp_ln104_fu_174_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_s_nbreadreq_fu_120_p3 == 1'd1))) begin
        dest_write_resp_s_read = 1'b1;
    end else begin
        dest_write_resp_s_read = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_2_nbwritereq_fu_92_p3 == 1'd1) & (tmp_1_nbwritereq_fu_84_p3 == 1'd1) & (tmp_nbreadreq_fu_76_p3 == 1'd1) & (icmp_ln106_fu_179_p2 == 1'd1) & (src_s_empty_n == 1'b1) & (icmp_ln104_fu_174_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        src_s_read = 1'b1;
    end else begin
        src_s_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_223 = ((tmp_2_nbwritereq_fu_92_p3 == 1'd1) & (tmp_1_nbwritereq_fu_84_p3 == 1'd1) & (tmp_nbreadreq_fu_76_p3 == 1'd1) & (icmp_ln106_fu_179_p2 == 1'd1) & (icmp_ln104_fu_174_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_condition_227 = ((icmp_ln104_fu_174_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (tmp_s_nbreadreq_fu_120_p3 == 1'd1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign dest_write_addr_s_din = (dest_write_addr_offset_load + shl_ln25_fu_184_p2);

assign dest_write_data_din = trunc_ln146_fu_206_p1;

assign elem_val_fu_243_p1 = dest_write_resp_s_dout[7:0];

assign i_req_2_fu_219_p2 = (i_req_fu_56 + 64'd1);

assign i_resp_2_fu_261_p2 = (i_resp_fu_60 + zext_ln113_fu_257_p1);

assign icmp_ln104_fu_174_p2 = ((i_resp_fu_60 < n) ? 1'b1 : 1'b0);

assign icmp_ln106_fu_179_p2 = ((i_req_fu_56 < n) ? 1'b1 : 1'b0);

assign resp_1_fu_251_p2 = (zext_ln112_fu_247_p1 + 9'd1);

assign shl_ln25_fu_184_p2 = i_req_fu_56 << 64'd6;

assign tmp_1_nbwritereq_fu_84_p3 = dest_write_addr_s_full_n;

assign tmp_2_nbwritereq_fu_92_p3 = dest_write_data_full_n;

assign tmp_nbreadreq_fu_76_p3 = src_s_empty_n;

assign tmp_s_nbreadreq_fu_120_p3 = dest_write_resp_s_empty_n;

assign trunc_ln146_fu_206_p1 = src_s_dout[511:0];

assign zext_ln112_fu_247_p1 = elem_val_fu_243_p1;

assign zext_ln113_fu_257_p1 = resp_1_fu_251_p2;

endmodule //BurstWrite_floatx16_BurstWrite_floatx16_Pipeline_store
